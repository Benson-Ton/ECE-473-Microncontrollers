
radio_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800100  00000b52  00000be6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e7  008001fe  008001fe  00000ce4  2**0
                  ALLOC
  3 .stab         000027e4  00000000  00000000  00000ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015cf  00000000  00000000  000034c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004a97  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004aa8  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00004ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00005264  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000597c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  00005996  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
   4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
   8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
   c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  20:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_8>
  24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  28:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  30:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  40:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  48:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  84:	0c 94 29 04 	jmp	0x852	; 0x852 <__vector_33>
  88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  8c:	6a 04       	cpc	r6, r10
  8e:	41 04       	cpc	r4, r1
  90:	41 04       	cpc	r4, r1
  92:	41 04       	cpc	r4, r1
  94:	41 04       	cpc	r4, r1
  96:	41 04       	cpc	r4, r1
  98:	41 04       	cpc	r4, r1
  9a:	41 04       	cpc	r4, r1
  9c:	6a 04       	cpc	r6, r10
  9e:	41 04       	cpc	r4, r1
  a0:	41 04       	cpc	r4, r1
  a2:	41 04       	cpc	r4, r1
  a4:	41 04       	cpc	r4, r1
  a6:	41 04       	cpc	r4, r1
  a8:	41 04       	cpc	r4, r1
  aa:	41 04       	cpc	r4, r1
  ac:	74 04       	cpc	r7, r4
  ae:	41 04       	cpc	r4, r1
  b0:	41 04       	cpc	r4, r1
  b2:	41 04       	cpc	r4, r1
  b4:	41 04       	cpc	r4, r1
  b6:	41 04       	cpc	r4, r1
  b8:	41 04       	cpc	r4, r1
  ba:	41 04       	cpc	r4, r1
  bc:	41 04       	cpc	r4, r1
  be:	41 04       	cpc	r4, r1
  c0:	41 04       	cpc	r4, r1
  c2:	41 04       	cpc	r4, r1
  c4:	41 04       	cpc	r4, r1
  c6:	41 04       	cpc	r4, r1
  c8:	41 04       	cpc	r4, r1
  ca:	41 04       	cpc	r4, r1
  cc:	74 04       	cpc	r7, r4
  ce:	41 04       	cpc	r4, r1
  d0:	41 04       	cpc	r4, r1
  d2:	41 04       	cpc	r4, r1
  d4:	41 04       	cpc	r4, r1
  d6:	41 04       	cpc	r4, r1
  d8:	41 04       	cpc	r4, r1
  da:	41 04       	cpc	r4, r1
  dc:	41 04       	cpc	r4, r1
  de:	41 04       	cpc	r4, r1
  e0:	41 04       	cpc	r4, r1
  e2:	41 04       	cpc	r4, r1
  e4:	41 04       	cpc	r4, r1
  e6:	41 04       	cpc	r4, r1
  e8:	41 04       	cpc	r4, r1
  ea:	41 04       	cpc	r4, r1
  ec:	8b 04       	cpc	r8, r11
  ee:	41 04       	cpc	r4, r1
  f0:	41 04       	cpc	r4, r1
  f2:	41 04       	cpc	r4, r1
  f4:	41 04       	cpc	r4, r1
  f6:	41 04       	cpc	r4, r1
  f8:	41 04       	cpc	r4, r1
  fa:	41 04       	cpc	r4, r1
  fc:	8f 04       	cpc	r8, r15
  fe:	41 04       	cpc	r4, r1
 100:	41 04       	cpc	r4, r1
 102:	41 04       	cpc	r4, r1
 104:	41 04       	cpc	r4, r1
 106:	41 04       	cpc	r4, r1
 108:	41 04       	cpc	r4, r1
 10a:	41 04       	cpc	r4, r1
 10c:	41 04       	cpc	r4, r1
 10e:	41 04       	cpc	r4, r1
 110:	41 04       	cpc	r4, r1
 112:	41 04       	cpc	r4, r1
 114:	41 04       	cpc	r4, r1
 116:	41 04       	cpc	r4, r1
 118:	41 04       	cpc	r4, r1
 11a:	41 04       	cpc	r4, r1
 11c:	9d 04       	cpc	r9, r13
 11e:	41 04       	cpc	r4, r1
 120:	41 04       	cpc	r4, r1
 122:	41 04       	cpc	r4, r1
 124:	41 04       	cpc	r4, r1
 126:	41 04       	cpc	r4, r1
 128:	41 04       	cpc	r4, r1
 12a:	41 04       	cpc	r4, r1
 12c:	5b 04       	cpc	r5, r11

0000012e <__ctors_end>:
 12e:	11 24       	eor	r1, r1
 130:	1f be       	out	0x3f, r1	; 63
 132:	cf ef       	ldi	r28, 0xFF	; 255
 134:	d0 e1       	ldi	r29, 0x10	; 16
 136:	de bf       	out	0x3e, r29	; 62
 138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
 13a:	11 e0       	ldi	r17, 0x01	; 1
 13c:	a0 e0       	ldi	r26, 0x00	; 0
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	e2 e5       	ldi	r30, 0x52	; 82
 142:	fb e0       	ldi	r31, 0x0B	; 11
 144:	00 e0       	ldi	r16, 0x00	; 0
 146:	0b bf       	out	0x3b, r16	; 59
 148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
 14a:	07 90       	elpm	r0, Z+
 14c:	0d 92       	st	X+, r0
 14e:	ae 3f       	cpi	r26, 0xFE	; 254
 150:	b1 07       	cpc	r27, r17
 152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
 154:	22 e0       	ldi	r18, 0x02	; 2
 156:	ae ef       	ldi	r26, 0xFE	; 254
 158:	b1 e0       	ldi	r27, 0x01	; 1
 15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
 15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
 15e:	a5 3e       	cpi	r26, 0xE5	; 229
 160:	b2 07       	cpc	r27, r18
 162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
 164:	0e 94 e7 04 	call	0x9ce	; 0x9ce <main>
 168:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <_exit>

0000016c <__bad_interrupt>:
 16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <write_SPI>:
uint8_t  si4734_tune_status_buf[8];

//write
void write_SPI(uint8_t value){

SPDR = value; // take in which mode it is currently on and display it
 170:	8f b9       	out	0x0f, r24	; 15
        while (bit_is_clear(SPSR,SPIF)) {} //wait till data is sent out
 172:	77 9b       	sbis	0x0e, 7	; 14
 174:	fe cf       	rjmp	.-4      	; 0x172 <write_SPI+0x2>
PORTD |= (1 << PD2); //SEND data to bargraph, rising edge
 176:	92 9a       	sbi	0x12, 2	; 18
PORTD &= ~(1<<PD2); // falling edge
 178:	92 98       	cbi	0x12, 2	; 18
 17a:	08 95       	ret

0000017c <__vector_8>:
}


//ISR
ISR(INT7_vect){STC_interrupt = TRUE;
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	8f 93       	push	r24
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <STC_interrupt>
uint8_t  si4734_tune_status_buf[8];

//write
void write_SPI(uint8_t value){

SPDR = value; // take in which mode it is currently on and display it
 18e:	80 e2       	ldi	r24, 0x20	; 32
 190:	8f b9       	out	0x0f, r24	; 15
        while (bit_is_clear(SPSR,SPIF)) {} //wait till data is sent out
 192:	77 9b       	sbis	0x0e, 7	; 14
 194:	fe cf       	rjmp	.-4      	; 0x192 <__vector_8+0x16>
PORTD |= (1 << PD2); //SEND data to bargraph, rising edge
 196:	92 9a       	sbi	0x12, 2	; 18
PORTD &= ~(1<<PD2); // falling edge
 198:	92 98       	cbi	0x12, 2	; 18
//ISR
ISR(INT7_vect){STC_interrupt = TRUE;

	write_SPI(1 << 5);

}
 19a:	8f 91       	pop	r24
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <spi_init>:
//                            spi_init                               
//Initalizes the SPI port on the mega128. Does not do any further    
// external device specific initalizations.                          
//********************************************************************
void spi_init(void){
  DDRB |=  0x07;  //Turn on SS, MOSI, SCLK
 1a6:	87 b3       	in	r24, 0x17	; 23
 1a8:	87 60       	ori	r24, 0x07	; 7
 1aa:	87 bb       	out	0x17, r24	; 23
  //mstr mode, sck=clk/2, cycle 1/2 phase, low polarity, MSB 1st, 
  //no interrupts, enable SPI, clk low , rising edge sample
 // SPCR=(1<<SPE) | (1<<MSTR);
  SPSR=(1<<SPI2X); //SPI at 2x speed (8 MHz)  
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	8e b9       	out	0x0e, r24	; 14
//DDRB |= 0xF0; // set PORTB 4-7 bits as outputs
DDRA = 0x03; // set PORTA 6-7 bits as inputs
 1b0:	83 e0       	ldi	r24, 0x03	; 3
 1b2:	8a bb       	out	0x1a, r24	; 26
DDRD = (1 << PD2); // set PD2 as output
 1b4:	84 e0       	ldi	r24, 0x04	; 4
 1b6:	81 bb       	out	0x11, r24	; 17
 1b8:	08 95       	ret

000001ba <volume_init>:
}//spi_init


void volume_init(void){
//volume pin is PE3
TCCR3A = (1 << COM3A1 | (1 << WGM31) ); //normal operation w/ OC3A is disconnected
 1ba:	82 e8       	ldi	r24, 0x82	; 130
 1bc:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
TCCR3B |= (  (1 << CS30) | ( 1 << WGM32) | (1 << WGM33) ); //fast pwm 
 1c0:	ea e8       	ldi	r30, 0x8A	; 138
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	89 61       	ori	r24, 0x19	; 25
 1c8:	80 83       	st	Z, r24
ICR3 = 10; // Set overflow top ; controls frequency 
 1ca:	8a e0       	ldi	r24, 0x0A	; 10
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1d2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
OCR3A = 7; // set compare match; duty cycle
 1d6:	87 e0       	ldi	r24, 0x07	; 7
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 1de:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 1e2:	08 95       	ret

000001e4 <radio_reset>:




void radio_reset(void){
PORTE &= ~(1<<PE7); //int2 initially low to sense TWI mode
 1e4:	1f 98       	cbi	0x03, 7	; 3
DDRE  |= 0x80;      //turn on Port E bit 7 to drive it low
 1e6:	17 9a       	sbi	0x02, 7	; 2
PORTE |=  (1<<PE2); //hardware reset Si4734 
 1e8:	1a 9a       	sbi	0x03, 2	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	8f e1       	ldi	r24, 0x1F	; 31
 1ec:	93 e0       	ldi	r25, 0x03	; 3
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <radio_reset+0xa>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <radio_reset+0x10>
 1f4:	00 00       	nop
_delay_us(200);     //hold for 200us, 100us by spec         
PORTE &= ~(1<<PE2); //release reset 
 1f6:	1a 98       	cbi	0x03, 2	; 3
 1f8:	90 ea       	ldi	r25, 0xA0	; 160
 1fa:	9a 95       	dec	r25
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <radio_reset+0x16>
_delay_us(30);      //5us required because of my slow I2C translators I suspect
                    //Si code in "low" has 30us delay...no explaination given
DDRE  &= ~(0x80);   //now Port E bit 7 becomes input from the radio interrupt
 1fe:	17 98       	cbi	0x02, 7	; 2
 200:	08 95       	ret

00000202 <get_int_status>:
//
//TODO: update for interrupts
// 
uint8_t get_int_status(){

    si4734_wr_buf[0] = GET_INT_STATUS;              
 202:	84 e1       	ldi	r24, 0x14	; 20
 204:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <si4734_wr_buf>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1); //send get_int_status command
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	64 e0       	ldi	r22, 0x04	; 4
 20c:	72 e0       	ldi	r23, 0x02	; 2
 20e:	82 e2       	ldi	r24, 0x22	; 34
 210:	0e 94 bc 04 	call	0x978	; 0x978 <twi_start_wr>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
 214:	0e 94 b8 04 	call	0x970	; 0x970 <twi_busy>
 218:	81 11       	cpse	r24, r1
 21a:	fc cf       	rjmp	.-8      	; 0x214 <get_int_status+0x12>
 21c:	8f ea       	ldi	r24, 0xAF	; 175
 21e:	94 e0       	ldi	r25, 0x04	; 4
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <get_int_status+0x1e>
 224:	00 c0       	rjmp	.+0      	; 0x226 <get_int_status+0x24>
 226:	00 00       	nop
    _delay_us(300);        //si4734 process delay
    twi_start_rd(SI4734_ADDRESS, si4734_rd_buf, 1); //get the interrupt status 
 228:	41 e0       	ldi	r20, 0x01	; 1
 22a:	61 e3       	ldi	r22, 0x31	; 49
 22c:	72 e0       	ldi	r23, 0x02	; 2
 22e:	82 e2       	ldi	r24, 0x22	; 34
 230:	0e 94 cd 04 	call	0x99a	; 0x99a <twi_start_rd>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
 234:	0e 94 b8 04 	call	0x970	; 0x970 <twi_busy>
 238:	81 11       	cpse	r24, r1
 23a:	fc cf       	rjmp	.-8      	; 0x234 <get_int_status+0x32>
    return(si4734_rd_buf[0]);
}
 23c:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <si4734_rd_buf>
 240:	08 95       	ret

00000242 <fm_tune_freq>:
//
//takes current_fm_freq and sends it to the radio chip
//

void fm_tune_freq(){
  si4734_wr_buf[0] = 0x20;  //fm tune command
 242:	80 e2       	ldi	r24, 0x20	; 32
 244:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <si4734_wr_buf>
  si4734_wr_buf[1] = 0x00;  //no FREEZE and no FAST tune
 248:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <si4734_wr_buf+0x1>
  si4734_wr_buf[2] = (uint8_t)(current_fm_freq >> 8); //freq high byte
 24c:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <current_fm_freq>
 250:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <current_fm_freq+0x1>
 254:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <si4734_wr_buf+0x2>
  si4734_wr_buf[3] = (uint8_t)(current_fm_freq);      //freq low byte
 258:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <si4734_wr_buf+0x3>
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior
 25c:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <si4734_wr_buf+0x4>
  //send fm tune command
  STC_interrupt = FALSE;
 260:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <STC_interrupt>
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 5);
 264:	45 e0       	ldi	r20, 0x05	; 5
 266:	64 e0       	ldi	r22, 0x04	; 4
 268:	72 e0       	ldi	r23, 0x02	; 2
 26a:	82 e2       	ldi	r24, 0x22	; 34
 26c:	0e 94 bc 04 	call	0x978	; 0x978 <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
 270:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <STC_interrupt>
 274:	88 23       	and	r24, r24
 276:	e1 f3       	breq	.-8      	; 0x270 <fm_tune_freq+0x2e>
}
 278:	08 95       	ret

0000027a <am_tune_freq>:
//
//takes current_am_freq and sends it to the radio chip
//

void am_tune_freq(){
  si4734_wr_buf[0] = AM_TUNE_FREQ; //am tune command
 27a:	80 e4       	ldi	r24, 0x40	; 64
 27c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <si4734_wr_buf>
  si4734_wr_buf[1] = 0x00;         //no FAST tune
 280:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <si4734_wr_buf+0x1>
  si4734_wr_buf[2] = (uint8_t)(current_am_freq >> 8); //freq high byte
 284:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <current_am_freq>
 288:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <current_am_freq+0x1>
 28c:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <si4734_wr_buf+0x2>
  si4734_wr_buf[3] = (uint8_t)(current_am_freq);      //freq low byte
 290:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <si4734_wr_buf+0x3>
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
 294:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <si4734_wr_buf+0x4>
  si4734_wr_buf[5] = 0x00;  //antenna tuning capactior low byte
 298:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <si4734_wr_buf+0x5>
  //send am tune command
  STC_interrupt = FALSE;
 29c:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <STC_interrupt>
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
 2a0:	46 e0       	ldi	r20, 0x06	; 6
 2a2:	64 e0       	ldi	r22, 0x04	; 4
 2a4:	72 e0       	ldi	r23, 0x02	; 2
 2a6:	82 e2       	ldi	r24, 0x22	; 34
 2a8:	0e 94 bc 04 	call	0x978	; 0x978 <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
 2ac:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <STC_interrupt>
 2b0:	88 23       	and	r24, r24
 2b2:	e1 f3       	breq	.-8      	; 0x2ac <am_tune_freq+0x32>
}
 2b4:	08 95       	ret

000002b6 <sw_tune_freq>:
//
//takes current_sw_freq and sends it to the radio chip
//antcap low byte is 0x01 as per datasheet

void sw_tune_freq(){
  si4734_wr_buf[0] = 0x40;  //am tune command
 2b6:	e4 e0       	ldi	r30, 0x04	; 4
 2b8:	f2 e0       	ldi	r31, 0x02	; 2
 2ba:	80 e4       	ldi	r24, 0x40	; 64
 2bc:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x00;  //no FAST tune
 2be:	11 82       	std	Z+1, r1	; 0x01
  si4734_wr_buf[2] = (uint8_t)(current_sw_freq >> 8); //freq high byte
 2c0:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <current_sw_freq>
 2c4:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <current_sw_freq+0x1>
 2c8:	92 83       	std	Z+2, r25	; 0x02
  si4734_wr_buf[3] = (uint8_t)(current_sw_freq);      //freq low byte
 2ca:	83 83       	std	Z+3, r24	; 0x03
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
 2cc:	14 82       	std	Z+4, r1	; 0x04
  si4734_wr_buf[5] = 0x01;  //antenna tuning capactior low byte 
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	85 83       	std	Z+5, r24	; 0x05
  //send am tune command
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
 2d2:	46 e0       	ldi	r20, 0x06	; 6
 2d4:	bf 01       	movw	r22, r30
 2d6:	82 e2       	ldi	r24, 0x22	; 34
 2d8:	0e 94 bc 04 	call	0x978	; 0x978 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2dc:	2f ef       	ldi	r18, 0xFF	; 255
 2de:	87 ee       	ldi	r24, 0xE7	; 231
 2e0:	93 e0       	ldi	r25, 0x03	; 3
 2e2:	21 50       	subi	r18, 0x01	; 1
 2e4:	80 40       	sbci	r24, 0x00	; 0
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <sw_tune_freq+0x2c>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <sw_tune_freq+0x36>
 2ec:	00 00       	nop
 2ee:	08 95       	ret

000002f0 <radio_pwr_dwn>:
//

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
 2f0:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <current_radio_band>
 2f4:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <current_radio_band+0x1>
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	91 05       	cpc	r25, r1
 2fc:	51 f1       	breq	.+84     	; 0x352 <radio_pwr_dwn+0x62>
 2fe:	00 f1       	brcs	.+64     	; 0x340 <radio_pwr_dwn+0x50>
 300:	02 97       	sbiw	r24, 0x02	; 2
 302:	41 f4       	brne	.+16     	; 0x314 <radio_pwr_dwn+0x24>
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
  case(SW) : eeprom_write_word(&eeprom_sw_freq, current_sw_freq); break;
 304:	60 91 1d 02 	lds	r22, 0x021D	; 0x80021d <current_sw_freq>
 308:	70 91 1e 02 	lds	r23, 0x021E	; 0x80021e <current_sw_freq+0x1>
 30c:	8f e1       	ldi	r24, 0x1F	; 31
 30e:	92 e0       	ldi	r25, 0x02	; 2
 310:	0e 94 92 05 	call	0xb24	; 0xb24 <eeprom_write_word>
  default  : break;
}//switch      

  eeprom_write_byte(&eeprom_volume, current_volume); //save current volume level
 314:	60 91 17 02 	lds	r22, 0x0217	; 0x800217 <current_volume>
 318:	8f ef       	ldi	r24, 0xFF	; 255
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	0e 94 85 05 	call	0xb0a	; 0xb0a <eeprom_write_byte>

//send fm power down command
    si4734_wr_buf[0] = 0x11;
 320:	81 e1       	ldi	r24, 0x11	; 17
 322:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <si4734_wr_buf>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	64 e0       	ldi	r22, 0x04	; 4
 32a:	72 e0       	ldi	r23, 0x02	; 2
 32c:	82 e2       	ldi	r24, 0x22	; 34
 32e:	0e 94 bc 04 	call	0x978	; 0x978 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 332:	87 ed       	ldi	r24, 0xD7	; 215
 334:	94 e0       	ldi	r25, 0x04	; 4
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <radio_pwr_dwn+0x46>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <radio_pwr_dwn+0x4c>
 33c:	00 00       	nop
 33e:	08 95       	ret

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
 340:	60 91 1a 02 	lds	r22, 0x021A	; 0x80021a <current_fm_freq>
 344:	70 91 1b 02 	lds	r23, 0x021B	; 0x80021b <current_fm_freq+0x1>
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	92 e0       	ldi	r25, 0x02	; 2
 34c:	0e 94 92 05 	call	0xb24	; 0xb24 <eeprom_write_word>
 350:	e1 cf       	rjmp	.-62     	; 0x314 <radio_pwr_dwn+0x24>
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
 352:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <current_am_freq>
 356:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <current_am_freq+0x1>
 35a:	85 e1       	ldi	r24, 0x15	; 21
 35c:	92 e0       	ldi	r25, 0x02	; 2
 35e:	0e 94 92 05 	call	0xb24	; 0xb24 <eeprom_write_word>
 362:	d8 cf       	rjmp	.-80     	; 0x314 <radio_pwr_dwn+0x24>

00000364 <fm_rsq_status>:
//inside the chip. 
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_rsq_status(){

    si4734_wr_buf[0] = FM_RSQ_STATUS;            //fm_rsq_status command
 364:	83 e2       	ldi	r24, 0x23	; 35
 366:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <si4734_wr_buf>
    si4734_wr_buf[1] = FM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
 370:	42 e0       	ldi	r20, 0x02	; 2
 372:	64 e0       	ldi	r22, 0x04	; 4
 374:	72 e0       	ldi	r23, 0x02	; 2
 376:	82 e2       	ldi	r24, 0x22	; 34
 378:	0e 94 bc 04 	call	0x978	; 0x978 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
 37c:	0e 94 b8 04 	call	0x970	; 0x970 <twi_busy>
 380:	81 11       	cpse	r24, r1
 382:	fc cf       	rjmp	.-8      	; 0x37c <fm_rsq_status+0x18>
 384:	8f ea       	ldi	r24, 0xAF	; 175
 386:	94 e0       	ldi	r25, 0x04	; 4
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <fm_rsq_status+0x24>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <fm_rsq_status+0x2a>
 38e:	00 00       	nop
    _delay_us(300);      //delay for si4734 to process
    //This is a blind wait. Waiting for CTS interrupt here would tell you 
    //when the command is received and has been processed.
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
 390:	48 e0       	ldi	r20, 0x08	; 8
 392:	6d e0       	ldi	r22, 0x0D	; 13
 394:	72 e0       	ldi	r23, 0x02	; 2
 396:	82 e2       	ldi	r24, 0x22	; 34
 398:	0e 94 cd 04 	call	0x99a	; 0x99a <twi_start_rd>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
 39c:	0e 94 b8 04 	call	0x970	; 0x970 <twi_busy>
 3a0:	81 11       	cpse	r24, r1
 3a2:	fc cf       	rjmp	.-8      	; 0x39c <fm_rsq_status+0x38>
}
 3a4:	08 95       	ret

000003a6 <fm_tune_status>:
//is cleared.
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_tune_status(){

    si4734_wr_buf[0] = FM_TUNE_STATUS;            //fm_tune_status command
 3a6:	82 e2       	ldi	r24, 0x22	; 34
 3a8:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <si4734_wr_buf>
    si4734_wr_buf[1] = FM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
 3b2:	42 e0       	ldi	r20, 0x02	; 2
 3b4:	64 e0       	ldi	r22, 0x04	; 4
 3b6:	72 e0       	ldi	r23, 0x02	; 2
 3b8:	82 e2       	ldi	r24, 0x22	; 34
 3ba:	0e 94 bc 04 	call	0x978	; 0x978 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
 3be:	0e 94 b8 04 	call	0x970	; 0x970 <twi_busy>
 3c2:	81 11       	cpse	r24, r1
 3c4:	fc cf       	rjmp	.-8      	; 0x3be <fm_tune_status+0x18>
 3c6:	8f ea       	ldi	r24, 0xAF	; 175
 3c8:	94 e0       	ldi	r25, 0x04	; 4
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <fm_tune_status+0x24>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <fm_tune_status+0x2a>
 3d0:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
 3d2:	48 e0       	ldi	r20, 0x08	; 8
 3d4:	6d e0       	ldi	r22, 0x0D	; 13
 3d6:	72 e0       	ldi	r23, 0x02	; 2
 3d8:	82 e2       	ldi	r24, 0x22	; 34
 3da:	0e 94 cd 04 	call	0x99a	; 0x99a <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
 3de:	0e 94 b8 04 	call	0x970	; 0x970 <twi_busy>
 3e2:	81 11       	cpse	r24, r1
 3e4:	fc cf       	rjmp	.-8      	; 0x3de <fm_tune_status+0x38>
}
 3e6:	08 95       	ret

000003e8 <am_tune_status>:
//TODO: could probably just have one tune_status() function
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_tune_status(){

    si4734_wr_buf[0] = AM_TUNE_STATUS;            //fm_tune_status command
 3e8:	82 e4       	ldi	r24, 0x42	; 66
 3ea:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <si4734_wr_buf>
    si4734_wr_buf[1] = AM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
 3f4:	42 e0       	ldi	r20, 0x02	; 2
 3f6:	64 e0       	ldi	r22, 0x04	; 4
 3f8:	72 e0       	ldi	r23, 0x02	; 2
 3fa:	82 e2       	ldi	r24, 0x22	; 34
 3fc:	0e 94 bc 04 	call	0x978	; 0x978 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
 400:	0e 94 b8 04 	call	0x970	; 0x970 <twi_busy>
 404:	81 11       	cpse	r24, r1
 406:	fc cf       	rjmp	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
 408:	8f ea       	ldi	r24, 0xAF	; 175
 40a:	94 e0       	ldi	r25, 0x04	; 4
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 412:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the am tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
 414:	48 e0       	ldi	r20, 0x08	; 8
 416:	6d e0       	ldi	r22, 0x0D	; 13
 418:	72 e0       	ldi	r23, 0x02	; 2
 41a:	82 e2       	ldi	r24, 0x22	; 34
 41c:	0c 94 cd 04 	jmp	0x99a	; 0x99a <twi_start_rd>

00000420 <am_rsq_status>:
//
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_rsq_status(){

    si4734_wr_buf[0] = AM_RSQ_STATUS;            //am_rsq_status command
 420:	83 e4       	ldi	r24, 0x43	; 67
 422:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <si4734_wr_buf>
    si4734_wr_buf[1] = AM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
 42c:	42 e0       	ldi	r20, 0x02	; 2
 42e:	64 e0       	ldi	r22, 0x04	; 4
 430:	72 e0       	ldi	r23, 0x02	; 2
 432:	82 e2       	ldi	r24, 0x22	; 34
 434:	0e 94 bc 04 	call	0x978	; 0x978 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
 438:	0e 94 b8 04 	call	0x970	; 0x970 <twi_busy>
 43c:	81 11       	cpse	r24, r1
 43e:	fc cf       	rjmp	.-8      	; 0x438 <am_rsq_status+0x18>
 440:	8f ea       	ldi	r24, 0xAF	; 175
 442:	94 e0       	ldi	r25, 0x04	; 4
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <am_rsq_status+0x24>
 448:	00 c0       	rjmp	.+0      	; 0x44a <am_rsq_status+0x2a>
 44a:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
 44c:	48 e0       	ldi	r20, 0x08	; 8
 44e:	6d e0       	ldi	r22, 0x0D	; 13
 450:	72 e0       	ldi	r23, 0x02	; 2
 452:	82 e2       	ldi	r24, 0x22	; 34
 454:	0c 94 cd 04 	jmp	0x99a	; 0x99a <twi_start_rd>

00000458 <set_property>:
//The set property command does not have a indication that it has completed. This
//command is guarnteed by design to finish in 10ms. 
//
void set_property(uint16_t property, uint16_t property_value){

    si4734_wr_buf[0] = SET_PROPERTY;                   //set property command
 458:	e4 e0       	ldi	r30, 0x04	; 4
 45a:	f2 e0       	ldi	r31, 0x02	; 2
 45c:	22 e1       	ldi	r18, 0x12	; 18
 45e:	20 83       	st	Z, r18
    si4734_wr_buf[1] = 0x00;                           //all zeros
 460:	11 82       	std	Z+1, r1	; 0x01
    si4734_wr_buf[2] = (uint8_t)(property >> 8);       //property high byte
 462:	92 83       	std	Z+2, r25	; 0x02
    si4734_wr_buf[3] = (uint8_t)(property);            //property low byte
 464:	83 83       	std	Z+3, r24	; 0x03
    si4734_wr_buf[4] = (uint8_t)(property_value >> 8); //property value high byte
 466:	74 83       	std	Z+4, r23	; 0x04
    si4734_wr_buf[5] = (uint8_t)(property_value);      //property value low byte
 468:	65 83       	std	Z+5, r22	; 0x05
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
 46a:	46 e0       	ldi	r20, 0x06	; 6
 46c:	bf 01       	movw	r22, r30
 46e:	82 e2       	ldi	r24, 0x22	; 34
 470:	0e 94 bc 04 	call	0x978	; 0x978 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 474:	8f e3       	ldi	r24, 0x3F	; 63
 476:	9c e9       	ldi	r25, 0x9C	; 156
 478:	01 97       	sbiw	r24, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <set_property+0x20>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <set_property+0x26>
 47e:	00 00       	nop
 480:	08 95       	ret

00000482 <fm_pwr_up>:
//********************************************************************************
//                            fm_pwr_up()
//
void fm_pwr_up(){
//restore the previous fm frequency  
 current_fm_freq = eeprom_read_word(&eeprom_fm_freq); //TODO: only this one does not work 
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	92 e0       	ldi	r25, 0x02	; 2
 486:	0e 94 7f 05 	call	0xafe	; 0xafe <eeprom_read_word>
 48a:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <current_fm_freq+0x1>
 48e:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <current_fm_freq>
 current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
 492:	8f ef       	ldi	r24, 0xFF	; 255
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	0e 94 77 05 	call	0xaee	; 0xaee <eeprom_read_byte>
 49a:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <current_volume>

//send fm power up command
  si4734_wr_buf[0] = FM_PWR_UP; //powerup command byte
 49e:	e4 e0       	ldi	r30, 0x04	; 4
 4a0:	f2 e0       	ldi	r31, 0x02	; 2
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x50;      //GPO2O enabled, STCINT enabled, use ext. 32khz osc.
 4a6:	80 e5       	ldi	r24, 0x50	; 80
 4a8:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;      //OPMODE = 0x05; analog audio output
 4aa:	85 e0       	ldi	r24, 0x05	; 5
 4ac:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
 4ae:	43 e0       	ldi	r20, 0x03	; 3
 4b0:	bf 01       	movw	r22, r30
 4b2:	82 e2       	ldi	r24, 0x22	; 34
 4b4:	0e 94 bc 04 	call	0x978	; 0x978 <twi_start_wr>
 4b8:	2f ef       	ldi	r18, 0xFF	; 255
 4ba:	8b ed       	ldi	r24, 0xDB	; 219
 4bc:	95 e0       	ldi	r25, 0x05	; 5
 4be:	21 50       	subi	r18, 0x01	; 1
 4c0:	80 40       	sbci	r24, 0x00	; 0
 4c2:	90 40       	sbci	r25, 0x00	; 0
 4c4:	e1 f7       	brne	.-8      	; 0x4be <fm_pwr_up+0x3c>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <fm_pwr_up+0x46>
 4c8:	00 00       	nop
  _delay_ms(120);               //startup delay as specified 
  //The seek/tune interrupt is enabled here. If the STCINT bit is set, a 1.5us
  //low pulse will be output from GPIO2/INT when tune or seek is completed.
  set_property(GPO_IEN, GPO_IEN_STCIEN); //seek_tune complete interrupt
 4ca:	61 e0       	ldi	r22, 0x01	; 1
 4cc:	70 e0       	ldi	r23, 0x00	; 0
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0c 94 2c 02 	jmp	0x458	; 0x458 <set_property>

000004d6 <am_pwr_up>:
//********************************************************************************
//                            am_pwr_up()
//
void am_pwr_up(){
//restore the previous am frequency  
  current_am_freq = eeprom_read_word(&eeprom_am_freq);
 4d6:	85 e1       	ldi	r24, 0x15	; 21
 4d8:	92 e0       	ldi	r25, 0x02	; 2
 4da:	0e 94 7f 05 	call	0xafe	; 0xafe <eeprom_read_word>
 4de:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <current_am_freq+0x1>
 4e2:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <current_am_freq>
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
 4e6:	8f ef       	ldi	r24, 0xFF	; 255
 4e8:	91 e0       	ldi	r25, 0x01	; 1
 4ea:	0e 94 77 05 	call	0xaee	; 0xaee <eeprom_read_byte>
 4ee:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <current_volume>

//send am power up command
  si4734_wr_buf[0] = AM_PWR_UP;
 4f2:	e4 e0       	ldi	r30, 0x04	; 4
 4f4:	f2 e0       	ldi	r31, 0x02	; 2
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x51;//GPO2OEN and XOSCEN selected
 4fa:	81 e5       	ldi	r24, 0x51	; 81
 4fc:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;
 4fe:	85 e0       	ldi	r24, 0x05	; 5
 500:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
 502:	43 e0       	ldi	r20, 0x03	; 3
 504:	bf 01       	movw	r22, r30
 506:	82 e2       	ldi	r24, 0x22	; 34
 508:	0e 94 bc 04 	call	0x978	; 0x978 <twi_start_wr>
 50c:	2f ef       	ldi	r18, 0xFF	; 255
 50e:	8b ed       	ldi	r24, 0xDB	; 219
 510:	95 e0       	ldi	r25, 0x05	; 5
 512:	21 50       	subi	r18, 0x01	; 1
 514:	80 40       	sbci	r24, 0x00	; 0
 516:	90 40       	sbci	r25, 0x00	; 0
 518:	e1 f7       	brne	.-8      	; 0x512 <am_pwr_up+0x3c>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <am_pwr_up+0x46>
 51c:	00 00       	nop
  _delay_ms(120);   
  set_property(GPO_IEN, GPO_IEN_STCIEN);    //Seek/Tune Complete interrupt
 51e:	61 e0       	ldi	r22, 0x01	; 1
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0c 94 2c 02 	jmp	0x458	; 0x458 <set_property>

0000052a <sw_pwr_up>:
//                            sw_pwr_up()
//

void sw_pwr_up(){
//restore the previous sw frequency  
  current_sw_freq = eeprom_read_word(&eeprom_sw_freq);
 52a:	8f e1       	ldi	r24, 0x1F	; 31
 52c:	92 e0       	ldi	r25, 0x02	; 2
 52e:	0e 94 7f 05 	call	0xafe	; 0xafe <eeprom_read_word>
 532:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <current_sw_freq+0x1>
 536:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <current_sw_freq>
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
 53a:	8f ef       	ldi	r24, 0xFF	; 255
 53c:	91 e0       	ldi	r25, 0x01	; 1
 53e:	0e 94 77 05 	call	0xaee	; 0xaee <eeprom_read_byte>
 542:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <current_volume>

//send sw power up command (same as am, only tuning rate is different)
    si4734_wr_buf[0] = AM_PWR_UP; //same cmd as for AM
 546:	e4 e0       	ldi	r30, 0x04	; 4
 548:	f2 e0       	ldi	r31, 0x02	; 2
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	80 83       	st	Z, r24
    si4734_wr_buf[1] = 0x51;
 54e:	81 e5       	ldi	r24, 0x51	; 81
 550:	81 83       	std	Z+1, r24	; 0x01
    si4734_wr_buf[2] = 0x05;
 552:	85 e0       	ldi	r24, 0x05	; 5
 554:	82 83       	std	Z+2, r24	; 0x02
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
 556:	43 e0       	ldi	r20, 0x03	; 3
 558:	bf 01       	movw	r22, r30
 55a:	82 e2       	ldi	r24, 0x22	; 34
 55c:	0e 94 bc 04 	call	0x978	; 0x978 <twi_start_wr>
 560:	2f ef       	ldi	r18, 0xFF	; 255
 562:	8b ed       	ldi	r24, 0xDB	; 219
 564:	95 e0       	ldi	r25, 0x05	; 5
 566:	21 50       	subi	r18, 0x01	; 1
 568:	80 40       	sbci	r24, 0x00	; 0
 56a:	90 40       	sbci	r25, 0x00	; 0
 56c:	e1 f7       	brne	.-8      	; 0x566 <sw_pwr_up+0x3c>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <sw_pwr_up+0x46>
 570:	00 00       	nop
    _delay_ms(120);   //start up delay

  //set property to disable soft muting for shortwave broadcasts
  set_property(AM_SOFT_MUTE_MAX_ATTENUATION, 0x0000); //cut off soft mute  
 572:	60 e0       	ldi	r22, 0x00	; 0
 574:	70 e0       	ldi	r23, 0x00	; 0
 576:	82 e0       	ldi	r24, 0x02	; 2
 578:	93 e3       	ldi	r25, 0x33	; 51
 57a:	0e 94 2c 02 	call	0x458	; 0x458 <set_property>
  //select 4khz filter BW and engage power line filter
  set_property(AM_CHANNEL_FILTER, (AM_CHFILT_4KHZ | AM_PWR_LINE_NOISE_REJT_FILTER)); 
 57e:	61 e0       	ldi	r22, 0x01	; 1
 580:	71 e0       	ldi	r23, 0x01	; 1
 582:	82 e0       	ldi	r24, 0x02	; 2
 584:	91 e3       	ldi	r25, 0x31	; 49
 586:	0e 94 2c 02 	call	0x458	; 0x458 <set_property>
  set_property(GPO_IEN, GPO_IEN_STCIEN); //Seek/Tune Complete interrupt
 58a:	61 e0       	ldi	r22, 0x01	; 1
 58c:	70 e0       	ldi	r23, 0x00	; 0
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0c 94 2c 02 	jmp	0x458	; 0x458 <set_property>

00000596 <get_rev>:
//TODO: UNTESTED!
//Report the chip revision info via uart1. UART1 be setup and connected to 
//a dumb terminal. e.g.: screen /dev/cu.usbserial-A800fh27 9600
//
void get_rev(){
    si4734_wr_buf[0] = GET_REV;                   //get rev command 
 596:	80 e1       	ldi	r24, 0x10	; 16
 598:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <si4734_wr_buf>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
 59c:	41 e0       	ldi	r20, 0x01	; 1
 59e:	64 e0       	ldi	r22, 0x04	; 4
 5a0:	72 e0       	ldi	r23, 0x02	; 2
 5a2:	82 e2       	ldi	r24, 0x22	; 34
 5a4:	0e 94 bc 04 	call	0x978	; 0x978 <twi_start_wr>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
 5a8:	0e 94 b8 04 	call	0x970	; 0x970 <twi_busy>
 5ac:	81 11       	cpse	r24, r1
 5ae:	fc cf       	rjmp	.-8      	; 0x5a8 <get_rev+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5b0:	8f ea       	ldi	r24, 0xAF	; 175
 5b2:	94 e0       	ldi	r25, 0x04	; 4
 5b4:	01 97       	sbiw	r24, 0x01	; 1
 5b6:	f1 f7       	brne	.-4      	; 0x5b4 <get_rev+0x1e>
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <get_rev+0x24>
 5ba:	00 00       	nop
    _delay_us(300);        //wait for processing delay
//get the revision info  
    twi_start_rd(SI4734_ADDRESS, si4734_revision_buf, 8);
 5bc:	48 e0       	ldi	r20, 0x08	; 8
 5be:	61 e2       	ldi	r22, 0x21	; 33
 5c0:	72 e0       	ldi	r23, 0x02	; 2
 5c2:	82 e2       	ldi	r24, 0x22	; 34
 5c4:	0e 94 cd 04 	call	0x99a	; 0x99a <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
 5c8:	0e 94 b8 04 	call	0x970	; 0x970 <twi_busy>
 5cc:	81 11       	cpse	r24, r1
 5ce:	fc cf       	rjmp	.-8      	; 0x5c8 <get_rev+0x32>
//use TABs instead?
    uart1_puts("Si4734 Rev:  last 2 digits of part no.   chip rev     \n\r");
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	91 e0       	ldi	r25, 0x01	; 1
 5d4:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
    uart1_puts("             -------------------------   --------     \n\r");
 5d8:	89 e3       	ldi	r24, 0x39	; 57
 5da:	91 e0       	ldi	r25, 0x01	; 1
 5dc:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
    uart1_puts("                          "); itoa((int)si4734_revision_buf[1], uart1_tx_buf, 10); uart1_puts(uart1_tx_buf); 
 5e0:	82 e7       	ldi	r24, 0x72	; 114
 5e2:	91 e0       	ldi	r25, 0x01	; 1
 5e4:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 5e8:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <si4734_revision_buf+0x1>
 5ec:	4a e0       	ldi	r20, 0x0A	; 10
 5ee:	68 e6       	ldi	r22, 0x68	; 104
 5f0:	72 e0       	ldi	r23, 0x02	; 2
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	0e 94 42 05 	call	0xa84	; 0xa84 <__itoa_ncheck>
 5f8:	88 e6       	ldi	r24, 0x68	; 104
 5fa:	92 e0       	ldi	r25, 0x02	; 2
 5fc:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
    uart1_puts("             "); itoa((int)si4734_revision_buf[2], uart1_tx_buf, 10); uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
 600:	8f e7       	ldi	r24, 0x7F	; 127
 602:	91 e0       	ldi	r25, 0x01	; 1
 604:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
 608:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <si4734_revision_buf+0x2>
 60c:	4a e0       	ldi	r20, 0x0A	; 10
 60e:	68 e6       	ldi	r22, 0x68	; 104
 610:	72 e0       	ldi	r23, 0x02	; 2
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	0e 94 42 05 	call	0xa84	; 0xa84 <__itoa_ncheck>
 618:	88 e6       	ldi	r24, 0x68	; 104
 61a:	92 e0       	ldi	r25, 0x02	; 2
 61c:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
 620:	8f e6       	ldi	r24, 0x6F	; 111
 622:	91 e0       	ldi	r25, 0x01	; 1
 624:	0c 94 cd 03 	jmp	0x79a	; 0x79a <uart1_puts>

00000628 <get_fm_rsq_status>:
// TODO: UNTESTED!
//Report the fm rsq status via uart1. Requires that UART1 be setup and connected to 
//a terminal. e.g.: screen /dev/cu.usbserial-A800fh27 9600
//Also requires that a fm_tune_status has been previously called.

void get_fm_rsq_status(){
 628:	ff 92       	push	r15
 62a:	0f 93       	push	r16
 62c:	1f 93       	push	r17
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
 632:	cd b7       	in	r28, 0x3d	; 61
 634:	de b7       	in	r29, 0x3e	; 62
 636:	a8 97       	sbiw	r28, 0x28	; 40
 638:	0f b6       	in	r0, 0x3f	; 63
 63a:	f8 94       	cli
 63c:	de bf       	out	0x3e, r29	; 62
 63e:	0f be       	out	0x3f, r0	; 63
 640:	cd bf       	out	0x3d, r28	; 61
  uint8_t disp_freq;  //temp holding variable
  char    str[40];    //temp for building strings

  uart1_puts("FM_RSQ_STATUS: ");
 642:	8d e8       	ldi	r24, 0x8D	; 141
 644:	91 e0       	ldi	r25, 0x01	; 1
 646:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
  uart1_puts("status byte   :");   itoa((int)si4734_tune_status_buf[0], uart1_tx_buf, 16);   uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
 64a:	8d e9       	ldi	r24, 0x9D	; 157
 64c:	91 e0       	ldi	r25, 0x01	; 1
 64e:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
 652:	0d e0       	ldi	r16, 0x0D	; 13
 654:	12 e0       	ldi	r17, 0x02	; 2
 656:	f8 01       	movw	r30, r16
 658:	80 81       	ld	r24, Z
 65a:	40 e1       	ldi	r20, 0x10	; 16
 65c:	68 e6       	ldi	r22, 0x68	; 104
 65e:	72 e0       	ldi	r23, 0x02	; 2
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	0e 94 42 05 	call	0xa84	; 0xa84 <__itoa_ncheck>
 666:	88 e6       	ldi	r24, 0x68	; 104
 668:	92 e0       	ldi	r25, 0x02	; 2
 66a:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
 66e:	8f e6       	ldi	r24, 0x6F	; 111
 670:	91 e0       	ldi	r25, 0x01	; 1
 672:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
  uart1_puts("resp1         :");   itoa((int)si4734_tune_status_buf[1], uart1_tx_buf, 10);   uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
 676:	8d ea       	ldi	r24, 0xAD	; 173
 678:	91 e0       	ldi	r25, 0x01	; 1
 67a:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
 67e:	f8 01       	movw	r30, r16
 680:	81 81       	ldd	r24, Z+1	; 0x01
 682:	4a e0       	ldi	r20, 0x0A	; 10
 684:	68 e6       	ldi	r22, 0x68	; 104
 686:	72 e0       	ldi	r23, 0x02	; 2
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 42 05 	call	0xa84	; 0xa84 <__itoa_ncheck>
 68e:	88 e6       	ldi	r24, 0x68	; 104
 690:	92 e0       	ldi	r25, 0x02	; 2
 692:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
 696:	8f e6       	ldi	r24, 0x6F	; 111
 698:	91 e0       	ldi	r25, 0x01	; 1
 69a:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
  disp_freq = si4734_tune_status_buf[2];      //load high frequency byte
  disp_freq = (disp_freq << 8); //shift upper byte to upper 8 bits
  disp_freq |= si4734_tune_status_buf[3];     //load low high frequency byte
 69e:	f8 01       	movw	r30, r16
 6a0:	f3 80       	ldd	r15, Z+3	; 0x03
  uart1_puts("freq          :");   itoa(disp_freq, uart1_tx_buf, 10);   uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
 6a2:	8d eb       	ldi	r24, 0xBD	; 189
 6a4:	91 e0       	ldi	r25, 0x01	; 1
 6a6:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
 6aa:	4a e0       	ldi	r20, 0x0A	; 10
 6ac:	68 e6       	ldi	r22, 0x68	; 104
 6ae:	72 e0       	ldi	r23, 0x02	; 2
 6b0:	8f 2d       	mov	r24, r15
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 94 42 05 	call	0xa84	; 0xa84 <__itoa_ncheck>
 6b8:	88 e6       	ldi	r24, 0x68	; 104
 6ba:	92 e0       	ldi	r25, 0x02	; 2
 6bc:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
 6c0:	8f e6       	ldi	r24, 0x6F	; 111
 6c2:	91 e0       	ldi	r25, 0x01	; 1
 6c4:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
  uart1_puts("freq high     :");   itoa((int)si4734_tune_status_buf[2], str, 16);   uart1_puts(str); uart1_puts("\n\r");
 6c8:	8d ec       	ldi	r24, 0xCD	; 205
 6ca:	91 e0       	ldi	r25, 0x01	; 1
 6cc:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
 6d0:	f8 01       	movw	r30, r16
 6d2:	82 81       	ldd	r24, Z+2	; 0x02
 6d4:	40 e1       	ldi	r20, 0x10	; 16
 6d6:	be 01       	movw	r22, r28
 6d8:	6f 5f       	subi	r22, 0xFF	; 255
 6da:	7f 4f       	sbci	r23, 0xFF	; 255
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	0e 94 42 05 	call	0xa84	; 0xa84 <__itoa_ncheck>
 6e2:	ce 01       	movw	r24, r28
 6e4:	01 96       	adiw	r24, 0x01	; 1
 6e6:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
 6ea:	8f e6       	ldi	r24, 0x6F	; 111
 6ec:	91 e0       	ldi	r25, 0x01	; 1
 6ee:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
  uart1_puts("freq low      :");   itoa((int)si4734_tune_status_buf[3], str, 16);   uart1_puts(str); uart1_puts("\n\r");
 6f2:	8d ed       	ldi	r24, 0xDD	; 221
 6f4:	91 e0       	ldi	r25, 0x01	; 1
 6f6:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
 6fa:	f8 01       	movw	r30, r16
 6fc:	83 81       	ldd	r24, Z+3	; 0x03
 6fe:	40 e1       	ldi	r20, 0x10	; 16
 700:	be 01       	movw	r22, r28
 702:	6f 5f       	subi	r22, 0xFF	; 255
 704:	7f 4f       	sbci	r23, 0xFF	; 255
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 42 05 	call	0xa84	; 0xa84 <__itoa_ncheck>
 70c:	ce 01       	movw	r24, r28
 70e:	01 96       	adiw	r24, 0x01	; 1
 710:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
 714:	8f e6       	ldi	r24, 0x6F	; 111
 716:	91 e0       	ldi	r25, 0x01	; 1
 718:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
  uart1_puts("rssi          :");   itoa((int)si4734_tune_status_buf[4], uart1_tx_buf, 16);   uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
 71c:	8d ee       	ldi	r24, 0xED	; 237
 71e:	91 e0       	ldi	r25, 0x01	; 1
 720:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
 724:	f8 01       	movw	r30, r16
 726:	84 81       	ldd	r24, Z+4	; 0x04
 728:	40 e1       	ldi	r20, 0x10	; 16
 72a:	68 e6       	ldi	r22, 0x68	; 104
 72c:	72 e0       	ldi	r23, 0x02	; 2
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0e 94 42 05 	call	0xa84	; 0xa84 <__itoa_ncheck>
 734:	88 e6       	ldi	r24, 0x68	; 104
 736:	92 e0       	ldi	r25, 0x02	; 2
 738:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
 73c:	8f e6       	ldi	r24, 0x6F	; 111
 73e:	91 e0       	ldi	r25, 0x01	; 1
 740:	0e 94 cd 03 	call	0x79a	; 0x79a <uart1_puts>
}
 744:	a8 96       	adiw	r28, 0x28	; 40
 746:	0f b6       	in	r0, 0x3f	; 63
 748:	f8 94       	cli
 74a:	de bf       	out	0x3e, r29	; 62
 74c:	0f be       	out	0x3f, r0	; 63
 74e:	cd bf       	out	0x3d, r28	; 61
 750:	df 91       	pop	r29
 752:	cf 91       	pop	r28
 754:	1f 91       	pop	r17
 756:	0f 91       	pop	r16
 758:	ff 90       	pop	r15
 75a:	08 95       	ret

0000075c <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 75c:	5d 9b       	sbis	0x0b, 5	; 11
 75e:	fe cf       	rjmp	.-4      	; 0x75c <uart_putc>
    UDR0 = data;    // Send data byte
 760:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 762:	5d 9b       	sbis	0x0b, 5	; 11
 764:	fe cf       	rjmp	.-4      	; 0x762 <uart_putc+0x6>
}
 766:	08 95       	ret

00000768 <uart1_putc>:
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 768:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 76c:	95 ff       	sbrs	r25, 5
 76e:	fc cf       	rjmp	.-8      	; 0x768 <uart1_putc>
    UDR1 = data;    // Send data byte
 770:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 774:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 778:	85 ff       	sbrs	r24, 5
 77a:	fc cf       	rjmp	.-8      	; 0x774 <uart1_putc+0xc>
}
 77c:	08 95       	ret

0000077e <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
 77e:	fc 01       	movw	r30, r24
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 780:	90 81       	ld	r25, Z
 782:	99 23       	and	r25, r25
 784:	49 f0       	breq	.+18     	; 0x798 <uart_puts+0x1a>
 786:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 788:	5d 9b       	sbis	0x0b, 5	; 11
 78a:	fe cf       	rjmp	.-4      	; 0x788 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
 78c:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 78e:	5d 9b       	sbis	0x0b, 5	; 11
 790:	fe cf       	rjmp	.-4      	; 0x78e <uart_puts+0x10>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 792:	91 91       	ld	r25, Z+
 794:	91 11       	cpse	r25, r1
 796:	f8 cf       	rjmp	.-16     	; 0x788 <uart_puts+0xa>
 798:	08 95       	ret

0000079a <uart1_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 79a:	fc 01       	movw	r30, r24
 79c:	20 81       	ld	r18, Z
 79e:	22 23       	and	r18, r18
 7a0:	71 f0       	breq	.+28     	; 0x7be <uart1_puts+0x24>
 7a2:	31 96       	adiw	r30, 0x01	; 1
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 7a4:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 7a8:	95 ff       	sbrs	r25, 5
 7aa:	fc cf       	rjmp	.-8      	; 0x7a4 <uart1_puts+0xa>
    UDR1 = data;    // Send data byte
 7ac:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 7b0:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 7b4:	95 ff       	sbrs	r25, 5
 7b6:	fc cf       	rjmp	.-8      	; 0x7b0 <uart1_puts+0x16>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 7b8:	21 91       	ld	r18, Z+
 7ba:	21 11       	cpse	r18, r1
 7bc:	f3 cf       	rjmp	.-26     	; 0x7a4 <uart1_puts+0xa>
 7be:	08 95       	ret

000007c0 <uart_puts_p>:
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 7c0:	9c 01       	movw	r18, r24
 7c2:	fc 01       	movw	r30, r24
 7c4:	44 91       	lpm	r20, Z
 7c6:	44 23       	and	r20, r20
 7c8:	69 f0       	breq	.+26     	; 0x7e4 <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
 7ca:	01 96       	adiw	r24, 0x01	; 1
 7cc:	f9 01       	movw	r30, r18
 7ce:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 7d0:	5d 9b       	sbis	0x0b, 5	; 11
 7d2:	fe cf       	rjmp	.-4      	; 0x7d0 <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
 7d4:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 7d6:	5d 9b       	sbis	0x0b, 5	; 11
 7d8:	fe cf       	rjmp	.-4      	; 0x7d6 <uart_puts_p+0x16>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 7da:	9c 01       	movw	r18, r24
 7dc:	fc 01       	movw	r30, r24
 7de:	44 91       	lpm	r20, Z
 7e0:	41 11       	cpse	r20, r1
 7e2:	f3 cf       	rjmp	.-26     	; 0x7ca <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
 7e4:	08 95       	ret

000007e6 <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
 7e6:	8a b1       	in	r24, 0x0a	; 10
 7e8:	88 69       	ori	r24, 0x98	; 152
 7ea:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 7ec:	e5 e9       	ldi	r30, 0x95	; 149
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	80 81       	ld	r24, Z
 7f2:	86 60       	ori	r24, 0x06	; 6
 7f4:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
 7f6:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
 7fa:	87 e6       	ldi	r24, 0x67	; 103
 7fc:	89 b9       	out	0x09, r24	; 9
 7fe:	08 95       	ret

00000800 <uart1_init>:
//must be in place for the MAX232 chip to get data.

void uart1_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//UCSR1B |= (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1); //INTERRUPTS ENABLED
  UCSR1B |= (1<<RXEN1) | (1<<TXEN1);               //INTERRUPS DISABLED
 800:	ea e9       	ldi	r30, 0x9A	; 154
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	80 81       	ld	r24, Z
 806:	88 61       	ori	r24, 0x18	; 24
 808:	80 83       	st	Z, r24

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);
 80a:	ed e9       	ldi	r30, 0x9D	; 157
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	80 81       	ld	r24, Z
 810:	86 60       	ori	r24, 0x06	; 6
 812:	80 83       	st	Z, r24
  UBRR1H = (BAUDVALUE_1 >>8 ); //load upper byte of the baud rate into UBRR 
 814:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  UBRR1L =  BAUDVALUE_1;       //load lower byte of the baud rate into UBRR 
 818:	87 e6       	ldi	r24, 0x67	; 103
 81a:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 81e:	08 95       	ret

00000820 <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 820:	80 e8       	ldi	r24, 0x80	; 128
 822:	9e e3       	ldi	r25, 0x3E	; 62
 824:	02 c0       	rjmp	.+4      	; 0x82a <uart_getc+0xa>
 826:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
 828:	21 f0       	breq	.+8      	; 0x832 <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 82a:	5f 9b       	sbis	0x0b, 7	; 11
 82c:	fc cf       	rjmp	.-8      	; 0x826 <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
 82e:	8c b1       	in	r24, 0x0c	; 12
 830:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
 832:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
 834:	08 95       	ret

00000836 <uart1_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
 836:	80 e8       	ldi	r24, 0x80	; 128
 838:	9e e3       	ldi	r25, 0x3E	; 62
 83a:	02 c0       	rjmp	.+4      	; 0x840 <uart1_getc+0xa>
 83c:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
 83e:	39 f0       	breq	.+14     	; 0x84e <uart1_getc+0x18>
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
 840:	20 91 9b 00 	lds	r18, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 844:	27 ff       	sbrs	r18, 7
 846:	fa cf       	rjmp	.-12     	; 0x83c <uart1_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
 848:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 84c:	08 95       	ret
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
  timer++;
  if(timer >= 16000){ return(0);}
 84e:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
}
 850:	08 95       	ret

00000852 <__vector_33>:
 852:	1f 92       	push	r1
 854:	0f 92       	push	r0
 856:	0f b6       	in	r0, 0x3f	; 63
 858:	0f 92       	push	r0
 85a:	11 24       	eor	r1, r1
 85c:	0b b6       	in	r0, 0x3b	; 59
 85e:	0f 92       	push	r0
 860:	2f 93       	push	r18
 862:	3f 93       	push	r19
 864:	8f 93       	push	r24
 866:	9f 93       	push	r25
 868:	af 93       	push	r26
 86a:	bf 93       	push	r27
 86c:	ef 93       	push	r30
 86e:	ff 93       	push	r31
 870:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 874:	8e 2f       	mov	r24, r30
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	fc 01       	movw	r30, r24
 87a:	38 97       	sbiw	r30, 0x08	; 8
 87c:	e1 35       	cpi	r30, 0x51	; 81
 87e:	f1 05       	cpc	r31, r1
 880:	b0 f0       	brcs	.+44     	; 0x8ae <__vector_33+0x5c>
 882:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 886:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <twi_state>
 88a:	84 e0       	ldi	r24, 0x04	; 4
 88c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 890:	ff 91       	pop	r31
 892:	ef 91       	pop	r30
 894:	bf 91       	pop	r27
 896:	af 91       	pop	r26
 898:	9f 91       	pop	r25
 89a:	8f 91       	pop	r24
 89c:	3f 91       	pop	r19
 89e:	2f 91       	pop	r18
 8a0:	0f 90       	pop	r0
 8a2:	0b be       	out	0x3b, r0	; 59
 8a4:	0f 90       	pop	r0
 8a6:	0f be       	out	0x3f, r0	; 63
 8a8:	0f 90       	pop	r0
 8aa:	1f 90       	pop	r1
 8ac:	18 95       	reti
 8ae:	ea 5b       	subi	r30, 0xBA	; 186
 8b0:	ff 4f       	sbci	r31, 0xFF	; 255
 8b2:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__tablejump2__>
 8b6:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <__data_end>
 8ba:	e0 91 e1 02 	lds	r30, 0x02E1	; 0x8002e1 <twi_buf>
 8be:	f0 91 e2 02 	lds	r31, 0x02E2	; 0x8002e2 <twi_buf+0x1>
 8c2:	e8 0f       	add	r30, r24
 8c4:	f1 1d       	adc	r31, r1
 8c6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 8ca:	80 83       	st	Z, r24
 8cc:	84 e9       	ldi	r24, 0x94	; 148
 8ce:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 8d2:	de cf       	rjmp	.-68     	; 0x890 <__vector_33+0x3e>
 8d4:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <twi_bus_addr>
 8d8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 8dc:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <__data_end>
 8e0:	85 e8       	ldi	r24, 0x85	; 133
 8e2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 8e6:	d4 cf       	rjmp	.-88     	; 0x890 <__vector_33+0x3e>
 8e8:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <__data_end>
 8ec:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <twi_msg_size>
 8f0:	89 17       	cp	r24, r25
 8f2:	60 f7       	brcc	.-40     	; 0x8cc <__vector_33+0x7a>
 8f4:	e0 91 e1 02 	lds	r30, 0x02E1	; 0x8002e1 <twi_buf>
 8f8:	f0 91 e2 02 	lds	r31, 0x02E2	; 0x8002e2 <twi_buf+0x1>
 8fc:	91 e0       	ldi	r25, 0x01	; 1
 8fe:	98 0f       	add	r25, r24
 900:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <__data_end>
 904:	e8 0f       	add	r30, r24
 906:	f1 1d       	adc	r31, r1
 908:	80 81       	ld	r24, Z
 90a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 90e:	85 e8       	ldi	r24, 0x85	; 133
 910:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 914:	bd cf       	rjmp	.-134    	; 0x890 <__vector_33+0x3e>
 916:	85 ea       	ldi	r24, 0xA5	; 165
 918:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 91c:	b9 cf       	rjmp	.-142    	; 0x890 <__vector_33+0x3e>
 91e:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <__data_end>
 922:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <twi_msg_size>
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	01 97       	sbiw	r24, 0x01	; 1
 92c:	28 17       	cp	r18, r24
 92e:	39 07       	cpc	r19, r25
 930:	dc f4       	brge	.+54     	; 0x968 <__vector_33+0x116>
 932:	85 ec       	ldi	r24, 0xC5	; 197
 934:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 938:	ab cf       	rjmp	.-170    	; 0x890 <__vector_33+0x3e>
 93a:	e0 91 e1 02 	lds	r30, 0x02E1	; 0x8002e1 <twi_buf>
 93e:	f0 91 e2 02 	lds	r31, 0x02E2	; 0x8002e2 <twi_buf+0x1>
 942:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <__data_end>
 946:	21 e0       	ldi	r18, 0x01	; 1
 948:	28 0f       	add	r18, r24
 94a:	20 93 fe 01 	sts	0x01FE, r18	; 0x8001fe <__data_end>
 94e:	e8 0f       	add	r30, r24
 950:	f1 1d       	adc	r31, r1
 952:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 956:	80 83       	st	Z, r24
 958:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <twi_msg_size>
 95c:	30 e0       	ldi	r19, 0x00	; 0
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	01 97       	sbiw	r24, 0x01	; 1
 962:	28 17       	cp	r18, r24
 964:	39 07       	cpc	r19, r25
 966:	2c f3       	brlt	.-54     	; 0x932 <__vector_33+0xe0>
 968:	85 e8       	ldi	r24, 0x85	; 133
 96a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 96e:	90 cf       	rjmp	.-224    	; 0x890 <__vector_33+0x3e>

00000970 <twi_busy>:
 970:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 974:	81 70       	andi	r24, 0x01	; 1
 976:	08 95       	ret

00000978 <twi_start_wr>:
 978:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 97c:	90 fd       	sbrc	r25, 0
 97e:	fc cf       	rjmp	.-8      	; 0x978 <twi_start_wr>
 980:	8e 7f       	andi	r24, 0xFE	; 254
 982:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <twi_bus_addr>
 986:	70 93 e2 02 	sts	0x02E2, r23	; 0x8002e2 <twi_buf+0x1>
 98a:	60 93 e1 02 	sts	0x02E1, r22	; 0x8002e1 <twi_buf>
 98e:	40 93 e4 02 	sts	0x02E4, r20	; 0x8002e4 <twi_msg_size>
 992:	85 ea       	ldi	r24, 0xA5	; 165
 994:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 998:	08 95       	ret

0000099a <twi_start_rd>:
 99a:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 99e:	90 fd       	sbrc	r25, 0
 9a0:	fc cf       	rjmp	.-8      	; 0x99a <twi_start_rd>
 9a2:	81 60       	ori	r24, 0x01	; 1
 9a4:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <twi_bus_addr>
 9a8:	70 93 e2 02 	sts	0x02E2, r23	; 0x8002e2 <twi_buf+0x1>
 9ac:	60 93 e1 02 	sts	0x02E1, r22	; 0x8002e1 <twi_buf>
 9b0:	40 93 e4 02 	sts	0x02E4, r20	; 0x8002e4 <twi_msg_size>
 9b4:	85 ea       	ldi	r24, 0xA5	; 165
 9b6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 9ba:	08 95       	ret

000009bc <init_twi>:
 9bc:	8f ef       	ldi	r24, 0xFF	; 255
 9be:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 9c2:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 9c6:	8c e0       	ldi	r24, 0x0C	; 12
 9c8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 9cc:	08 95       	ret

000009ce <main>:
//                            spi_init                               
//Initalizes the SPI port on the mega128. Does not do any further    
// external device specific initalizations.                          
//********************************************************************
void spi_init(void){
  DDRB |=  0x07;  //Turn on SS, MOSI, SCLK
 9ce:	87 b3       	in	r24, 0x17	; 23
 9d0:	87 60       	ori	r24, 0x07	; 7
 9d2:	87 bb       	out	0x17, r24	; 23
  //mstr mode, sck=clk/2, cycle 1/2 phase, low polarity, MSB 1st, 
  //no interrupts, enable SPI, clk low , rising edge sample
 // SPCR=(1<<SPE) | (1<<MSTR);
  SPSR=(1<<SPI2X); //SPI at 2x speed (8 MHz)  
 9d4:	81 e0       	ldi	r24, 0x01	; 1
 9d6:	8e b9       	out	0x0e, r24	; 14
//DDRB |= 0xF0; // set PORTB 4-7 bits as outputs
DDRA = 0x03; // set PORTA 6-7 bits as inputs
 9d8:	83 e0       	ldi	r24, 0x03	; 3
 9da:	8a bb       	out	0x1a, r24	; 26
DDRD = (1 << PD2); // set PD2 as output
 9dc:	84 e0       	ldi	r24, 0x04	; 4
 9de:	81 bb       	out	0x11, r24	; 17


int main()
{
spi_init();
init_twi();
 9e0:	0e 94 de 04 	call	0x9bc	; 0x9bc <init_twi>
}//spi_init


void volume_init(void){
//volume pin is PE3
TCCR3A = (1 << COM3A1 | (1 << WGM31) ); //normal operation w/ OC3A is disconnected
 9e4:	82 e8       	ldi	r24, 0x82	; 130
 9e6:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
TCCR3B |= (  (1 << CS30) | ( 1 << WGM32) | (1 << WGM33) ); //fast pwm 
 9ea:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 9ee:	89 61       	ori	r24, 0x19	; 25
 9f0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
ICR3 = 10; // Set overflow top ; controls frequency 
 9f4:	8a e0       	ldi	r24, 0x0A	; 10
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 9fc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
OCR3A = 7; // set compare match; duty cycle
 a00:	87 e0       	ldi	r24, 0x07	; 7
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 a08:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
int main()
{
spi_init();
init_twi();
volume_init();
uart_init();
 a0c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <uart_init>
sei();
 a10:	78 94       	sei
//TIMSK |= (1<<TOIE0);    //enable interrupts
//TCCR0 |= (1 <<CS02) | (1<<CS00); //normal mode, prescale by 128


//interrupts configuration
EICRB |= (1 << ISC71) | (1 << ISC70);
 a12:	8a b7       	in	r24, 0x3a	; 58
 a14:	80 6c       	ori	r24, 0xC0	; 192
 a16:	8a bf       	out	0x3a, r24	; 58
EIMSK |= 1 << INT7;
 a18:	89 b7       	in	r24, 0x39	; 57
 a1a:	80 68       	ori	r24, 0x80	; 128
 a1c:	89 bf       	out	0x39, r24	; 57
//   (^ edge int from radio) bit 7--| | | | | | | |--bit 0 USART0 RX
//(shift/load_n for 74HC165) bit 6----| | | | | |----bit 1 USART0 TX
//                           bit 5------| | | |------bit 2 (radio reset, active high)
//                  (unused) bit 4--------| |--------bit 3 (TCNT3 PWM output for volume control)

DDRE  |= 0x04; //Port E bit 2 is active high reset for radio 
 a1e:	12 9a       	sbi	0x02, 2	; 2
DDRE  |= 0x40; //Port E bit 6 is shift/load_n for encoder 74HC165
 a20:	16 9a       	sbi	0x02, 6	; 2
DDRE  |= 0x08; //Port E bit 3 is TCNT3 PWM output for volume
 a22:	13 9a       	sbi	0x02, 3	; 2


PORTE |= 0x04; //radio reset is on at powerup (active high), PE2
 a24:	1a 9a       	sbi	0x03, 2	; 3
PORTE |= 0x40; //pulse low to load switch values, else its in shift mode, PE7
 a26:	1e 9a       	sbi	0x03, 6	; 3


//configuring the Radio 
//PORTE |= 

radio_reset();
 a28:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <radio_reset>
uint8_t  si4734_tune_status_buf[8];

//write
void write_SPI(uint8_t value){

SPDR = value; // take in which mode it is currently on and display it
 a2c:	80 e2       	ldi	r24, 0x20	; 32
 a2e:	8f b9       	out	0x0f, r24	; 15
        while (bit_is_clear(SPSR,SPIF)) {} //wait till data is sent out
 a30:	77 9b       	sbis	0x0e, 7	; 14
 a32:	fe cf       	rjmp	.-4      	; 0xa30 <main+0x62>
PORTD |= (1 << PD2); //SEND data to bargraph, rising edge
 a34:	92 9a       	sbi	0x12, 2	; 18
PORTD &= ~(1<<PD2); // falling edge
 a36:	92 98       	cbi	0x12, 2	; 18

	write_SPI(1 << 5);
//while(1){
//Once its setup, you can set the station and get the received signal strength.

fm_pwr_up();        //power up radio
 a38:	0e 94 41 02 	call	0x482	; 0x482 <fm_pwr_up>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a3c:	8f e9       	ldi	r24, 0x9F	; 159
 a3e:	9f e0       	ldi	r25, 0x0F	; 15
 a40:	01 97       	sbiw	r24, 0x01	; 1
 a42:	f1 f7       	brne	.-4      	; 0xa40 <main+0x72>
 a44:	00 c0       	rjmp	.+0      	; 0xa46 <main+0x78>
 a46:	00 00       	nop
_delay_ms(1);
while(twi_busy()){} //spin while TWI is busy 
 a48:	0e 94 b8 04 	call	0x970	; 0x970 <twi_busy>
 a4c:	81 11       	cpse	r24, r1
 a4e:	fc cf       	rjmp	.-8      	; 0xa48 <main+0x7a>
current_fm_freq = 9990; //99.9 good
 a50:	86 e0       	ldi	r24, 0x06	; 6
 a52:	97 e2       	ldi	r25, 0x27	; 39
 a54:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <current_fm_freq+0x1>
 a58:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <current_fm_freq>
 a5c:	8f e8       	ldi	r24, 0x8F	; 143
 a5e:	91 e0       	ldi	r25, 0x01	; 1
 a60:	01 97       	sbiw	r24, 0x01	; 1
 a62:	f1 f7       	brne	.-4      	; 0xa60 <main+0x92>
 a64:	00 c0       	rjmp	.+0      	; 0xa66 <main+0x98>
 a66:	00 00       	nop
//current_fm_freq = 10063;

_delay_ms(.1);


fm_tune_freq();     //tune to frequency   
 a68:	0e 94 21 01 	call	0x242	; 0x242 <fm_tune_freq>

//	}

}
 a6c:	80 e0       	ldi	r24, 0x00	; 0
 a6e:	90 e0       	ldi	r25, 0x00	; 0
 a70:	08 95       	ret

00000a72 <__tablejump2__>:
 a72:	ee 0f       	add	r30, r30
 a74:	ff 1f       	adc	r31, r31
 a76:	00 24       	eor	r0, r0
 a78:	00 1c       	adc	r0, r0
 a7a:	0b be       	out	0x3b, r0	; 59
 a7c:	07 90       	elpm	r0, Z+
 a7e:	f6 91       	elpm	r31, Z
 a80:	e0 2d       	mov	r30, r0
 a82:	09 94       	ijmp

00000a84 <__itoa_ncheck>:
 a84:	bb 27       	eor	r27, r27
 a86:	4a 30       	cpi	r20, 0x0A	; 10
 a88:	31 f4       	brne	.+12     	; 0xa96 <__itoa_ncheck+0x12>
 a8a:	99 23       	and	r25, r25
 a8c:	22 f4       	brpl	.+8      	; 0xa96 <__itoa_ncheck+0x12>
 a8e:	bd e2       	ldi	r27, 0x2D	; 45
 a90:	90 95       	com	r25
 a92:	81 95       	neg	r24
 a94:	9f 4f       	sbci	r25, 0xFF	; 255
 a96:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__utoa_common>

00000a9a <__utoa_ncheck>:
 a9a:	bb 27       	eor	r27, r27

00000a9c <__utoa_common>:
 a9c:	fb 01       	movw	r30, r22
 a9e:	55 27       	eor	r21, r21
 aa0:	aa 27       	eor	r26, r26
 aa2:	88 0f       	add	r24, r24
 aa4:	99 1f       	adc	r25, r25
 aa6:	aa 1f       	adc	r26, r26
 aa8:	a4 17       	cp	r26, r20
 aaa:	10 f0       	brcs	.+4      	; 0xab0 <__utoa_common+0x14>
 aac:	a4 1b       	sub	r26, r20
 aae:	83 95       	inc	r24
 ab0:	50 51       	subi	r21, 0x10	; 16
 ab2:	b9 f7       	brne	.-18     	; 0xaa2 <__utoa_common+0x6>
 ab4:	a0 5d       	subi	r26, 0xD0	; 208
 ab6:	aa 33       	cpi	r26, 0x3A	; 58
 ab8:	08 f0       	brcs	.+2      	; 0xabc <__utoa_common+0x20>
 aba:	a9 5d       	subi	r26, 0xD9	; 217
 abc:	a1 93       	st	Z+, r26
 abe:	00 97       	sbiw	r24, 0x00	; 0
 ac0:	79 f7       	brne	.-34     	; 0xaa0 <__utoa_common+0x4>
 ac2:	b1 11       	cpse	r27, r1
 ac4:	b1 93       	st	Z+, r27
 ac6:	11 92       	st	Z+, r1
 ac8:	cb 01       	movw	r24, r22
 aca:	0c 94 67 05 	jmp	0xace	; 0xace <strrev>

00000ace <strrev>:
 ace:	dc 01       	movw	r26, r24
 ad0:	fc 01       	movw	r30, r24
 ad2:	67 2f       	mov	r22, r23
 ad4:	71 91       	ld	r23, Z+
 ad6:	77 23       	and	r23, r23
 ad8:	e1 f7       	brne	.-8      	; 0xad2 <strrev+0x4>
 ada:	32 97       	sbiw	r30, 0x02	; 2
 adc:	04 c0       	rjmp	.+8      	; 0xae6 <strrev+0x18>
 ade:	7c 91       	ld	r23, X
 ae0:	6d 93       	st	X+, r22
 ae2:	70 83       	st	Z, r23
 ae4:	62 91       	ld	r22, -Z
 ae6:	ae 17       	cp	r26, r30
 ae8:	bf 07       	cpc	r27, r31
 aea:	c8 f3       	brcs	.-14     	; 0xade <strrev+0x10>
 aec:	08 95       	ret

00000aee <eeprom_read_byte>:
 aee:	e1 99       	sbic	0x1c, 1	; 28
 af0:	fe cf       	rjmp	.-4      	; 0xaee <eeprom_read_byte>
 af2:	9f bb       	out	0x1f, r25	; 31
 af4:	8e bb       	out	0x1e, r24	; 30
 af6:	e0 9a       	sbi	0x1c, 0	; 28
 af8:	99 27       	eor	r25, r25
 afa:	8d b3       	in	r24, 0x1d	; 29
 afc:	08 95       	ret

00000afe <eeprom_read_word>:
 afe:	a8 e1       	ldi	r26, 0x18	; 24
 b00:	b0 e0       	ldi	r27, 0x00	; 0
 b02:	42 e0       	ldi	r20, 0x02	; 2
 b04:	50 e0       	ldi	r21, 0x00	; 0
 b06:	0c 94 99 05 	jmp	0xb32	; 0xb32 <eeprom_read_blraw>

00000b0a <eeprom_write_byte>:
 b0a:	26 2f       	mov	r18, r22

00000b0c <eeprom_write_r18>:
 b0c:	e1 99       	sbic	0x1c, 1	; 28
 b0e:	fe cf       	rjmp	.-4      	; 0xb0c <eeprom_write_r18>
 b10:	9f bb       	out	0x1f, r25	; 31
 b12:	8e bb       	out	0x1e, r24	; 30
 b14:	2d bb       	out	0x1d, r18	; 29
 b16:	0f b6       	in	r0, 0x3f	; 63
 b18:	f8 94       	cli
 b1a:	e2 9a       	sbi	0x1c, 2	; 28
 b1c:	e1 9a       	sbi	0x1c, 1	; 28
 b1e:	0f be       	out	0x3f, r0	; 63
 b20:	01 96       	adiw	r24, 0x01	; 1
 b22:	08 95       	ret

00000b24 <eeprom_write_word>:
 b24:	0e 94 85 05 	call	0xb0a	; 0xb0a <eeprom_write_byte>
 b28:	27 2f       	mov	r18, r23
 b2a:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <eeprom_write_r18>

00000b2e <eeprom_read_block>:
 b2e:	dc 01       	movw	r26, r24
 b30:	cb 01       	movw	r24, r22

00000b32 <eeprom_read_blraw>:
 b32:	fc 01       	movw	r30, r24
 b34:	e1 99       	sbic	0x1c, 1	; 28
 b36:	fe cf       	rjmp	.-4      	; 0xb34 <eeprom_read_blraw+0x2>
 b38:	06 c0       	rjmp	.+12     	; 0xb46 <eeprom_read_blraw+0x14>
 b3a:	ff bb       	out	0x1f, r31	; 31
 b3c:	ee bb       	out	0x1e, r30	; 30
 b3e:	e0 9a       	sbi	0x1c, 0	; 28
 b40:	31 96       	adiw	r30, 0x01	; 1
 b42:	0d b2       	in	r0, 0x1d	; 29
 b44:	0d 92       	st	X+, r0
 b46:	41 50       	subi	r20, 0x01	; 1
 b48:	50 40       	sbci	r21, 0x00	; 0
 b4a:	b8 f7       	brcc	.-18     	; 0xb3a <eeprom_read_blraw+0x8>
 b4c:	08 95       	ret

00000b4e <_exit>:
 b4e:	f8 94       	cli

00000b50 <__stop_program>:
 b50:	ff cf       	rjmp	.-2      	; 0xb50 <__stop_program>
