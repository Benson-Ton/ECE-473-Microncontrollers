
final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000176  00800100  000027c0  00002854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000195  00800276  00800276  000029ca  2**0
                  ALLOC
  3 .stab         000060e4  00000000  00000000  000029cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002161  00000000  00000000  00008ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000ac11  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000ac24  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  0000ac60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  0000b3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000baf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  0000bb12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__ctors_end>
       4:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
       8:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
       c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      10:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      14:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      18:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      1c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      20:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__vector_8>
      24:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__vector_9>
      28:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      2c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      30:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__vector_12>
      34:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      38:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      3c:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__vector_15>
      40:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      44:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      48:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__vector_18>
      4c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      50:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      54:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      58:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      5c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      60:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      64:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      68:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      6c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      70:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      74:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      78:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      7c:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      80:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      84:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__vector_33>
      88:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__bad_interrupt>
      8c:	d6 12       	cpse	r13, r22
      8e:	0a 12       	cpse	r0, r26
      90:	a6 12       	cpse	r10, r22
      92:	0a 12       	cpse	r0, r26
      94:	0a 12       	cpse	r0, r26
      96:	0a 12       	cpse	r0, r26
      98:	9b 12       	cpse	r9, r27
      9a:	0a 12       	cpse	r0, r26
      9c:	0a 12       	cpse	r0, r26
      9e:	0a 12       	cpse	r0, r26
      a0:	0a 12       	cpse	r0, r26
      a2:	0a 12       	cpse	r0, r26
      a4:	0a 12       	cpse	r0, r26
      a6:	0a 12       	cpse	r0, r26
      a8:	82 12       	cpse	r8, r18
      aa:	0a 12       	cpse	r0, r26
      ac:	0a 12       	cpse	r0, r26
      ae:	0a 12       	cpse	r0, r26
      b0:	0a 12       	cpse	r0, r26
      b2:	0a 12       	cpse	r0, r26
      b4:	0a 12       	cpse	r0, r26
      b6:	0a 12       	cpse	r0, r26
      b8:	0a 12       	cpse	r0, r26
      ba:	0a 12       	cpse	r0, r26
      bc:	0a 12       	cpse	r0, r26
      be:	0a 12       	cpse	r0, r26
      c0:	0a 12       	cpse	r0, r26
      c2:	0a 12       	cpse	r0, r26
      c4:	0a 12       	cpse	r0, r26
      c6:	0a 12       	cpse	r0, r26
      c8:	7a 12       	cpse	r7, r26
      ca:	0a 12       	cpse	r0, r26
      cc:	0a 12       	cpse	r0, r26
      ce:	0a 12       	cpse	r0, r26
      d0:	0a 12       	cpse	r0, r26
      d2:	0a 12       	cpse	r0, r26
      d4:	0a 12       	cpse	r0, r26
      d6:	0a 12       	cpse	r0, r26
      d8:	0a 12       	cpse	r0, r26
      da:	0a 12       	cpse	r0, r26
      dc:	0a 12       	cpse	r0, r26
      de:	0a 12       	cpse	r0, r26
      e0:	0a 12       	cpse	r0, r26
      e2:	0a 12       	cpse	r0, r26
      e4:	0a 12       	cpse	r0, r26
      e6:	0a 12       	cpse	r0, r26
      e8:	0a 12       	cpse	r0, r26
      ea:	0a 12       	cpse	r0, r26
      ec:	0a 12       	cpse	r0, r26
      ee:	0a 12       	cpse	r0, r26
      f0:	0a 12       	cpse	r0, r26
      f2:	0a 12       	cpse	r0, r26
      f4:	0a 12       	cpse	r0, r26
      f6:	0a 12       	cpse	r0, r26
      f8:	0a 12       	cpse	r0, r26
      fa:	0a 12       	cpse	r0, r26
      fc:	0a 12       	cpse	r0, r26
      fe:	0a 12       	cpse	r0, r26
     100:	0a 12       	cpse	r0, r26
     102:	0a 12       	cpse	r0, r26
     104:	0a 12       	cpse	r0, r26
     106:	0a 12       	cpse	r0, r26
     108:	63 12       	cpse	r6, r19
     10a:	0a 12       	cpse	r0, r26
     10c:	58 12       	cpse	r5, r24
     10e:	5c 0c       	add	r5, r12
     110:	33 0c       	add	r3, r3
     112:	33 0c       	add	r3, r3
     114:	33 0c       	add	r3, r3
     116:	33 0c       	add	r3, r3
     118:	33 0c       	add	r3, r3
     11a:	33 0c       	add	r3, r3
     11c:	33 0c       	add	r3, r3
     11e:	5c 0c       	add	r5, r12
     120:	33 0c       	add	r3, r3
     122:	33 0c       	add	r3, r3
     124:	33 0c       	add	r3, r3
     126:	33 0c       	add	r3, r3
     128:	33 0c       	add	r3, r3
     12a:	33 0c       	add	r3, r3
     12c:	33 0c       	add	r3, r3
     12e:	66 0c       	add	r6, r6
     130:	33 0c       	add	r3, r3
     132:	33 0c       	add	r3, r3
     134:	33 0c       	add	r3, r3
     136:	33 0c       	add	r3, r3
     138:	33 0c       	add	r3, r3
     13a:	33 0c       	add	r3, r3
     13c:	33 0c       	add	r3, r3
     13e:	33 0c       	add	r3, r3
     140:	33 0c       	add	r3, r3
     142:	33 0c       	add	r3, r3
     144:	33 0c       	add	r3, r3
     146:	33 0c       	add	r3, r3
     148:	33 0c       	add	r3, r3
     14a:	33 0c       	add	r3, r3
     14c:	33 0c       	add	r3, r3
     14e:	66 0c       	add	r6, r6
     150:	33 0c       	add	r3, r3
     152:	33 0c       	add	r3, r3
     154:	33 0c       	add	r3, r3
     156:	33 0c       	add	r3, r3
     158:	33 0c       	add	r3, r3
     15a:	33 0c       	add	r3, r3
     15c:	33 0c       	add	r3, r3
     15e:	33 0c       	add	r3, r3
     160:	33 0c       	add	r3, r3
     162:	33 0c       	add	r3, r3
     164:	33 0c       	add	r3, r3
     166:	33 0c       	add	r3, r3
     168:	33 0c       	add	r3, r3
     16a:	33 0c       	add	r3, r3
     16c:	33 0c       	add	r3, r3
     16e:	7d 0c       	add	r7, r13
     170:	33 0c       	add	r3, r3
     172:	33 0c       	add	r3, r3
     174:	33 0c       	add	r3, r3
     176:	33 0c       	add	r3, r3
     178:	33 0c       	add	r3, r3
     17a:	33 0c       	add	r3, r3
     17c:	33 0c       	add	r3, r3
     17e:	81 0c       	add	r8, r1
     180:	33 0c       	add	r3, r3
     182:	33 0c       	add	r3, r3
     184:	33 0c       	add	r3, r3
     186:	33 0c       	add	r3, r3
     188:	33 0c       	add	r3, r3
     18a:	33 0c       	add	r3, r3
     18c:	33 0c       	add	r3, r3
     18e:	33 0c       	add	r3, r3
     190:	33 0c       	add	r3, r3
     192:	33 0c       	add	r3, r3
     194:	33 0c       	add	r3, r3
     196:	33 0c       	add	r3, r3
     198:	33 0c       	add	r3, r3
     19a:	33 0c       	add	r3, r3
     19c:	33 0c       	add	r3, r3
     19e:	8f 0c       	add	r8, r15
     1a0:	33 0c       	add	r3, r3
     1a2:	33 0c       	add	r3, r3
     1a4:	33 0c       	add	r3, r3
     1a6:	33 0c       	add	r3, r3
     1a8:	33 0c       	add	r3, r3
     1aa:	33 0c       	add	r3, r3
     1ac:	33 0c       	add	r3, r3
     1ae:	4d 0c       	add	r4, r13

000001b0 <__ctors_end>:
     1b0:	11 24       	eor	r1, r1
     1b2:	1f be       	out	0x3f, r1	; 63
     1b4:	cf ef       	ldi	r28, 0xFF	; 255
     1b6:	d0 e1       	ldi	r29, 0x10	; 16
     1b8:	de bf       	out	0x3e, r29	; 62
     1ba:	cd bf       	out	0x3d, r28	; 61

000001bc <__do_copy_data>:
     1bc:	12 e0       	ldi	r17, 0x02	; 2
     1be:	a0 e0       	ldi	r26, 0x00	; 0
     1c0:	b1 e0       	ldi	r27, 0x01	; 1
     1c2:	e0 ec       	ldi	r30, 0xC0	; 192
     1c4:	f7 e2       	ldi	r31, 0x27	; 39
     1c6:	00 e0       	ldi	r16, 0x00	; 0
     1c8:	0b bf       	out	0x3b, r16	; 59
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <__do_copy_data+0x14>
     1cc:	07 90       	elpm	r0, Z+
     1ce:	0d 92       	st	X+, r0
     1d0:	a6 37       	cpi	r26, 0x76	; 118
     1d2:	b1 07       	cpc	r27, r17
     1d4:	d9 f7       	brne	.-10     	; 0x1cc <__do_copy_data+0x10>

000001d6 <__do_clear_bss>:
     1d6:	24 e0       	ldi	r18, 0x04	; 4
     1d8:	a6 e7       	ldi	r26, 0x76	; 118
     1da:	b2 e0       	ldi	r27, 0x02	; 2
     1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <.do_clear_bss_start>

000001de <.do_clear_bss_loop>:
     1de:	1d 92       	st	X+, r1

000001e0 <.do_clear_bss_start>:
     1e0:	ab 30       	cpi	r26, 0x0B	; 11
     1e2:	b2 07       	cpc	r27, r18
     1e4:	e1 f7       	brne	.-8      	; 0x1de <.do_clear_bss_loop>
     1e6:	0e 94 94 11 	call	0x2328	; 0x2328 <main>
     1ea:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <_exit>

000001ee <__bad_interrupt>:
     1ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001f2 <radio_on.part.5>:

void radio_on(void){

if((mode == 0x10)){
//      int temp = time;
        OCR3A = 8; // set radio volume
     1f2:	88 e0       	ldi	r24, 0x08	; 8
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     1fa:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
//      _delay_ms(1);
        fm_pwr_up();        //power up radio
     1fe:	0e 94 33 0a 	call	0x1466	; 0x1466 <fm_pwr_up>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     202:	8f e9       	ldi	r24, 0x9F	; 159
     204:	9f e0       	ldi	r25, 0x0F	; 15
     206:	01 97       	sbiw	r24, 0x01	; 1
     208:	f1 f7       	brne	.-4      	; 0x206 <radio_on.part.5+0x14>
     20a:	00 c0       	rjmp	.+0      	; 0x20c <radio_on.part.5+0x1a>
     20c:	00 00       	nop
        _delay_ms(1);
        while(twi_busy()){} //spin while twi is busy
     20e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <twi_busy>
     212:	81 11       	cpse	r24, r1
     214:	fc cf       	rjmp	.-8      	; 0x20e <radio_on.part.5+0x1c>
        //current_fm_freq = 10470; //99.9 good
        current_fm_freq = 9990;
     216:	86 e0       	ldi	r24, 0x06	; 6
     218:	97 e2       	ldi	r25, 0x27	; 39
     21a:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <current_fm_freq+0x1>
     21e:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <current_fm_freq>
     222:	8f e9       	ldi	r24, 0x9F	; 159
     224:	9f e0       	ldi	r25, 0x0F	; 15
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <radio_on.part.5+0x34>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <radio_on.part.5+0x3a>
     22c:	00 00       	nop
        _delay_ms(1);
        fm_tune_freq();     //tune to frequency
     22e:	0e 94 13 09 	call	0x1226	; 0x1226 <fm_tune_freq>
//      radio = FALSE;
        radio_status = TRUE;
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <radio_status>
     238:	08 95       	ret

0000023a <__vector_8>:
uint8_t segment_data[5] = {0xFF}; 

//decimal to 7-segment LED display encodings, logic "0" turns on segment
uint8_t dec_to_7seg[13]={0xC0,0xF9,0xA4 ,0xB0 ,0x99 ,0x92 ,0x82,0xF8 ,0x80 ,0x98,0xFF,0x07,0x7F};//numbers from 0-9, all blank, blank colon

ISR(INT7_vect){STC_interrupt = TRUE;}
     23a:	1f 92       	push	r1
     23c:	0f 92       	push	r0
     23e:	0f b6       	in	r0, 0x3f	; 63
     240:	0f 92       	push	r0
     242:	11 24       	eor	r1, r1
     244:	8f 93       	push	r24
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <STC_interrupt>
     24c:	8f 91       	pop	r24
     24e:	0f 90       	pop	r0
     250:	0f be       	out	0x3f, r0	; 63
     252:	0f 90       	pop	r0
     254:	1f 90       	pop	r1
     256:	18 95       	reti

00000258 <alarm_compare>:
/********************************************************************
 *				alarm_compare
 *******************************************************************/
void alarm_compare(void){
	//checks alarm flag and whether button is pressed
	if(( mode != 0x08 && mode != 0x40)){  
     258:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <mode>
     25c:	88 30       	cpi	r24, 0x08	; 8
     25e:	79 f0       	breq	.+30     	; 0x27e <alarm_compare+0x26>
     260:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <mode>
     264:	80 34       	cpi	r24, 0x40	; 64
     266:	59 f0       	breq	.+22     	; 0x27e <alarm_compare+0x26>

		//triggers the alarm if alarm time matches with real time 
		if((alarm_time == time) && (tone == TRUE)){
     268:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <alarm_time>
     26c:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <alarm_time+0x1>
     270:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     274:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     278:	28 17       	cp	r18, r24
     27a:	39 07       	cpc	r19, r25
     27c:	09 f0       	breq	.+2      	; 0x280 <alarm_compare+0x28>
     27e:	08 95       	ret
     280:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <tone>
     284:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <tone+0x1>
     288:	01 97       	sbiw	r24, 0x01	; 1
     28a:	c9 f7       	brne	.-14     	; 0x27e <alarm_compare+0x26>
		OCR3A = 5; 
     28c:	85 e0       	ldi	r24, 0x05	; 5
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     294:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		TCCR1B |= 1 << CS10;
     298:	8e b5       	in	r24, 0x2e	; 46
     29a:	81 60       	ori	r24, 0x01	; 1
     29c:	8e bd       	out	0x2e, r24	; 46
     29e:	08 95       	ret

000002a0 <alarm_compare2>:
/********************************************************************
 *				alarm_compare
 *******************************************************************/
void alarm_compare2(void){
	//checks alarm flag and whether button is pressed
if(tone){
     2a0:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <tone>
     2a4:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <tone+0x1>
     2a8:	89 2b       	or	r24, r25
     2aa:	f9 f0       	breq	.+62     	; 0x2ea <alarm_compare2+0x4a>
	if(( mode != 0x08 && mode != 0x40)){  
     2ac:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <mode>
     2b0:	88 30       	cpi	r24, 0x08	; 8
     2b2:	d9 f0       	breq	.+54     	; 0x2ea <alarm_compare2+0x4a>
     2b4:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <mode>
     2b8:	80 34       	cpi	r24, 0x40	; 64
     2ba:	b9 f0       	breq	.+46     	; 0x2ea <alarm_compare2+0x4a>

		//triggers the alarm if alarm time matches with real time 
		if(mode != 0x42){
     2bc:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <mode>
     2c0:	82 34       	cpi	r24, 0x42	; 66
     2c2:	59 f0       	breq	.+22     	; 0x2da <alarm_compare2+0x3a>
			if((alarm_time == time) && (sound == FALSE)){
     2c4:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <alarm_time>
     2c8:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <alarm_time+0x1>
     2cc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     2d0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     2d4:	28 17       	cp	r18, r24
     2d6:	39 07       	cpc	r19, r25
     2d8:	49 f0       	breq	.+18     	; 0x2ec <alarm_compare2+0x4c>
			TCCR1B |= 1 << CS10;
			OCR3A = 8; 
	
			}
		}
		if((alarm_time == time) && (sound == TRUE)){
     2da:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <alarm_time>
     2de:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <alarm_time+0x1>
     2e2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     2e6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     2ea:	08 95       	ret
if(tone){
	if(( mode != 0x08 && mode != 0x40)){  

		//triggers the alarm if alarm time matches with real time 
		if(mode != 0x42){
			if((alarm_time == time) && (sound == FALSE)){
     2ec:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <sound>
     2f0:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <sound+0x1>
     2f4:	89 2b       	or	r24, r25
     2f6:	89 f7       	brne	.-30     	; 0x2da <alarm_compare2+0x3a>
			TCCR1B |= 1 << CS10;
     2f8:	8e b5       	in	r24, 0x2e	; 46
     2fa:	81 60       	ori	r24, 0x01	; 1
     2fc:	8e bd       	out	0x2e, r24	; 46
			OCR3A = 8; 
     2fe:	88 e0       	ldi	r24, 0x08	; 8
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     306:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     30a:	e7 cf       	rjmp	.-50     	; 0x2da <alarm_compare2+0x3a>

0000030c <chk_buttons>:
// Checks the state of pushbutton S0 It shifts in ones till the button is pushed. 
// Function returns a 1 only once per debounced button push so a debounce and toggle 
// function can be implemented at the same time. Expects active low pushbutton on 
// Port A  bit zero. Debounce time is determined by external loop delay times 12. 
//*******************************************************************************
uint8_t chk_buttons(int button) {
     30c:	ac 01       	movw	r20, r24
static uint16_t states[8] = {0}; // an array to store the states of all buttons on the button board

// states[0] corresponds to S1 on the board and states[7] corresponds to S8
states[button] = (states[button]<<1 | (! bit_is_clear(PINA, button)) | 0xE000); //first extract the bit that corresponds to the button
     30e:	99 b3       	in	r25, 0x19	; 25
     310:	fa 01       	movw	r30, r20
     312:	ee 0f       	add	r30, r30
     314:	ff 1f       	adc	r31, r31
     316:	e5 56       	subi	r30, 0x65	; 101
     318:	fd 4f       	sbci	r31, 0xFD	; 253
     31a:	20 81       	ld	r18, Z
     31c:	31 81       	ldd	r19, Z+1	; 0x01
     31e:	22 0f       	add	r18, r18
     320:	33 1f       	adc	r19, r19
     322:	30 6e       	ori	r19, 0xE0	; 224
     324:	89 2f       	mov	r24, r25
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	02 c0       	rjmp	.+4      	; 0x32e <chk_buttons+0x22>
     32a:	95 95       	asr	r25
     32c:	87 95       	ror	r24
     32e:	4a 95       	dec	r20
     330:	e2 f7       	brpl	.-8      	; 0x32a <chk_buttons+0x1e>
     332:	81 70       	andi	r24, 0x01	; 1
     334:	99 27       	eor	r25, r25
     336:	28 2b       	or	r18, r24
     338:	39 2b       	or	r19, r25
     33a:	31 83       	std	Z+1, r19	; 0x01
     33c:	20 83       	st	Z, r18
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	21 15       	cp	r18, r1
     342:	30 4f       	sbci	r19, 0xF0	; 240
     344:	09 f0       	breq	.+2      	; 0x348 <chk_buttons+0x3c>
     346:	80 e0       	ldi	r24, 0x00	; 0
//Check if button is pressed
if (states[button] == 0xF000) {return TRUE;} 
return FALSE;
}
     348:	08 95       	ret

0000034a <process_EN>:
 *
 * once the state machine completes all 4 cycles then it means the knob has been shifted once
 * encoder function for the left and right knobs 
 * Handles all cases of any rotation of the encoders
 **********************************************************************/
int process_EN(void){
     34a:	cf 93       	push	r28
//Breaking up the raw data from the encoder into a and b pins

uint8_t new_A = ((raw_encoder_val & 0x01) ==0) ? 0:1;
     34c:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <raw_encoder_val>
     350:	91 70       	andi	r25, 0x01	; 1
uint8_t new_B = ((raw_encoder_val & 0x02) ==0) ? 0:1;
     352:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <raw_encoder_val>
     356:	41 e0       	ldi	r20, 0x01	; 1
     358:	c8 2f       	mov	r28, r24
     35a:	c2 70       	andi	r28, 0x02	; 2
     35c:	81 ff       	sbrs	r24, 1
     35e:	40 e0       	ldi	r20, 0x00	; 0

//process the right encoder
uint8_t new_C = ((raw_encoder_val & 0x04) ==0) ? 0:1;
     360:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <raw_encoder_val>
     364:	84 70       	andi	r24, 0x04	; 4
uint8_t new_D = ((raw_encoder_val & 0x08) ==0) ? 0:1;
     366:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <raw_encoder_val>
     36a:	31 e0       	ldi	r19, 0x01	; 1
     36c:	52 2f       	mov	r21, r18
     36e:	58 70       	andi	r21, 0x08	; 8
     370:	23 ff       	sbrs	r18, 3
     372:	30 e0       	ldi	r19, 0x00	; 0
int en_val = 0;

en_val = -1; // default return value , no change

// process the right encoder inputs and determine the position movement
if (( new_C != old_C ) || ( new_D != old_D )){ // if change occurred
     374:	e1 e0       	ldi	r30, 0x01	; 1
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	81 11       	cpse	r24, r1
     37a:	02 c0       	rjmp	.+4      	; 0x380 <process_EN+0x36>
     37c:	e0 e0       	ldi	r30, 0x00	; 0
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	60 91 ce 02 	lds	r22, 0x02CE	; 0x8002ce <old_C>
     384:	70 91 cf 02 	lds	r23, 0x02CF	; 0x8002cf <old_C+0x1>
     388:	23 2f       	mov	r18, r19
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	e6 17       	cp	r30, r22
     38e:	f7 07       	cpc	r31, r23
     390:	09 f4       	brne	.+2      	; 0x394 <process_EN+0x4a>
     392:	72 c0       	rjmp	.+228    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>

if (( new_C == 0) && ( new_D == 0)) { // once the state has been moved either right or left from current state
	if ( old_C == 1){ r_counter++;}
     394:	60 91 ce 02 	lds	r22, 0x02CE	; 0x8002ce <old_C>
     398:	70 91 cf 02 	lds	r23, 0x02CF	; 0x8002cf <old_C+0x1>
en_val = -1; // default return value , no change

// process the right encoder inputs and determine the position movement
if (( new_C != old_C ) || ( new_D != old_D )){ // if change occurred

if (( new_C == 0) && ( new_D == 0)) { // once the state has been moved either right or left from current state
     39c:	81 11       	cpse	r24, r1
     39e:	11 c0       	rjmp	.+34     	; 0x3c2 <process_EN+0x78>
     3a0:	55 23       	and	r21, r21
     3a2:	89 f0       	breq	.+34     	; 0x3c6 <process_EN+0x7c>
	if ( old_C == 1){ r_counter++;}
	else { r_counter--;}
}
else if (( new_C == 0) && ( new_D == 1)) { // update state if it has been moved from position from left to right 
	if ( old_C == 0){ r_counter++;}
     3a4:	67 2b       	or	r22, r23
     3a6:	91 f4       	brne	.+36     	; 0x3cc <process_EN+0x82>

// process the right encoder inputs and determine the position movement
if (( new_C != old_C ) || ( new_D != old_D )){ // if change occurred

if (( new_C == 0) && ( new_D == 0)) { // once the state has been moved either right or left from current state
	if ( old_C == 1){ r_counter++;}
     3a8:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <__data_end>
     3ac:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <__data_end+0x1>
     3b0:	6f 5f       	subi	r22, 0xFF	; 255
     3b2:	7f 4f       	sbci	r23, 0xFF	; 255
     3b4:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <__data_end+0x1>
     3b8:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <__data_end>
uint8_t new_C = ((raw_encoder_val & 0x04) ==0) ? 0:1;
uint8_t new_D = ((raw_encoder_val & 0x08) ==0) ? 0:1;

int en_val = 0;

en_val = -1; // default return value , no change
     3bc:	af ef       	ldi	r26, 0xFF	; 255
     3be:	bf ef       	ldi	r27, 0xFF	; 255
     3c0:	11 c0       	rjmp	.+34     	; 0x3e4 <process_EN+0x9a>
else if (( new_C == 0) && ( new_D == 1)) { // update state if it has been moved from position from left to right 
	if ( old_C == 0){ r_counter++;}
	else { r_counter--;}
}

else if (( new_C == 1) && ( new_D == 1)) {// detent position
     3c2:	51 11       	cpse	r21, r1
     3c4:	71 c0       	rjmp	.+226    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>

// process the right encoder inputs and determine the position movement
if (( new_C != old_C ) || ( new_D != old_D )){ // if change occurred

if (( new_C == 0) && ( new_D == 0)) { // once the state has been moved either right or left from current state
	if ( old_C == 1){ r_counter++;}
     3c6:	61 30       	cpi	r22, 0x01	; 1
     3c8:	71 05       	cpc	r23, r1
     3ca:	71 f3       	breq	.-36     	; 0x3a8 <process_EN+0x5e>
	else { r_counter--;}
     3cc:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <__data_end>
     3d0:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <__data_end+0x1>
     3d4:	61 50       	subi	r22, 0x01	; 1
     3d6:	71 09       	sbc	r23, r1
     3d8:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <__data_end+0x1>
     3dc:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <__data_end>
uint8_t new_C = ((raw_encoder_val & 0x04) ==0) ? 0:1;
uint8_t new_D = ((raw_encoder_val & 0x08) ==0) ? 0:1;

int en_val = 0;

en_val = -1; // default return value , no change
     3e0:	af ef       	ldi	r26, 0xFF	; 255
     3e2:	bf ef       	ldi	r27, 0xFF	; 255
}
else if (( new_C == 1) && ( new_D == 0)) {
	if ( old_C == 1) { r_counter++;}
	else { r_counter--;}
}
	old_C = new_C ; // save what are now old values
     3e4:	f0 93 cf 02 	sts	0x02CF, r31	; 0x8002cf <old_C+0x1>
     3e8:	e0 93 ce 02 	sts	0x02CE, r30	; 0x8002ce <old_C>
	old_D = new_D ;
     3ec:	30 93 e6 02 	sts	0x02E6, r19	; 0x8002e6 <old_D+0x1>
     3f0:	20 93 e5 02 	sts	0x02E5, r18	; 0x8002e5 <old_D>

	} // if change occurred


// process the left encoder inputs and determine the position movement
if (( new_A != old_A ) || ( new_B != old_B )){ // if change occurred
     3f4:	29 2f       	mov	r18, r25
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	60 91 b6 02 	lds	r22, 0x02B6	; 0x8002b6 <old_A>
     3fc:	70 91 b7 02 	lds	r23, 0x02B7	; 0x8002b7 <old_A+0x1>
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	26 17       	cp	r18, r22
     404:	37 07       	cpc	r19, r23
     406:	81 f1       	breq	.+96     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>

if (( new_A == 0) && ( new_B == 0)) { // once the state has been moved either right or left from current state
     408:	99 23       	and	r25, r25
     40a:	e1 f0       	breq	.+56     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	else { state_counter--;}
}

else if (( new_A == 1) && ( new_B == 1)) {// detent position
	
	if ( old_A == 0){ if( state_counter == 3){ en_val =0;}} // one direction. Increment 
     40c:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <old_A>
     410:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <old_A+0x1>
else if (( new_A == 0) && ( new_B == 1)) { // update state if it has been moved from position from left to right 
	if ( old_A == 0){ state_counter++;}
	else { state_counter--;}
}

else if (( new_A == 1) && ( new_B == 1)) {// detent position
     414:	c1 11       	cpse	r28, r1
     416:	3b c0       	rjmp	.+118    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
	else {if( state_counter == -3){ en_val =1;}} // or the other. Decrement
	
	state_counter = 0; // count is always reset in detent position
}
else if (( new_A == 1) && ( new_B == 0)) {
	if ( old_A == 1) { state_counter++;}
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	e1 f0       	breq	.+56     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	else { state_counter--;}
     41c:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <state_counter>
     420:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <state_counter+0x1>
     424:	01 97       	sbiw	r24, 0x01	; 1
     426:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <state_counter+0x1>
     42a:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <state_counter>
}
	old_A = new_A ; // save what are now old values
     42e:	30 93 b7 02 	sts	0x02B7, r19	; 0x8002b7 <old_A+0x1>
     432:	20 93 b6 02 	sts	0x02B6, r18	; 0x8002b6 <old_A>
	old_B = new_B ;
     436:	50 93 c2 02 	sts	0x02C2, r21	; 0x8002c2 <old_B+0x1>
     43a:	40 93 c1 02 	sts	0x02C1, r20	; 0x8002c1 <old_B>
	} // if change occurred


return ( en_val ); // return encoder state

}
     43e:	cd 01       	movw	r24, r26
     440:	cf 91       	pop	r28
     442:	08 95       	ret

// process the left encoder inputs and determine the position movement
if (( new_A != old_A ) || ( new_B != old_B )){ // if change occurred

if (( new_A == 0) && ( new_B == 0)) { // once the state has been moved either right or left from current state
	if ( old_A == 1){ state_counter++;}
     444:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <old_A>
     448:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <old_A+0x1>


// process the left encoder inputs and determine the position movement
if (( new_A != old_A ) || ( new_B != old_B )){ // if change occurred

if (( new_A == 0) && ( new_B == 0)) { // once the state has been moved either right or left from current state
     44c:	cc 23       	and	r28, r28
     44e:	21 f3       	breq	.-56     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	if ( old_A == 1){ state_counter++;}
	else { state_counter--;}
}
else if (( new_A == 0) && ( new_B == 1)) { // update state if it has been moved from position from left to right 
	if ( old_A == 0){ state_counter++;}
     450:	89 2b       	or	r24, r25
     452:	21 f7       	brne	.-56     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	else {if( state_counter == -3){ en_val =1;}} // or the other. Decrement
	
	state_counter = 0; // count is always reset in detent position
}
else if (( new_A == 1) && ( new_B == 0)) {
	if ( old_A == 1) { state_counter++;}
     454:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <state_counter>
     458:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <state_counter+0x1>
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <state_counter+0x1>
     462:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <state_counter>
     466:	e3 cf       	rjmp	.-58     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>

	} // if change occurred


// process the left encoder inputs and determine the position movement
if (( new_A != old_A ) || ( new_B != old_B )){ // if change occurred
     468:	60 91 c1 02 	lds	r22, 0x02C1	; 0x8002c1 <old_B>
     46c:	70 91 c2 02 	lds	r23, 0x02C2	; 0x8002c2 <old_B+0x1>
     470:	46 17       	cp	r20, r22
     472:	57 07       	cpc	r21, r23
     474:	49 f6       	brne	.-110    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     476:	e3 cf       	rjmp	.-58     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
int en_val = 0;

en_val = -1; // default return value , no change

// process the right encoder inputs and determine the position movement
if (( new_C != old_C ) || ( new_D != old_D )){ // if change occurred
     478:	60 91 e5 02 	lds	r22, 0x02E5	; 0x8002e5 <old_D>
     47c:	70 91 e6 02 	lds	r23, 0x02E6	; 0x8002e6 <old_D+0x1>
     480:	26 17       	cp	r18, r22
     482:	37 07       	cpc	r19, r23
     484:	09 f0       	breq	.+2      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     486:	86 cf       	rjmp	.-244    	; 0x394 <process_EN+0x4a>
uint8_t new_C = ((raw_encoder_val & 0x04) ==0) ? 0:1;
uint8_t new_D = ((raw_encoder_val & 0x08) ==0) ? 0:1;

int en_val = 0;

en_val = -1; // default return value , no change
     488:	af ef       	ldi	r26, 0xFF	; 255
     48a:	bf ef       	ldi	r27, 0xFF	; 255
     48c:	b3 cf       	rjmp	.-154    	; 0x3f4 <process_EN+0xaa>
	else { state_counter--;}
}

else if (( new_A == 1) && ( new_B == 1)) {// detent position
	
	if ( old_A == 0){ if( state_counter == 3){ en_val =0;}} // one direction. Increment 
     48e:	89 2b       	or	r24, r25
     490:	d9 f4       	brne	.+54     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     492:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <state_counter>
     496:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <state_counter+0x1>
     49a:	03 97       	sbiw	r24, 0x03	; 3
     49c:	41 f1       	breq	.+80     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>

	else {if( state_counter == -3){ en_val =1;}} // or the other. Decrement
	
	state_counter = 0; // count is always reset in detent position
     49e:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <state_counter+0x1>
     4a2:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <state_counter>
     4a6:	c3 cf       	rjmp	.-122    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	else { r_counter--;}
}

else if (( new_C == 1) && ( new_D == 1)) {// detent position
	
	if ( old_C == 0){ if( r_counter == 3){ en_val =2;}} // one direction. Increment 
     4a8:	67 2b       	or	r22, r23
     4aa:	b9 f4       	brne	.+46     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4ac:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <__data_end>
     4b0:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <__data_end+0x1>
     4b4:	63 30       	cpi	r22, 0x03	; 3
     4b6:	71 05       	cpc	r23, r1
     4b8:	e9 f0       	breq	.+58     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
uint8_t new_C = ((raw_encoder_val & 0x04) ==0) ? 0:1;
uint8_t new_D = ((raw_encoder_val & 0x08) ==0) ? 0:1;

int en_val = 0;

en_val = -1; // default return value , no change
     4ba:	af ef       	ldi	r26, 0xFF	; 255
     4bc:	bf ef       	ldi	r27, 0xFF	; 255
	
	if ( old_C == 0){ if( r_counter == 3){ en_val =2;}} // one direction. Increment 

	else {if( r_counter == -3){ en_val =3;}} // or the other. Decrement
	
	r_counter = 0; // count is always reset in detent position
     4be:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <__data_end+0x1>
     4c2:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <__data_end>
     4c6:	8e cf       	rjmp	.-228    	; 0x3e4 <process_EN+0x9a>

else if (( new_A == 1) && ( new_B == 1)) {// detent position
	
	if ( old_A == 0){ if( state_counter == 3){ en_val =0;}} // one direction. Increment 

	else {if( state_counter == -3){ en_val =1;}} // or the other. Decrement
     4c8:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <state_counter>
     4cc:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <state_counter+0x1>
     4d0:	03 96       	adiw	r24, 0x03	; 3
     4d2:	29 f7       	brne	.-54     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     4d4:	a1 e0       	ldi	r26, 0x01	; 1
     4d6:	b0 e0       	ldi	r27, 0x00	; 0
     4d8:	e2 cf       	rjmp	.-60     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>

else if (( new_C == 1) && ( new_D == 1)) {// detent position
	
	if ( old_C == 0){ if( r_counter == 3){ en_val =2;}} // one direction. Increment 

	else {if( r_counter == -3){ en_val =3;}} // or the other. Decrement
     4da:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <__data_end>
     4de:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <__data_end+0x1>
     4e2:	6d 3f       	cpi	r22, 0xFD	; 253
     4e4:	7f 4f       	sbci	r23, 0xFF	; 255
     4e6:	49 f7       	brne	.-46     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4e8:	a3 e0       	ldi	r26, 0x03	; 3
     4ea:	b0 e0       	ldi	r27, 0x00	; 0
     4ec:	e8 cf       	rjmp	.-48     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
	else { state_counter--;}
}

else if (( new_A == 1) && ( new_B == 1)) {// detent position
	
	if ( old_A == 0){ if( state_counter == 3){ en_val =0;}} // one direction. Increment 
     4ee:	a0 e0       	ldi	r26, 0x00	; 0
     4f0:	b0 e0       	ldi	r27, 0x00	; 0
     4f2:	d5 cf       	rjmp	.-86     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
	else { r_counter--;}
}

else if (( new_C == 1) && ( new_D == 1)) {// detent position
	
	if ( old_C == 0){ if( r_counter == 3){ en_val =2;}} // one direction. Increment 
     4f4:	a2 e0       	ldi	r26, 0x02	; 2
     4f6:	b0 e0       	ldi	r27, 0x00	; 0
     4f8:	e2 cf       	rjmp	.-60     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>

000004fa <update_freq>:
/********************************************************************
 *				update_encoder
 ********************************************************************/
void update_freq(int val_rot){
//changes the real time without affecting alarm time
	if(val_rot == 1){ current_fm_freq += incr_freq;} //if rotating to the right for left encoder then increment 
     4fa:	81 30       	cpi	r24, 0x01	; 1
     4fc:	91 05       	cpc	r25, r1
     4fe:	a1 f0       	breq	.+40     	; 0x528 <update_freq+0x2e>
	else if(val_rot ==0){current_fm_freq -= incr_freq;}//if rotating to the left for left encoder then decrement
     500:	9c 01       	movw	r18, r24
     502:	2d 7f       	andi	r18, 0xFD	; 253
     504:	23 2b       	or	r18, r19
     506:	19 f0       	breq	.+6      	; 0x50e <update_freq+0x14>
	else if(val_rot == 2){current_fm_freq -= incr_freq;} // if rotating to the left for right encoder then decrement
	else if(val_rot == 3){current_fm_freq += incr_freq;}// if rotatiing to the right for right encoder then increment
     508:	03 97       	sbiw	r24, 0x03	; 3
     50a:	71 f0       	breq	.+28     	; 0x528 <update_freq+0x2e>
     50c:	08 95       	ret
 *				update_encoder
 ********************************************************************/
void update_freq(int val_rot){
//changes the real time without affecting alarm time
	if(val_rot == 1){ current_fm_freq += incr_freq;} //if rotating to the right for left encoder then increment 
	else if(val_rot ==0){current_fm_freq -= incr_freq;}//if rotating to the left for left encoder then decrement
     50e:	20 91 b5 02 	lds	r18, 0x02B5	; 0x8002b5 <incr_freq>
     512:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <current_fm_freq>
     516:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <current_fm_freq+0x1>
     51a:	82 1b       	sub	r24, r18
     51c:	91 09       	sbc	r25, r1
     51e:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <current_fm_freq+0x1>
     522:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <current_fm_freq>
     526:	08 95       	ret
/********************************************************************
 *				update_encoder
 ********************************************************************/
void update_freq(int val_rot){
//changes the real time without affecting alarm time
	if(val_rot == 1){ current_fm_freq += incr_freq;} //if rotating to the right for left encoder then increment 
     528:	20 91 b5 02 	lds	r18, 0x02B5	; 0x8002b5 <incr_freq>
     52c:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <current_fm_freq>
     530:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <current_fm_freq+0x1>
     534:	82 0f       	add	r24, r18
     536:	91 1d       	adc	r25, r1
     538:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <current_fm_freq+0x1>
     53c:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <current_fm_freq>
     540:	08 95       	ret

00000542 <update_EN>:
 *				update_encoder
 ********************************************************************/

void update_EN(int val_rot){
//changes the real time without affecting alarm time
	if(val_rot == 1){ time += (100*incr_time);} //if rotating to the right for left encoder then increment 
     542:	81 30       	cpi	r24, 0x01	; 1
     544:	91 05       	cpc	r25, r1
     546:	61 f1       	breq	.+88     	; 0x5a0 <update_EN+0x5e>
	else if(val_rot ==0){time -= (100*incr_time);}//if rotating to the left for left encoder then decrement
     548:	00 97       	sbiw	r24, 0x00	; 0
     54a:	31 f0       	breq	.+12     	; 0x558 <update_EN+0x16>
	else if(val_rot == 2){time -= incr_time;} // if rotating to the left for right encoder then decrement
     54c:	82 30       	cpi	r24, 0x02	; 2
     54e:	91 05       	cpc	r25, r1
     550:	e1 f1       	breq	.+120    	; 0x5ca <update_EN+0x88>
	else if(val_rot == 3){time += incr_time;}// if rotatiing to the right for right encoder then increment
     552:	03 97       	sbiw	r24, 0x03	; 3
     554:	b1 f0       	breq	.+44     	; 0x582 <update_EN+0x40>
     556:	08 95       	ret
 ********************************************************************/

void update_EN(int val_rot){
//changes the real time without affecting alarm time
	if(val_rot == 1){ time += (100*incr_time);} //if rotating to the right for left encoder then increment 
	else if(val_rot ==0){time -= (100*incr_time);}//if rotating to the left for left encoder then decrement
     558:	40 91 7f 02 	lds	r20, 0x027F	; 0x80027f <incr_time>
     55c:	50 91 80 02 	lds	r21, 0x0280	; 0x800280 <incr_time+0x1>
     560:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     564:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     568:	64 e6       	ldi	r22, 0x64	; 100
     56a:	64 9f       	mul	r22, r20
     56c:	90 01       	movw	r18, r0
     56e:	65 9f       	mul	r22, r21
     570:	30 0d       	add	r19, r0
     572:	11 24       	eor	r1, r1
     574:	82 1b       	sub	r24, r18
     576:	93 0b       	sbc	r25, r19
     578:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     57c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
     580:	08 95       	ret
	else if(val_rot == 2){time -= incr_time;} // if rotating to the left for right encoder then decrement
	else if(val_rot == 3){time += incr_time;}// if rotatiing to the right for right encoder then increment
     582:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <incr_time>
     586:	30 91 80 02 	lds	r19, 0x0280	; 0x800280 <incr_time+0x1>
     58a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     58e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     592:	82 0f       	add	r24, r18
     594:	93 1f       	adc	r25, r19
     596:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     59a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
     59e:	08 95       	ret
 *				update_encoder
 ********************************************************************/

void update_EN(int val_rot){
//changes the real time without affecting alarm time
	if(val_rot == 1){ time += (100*incr_time);} //if rotating to the right for left encoder then increment 
     5a0:	40 91 7f 02 	lds	r20, 0x027F	; 0x80027f <incr_time>
     5a4:	50 91 80 02 	lds	r21, 0x0280	; 0x800280 <incr_time+0x1>
     5a8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     5ac:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     5b0:	64 e6       	ldi	r22, 0x64	; 100
     5b2:	64 9f       	mul	r22, r20
     5b4:	90 01       	movw	r18, r0
     5b6:	65 9f       	mul	r22, r21
     5b8:	30 0d       	add	r19, r0
     5ba:	11 24       	eor	r1, r1
     5bc:	82 0f       	add	r24, r18
     5be:	93 1f       	adc	r25, r19
     5c0:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     5c4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
     5c8:	08 95       	ret
	else if(val_rot ==0){time -= (100*incr_time);}//if rotating to the left for left encoder then decrement
	else if(val_rot == 2){time -= incr_time;} // if rotating to the left for right encoder then decrement
     5ca:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <incr_time>
     5ce:	30 91 80 02 	lds	r19, 0x0280	; 0x800280 <incr_time+0x1>
     5d2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     5d6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     5da:	82 1b       	sub	r24, r18
     5dc:	93 0b       	sbc	r25, r19
     5de:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     5e2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
     5e6:	08 95       	ret

000005e8 <update_EN_alarm>:
/********************************************************************
 *				update_encoder_alarm
 ********************************************************************/
void update_EN_alarm(int val_rot){
//changes the alarm time without affecting real time
	if(val_rot == 1){ alarm_time += (100*incr_alarm);} //if rotating to the right for left encoder then increment 
     5e8:	81 30       	cpi	r24, 0x01	; 1
     5ea:	91 05       	cpc	r25, r1
     5ec:	61 f1       	breq	.+88     	; 0x646 <update_EN_alarm+0x5e>
	else if(val_rot ==0){alarm_time -= (100*incr_alarm);}//if rotating to the left for left encoder then decrement
     5ee:	00 97       	sbiw	r24, 0x00	; 0
     5f0:	31 f0       	breq	.+12     	; 0x5fe <update_EN_alarm+0x16>
	else if(val_rot == 2){alarm_time -= incr_alarm;} // if rotating to the left for right encoder then decrement
     5f2:	82 30       	cpi	r24, 0x02	; 2
     5f4:	91 05       	cpc	r25, r1
     5f6:	e1 f1       	breq	.+120    	; 0x670 <update_EN_alarm+0x88>
	else if(val_rot == 3){alarm_time += incr_alarm;}// if rotatiing to the right for right encoder then increment
     5f8:	03 97       	sbiw	r24, 0x03	; 3
     5fa:	b1 f0       	breq	.+44     	; 0x628 <update_EN_alarm+0x40>
     5fc:	08 95       	ret
 *				update_encoder_alarm
 ********************************************************************/
void update_EN_alarm(int val_rot){
//changes the alarm time without affecting real time
	if(val_rot == 1){ alarm_time += (100*incr_alarm);} //if rotating to the right for left encoder then increment 
	else if(val_rot ==0){alarm_time -= (100*incr_alarm);}//if rotating to the left for left encoder then decrement
     5fe:	40 91 7d 02 	lds	r20, 0x027D	; 0x80027d <incr_alarm>
     602:	50 91 7e 02 	lds	r21, 0x027E	; 0x80027e <incr_alarm+0x1>
     606:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <alarm_time>
     60a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <alarm_time+0x1>
     60e:	64 e6       	ldi	r22, 0x64	; 100
     610:	64 9f       	mul	r22, r20
     612:	90 01       	movw	r18, r0
     614:	65 9f       	mul	r22, r21
     616:	30 0d       	add	r19, r0
     618:	11 24       	eor	r1, r1
     61a:	82 1b       	sub	r24, r18
     61c:	93 0b       	sbc	r25, r19
     61e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <alarm_time+0x1>
     622:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <alarm_time>
     626:	08 95       	ret
	else if(val_rot == 2){alarm_time -= incr_alarm;} // if rotating to the left for right encoder then decrement
	else if(val_rot == 3){alarm_time += incr_alarm;}// if rotatiing to the right for right encoder then increment
     628:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <incr_alarm>
     62c:	30 91 7e 02 	lds	r19, 0x027E	; 0x80027e <incr_alarm+0x1>
     630:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <alarm_time>
     634:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <alarm_time+0x1>
     638:	82 0f       	add	r24, r18
     63a:	93 1f       	adc	r25, r19
     63c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <alarm_time+0x1>
     640:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <alarm_time>
     644:	08 95       	ret
/********************************************************************
 *				update_encoder_alarm
 ********************************************************************/
void update_EN_alarm(int val_rot){
//changes the alarm time without affecting real time
	if(val_rot == 1){ alarm_time += (100*incr_alarm);} //if rotating to the right for left encoder then increment 
     646:	40 91 7d 02 	lds	r20, 0x027D	; 0x80027d <incr_alarm>
     64a:	50 91 7e 02 	lds	r21, 0x027E	; 0x80027e <incr_alarm+0x1>
     64e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <alarm_time>
     652:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <alarm_time+0x1>
     656:	64 e6       	ldi	r22, 0x64	; 100
     658:	64 9f       	mul	r22, r20
     65a:	90 01       	movw	r18, r0
     65c:	65 9f       	mul	r22, r21
     65e:	30 0d       	add	r19, r0
     660:	11 24       	eor	r1, r1
     662:	82 0f       	add	r24, r18
     664:	93 1f       	adc	r25, r19
     666:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <alarm_time+0x1>
     66a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <alarm_time>
     66e:	08 95       	ret
	else if(val_rot ==0){alarm_time -= (100*incr_alarm);}//if rotating to the left for left encoder then decrement
	else if(val_rot == 2){alarm_time -= incr_alarm;} // if rotating to the left for right encoder then decrement
     670:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <incr_alarm>
     674:	30 91 7e 02 	lds	r19, 0x027E	; 0x80027e <incr_alarm+0x1>
     678:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <alarm_time>
     67c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <alarm_time+0x1>
     680:	82 1b       	sub	r24, r18
     682:	93 0b       	sbc	r25, r19
     684:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <alarm_time+0x1>
     688:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <alarm_time>
     68c:	08 95       	ret

0000068e <read_SPI>:
 *				read_SPI
 ********************************************************************/
void read_SPI(void){

//shift clock register
PORTE &= ~(1 << PE6);//falling edge
     68e:	1e 98       	cbi	0x03, 6	; 3
PORTE |= (1 << PE6); //rising edge
     690:	1e 9a       	sbi	0x03, 6	; 3
SPDR = 0x20; //send junk data to read in from SPI
     692:	80 e2       	ldi	r24, 0x20	; 32
     694:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){} // read data in
     696:	77 9b       	sbis	0x0e, 7	; 14
     698:	fe cf       	rjmp	.-4      	; 0x696 <read_SPI+0x8>
raw_encoder_val = SPDR;//save the data
     69a:	8f b1       	in	r24, 0x0f	; 15
     69c:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <raw_encoder_val>
     6a0:	08 95       	ret

000006a2 <write_SPI>:
/********************************************************************
 *				write_SPI
 ********************************************************************/
void write_SPI(uint8_t value){

SPDR = value; // take in which mode it is currently on and display it 
     6a2:	8f b9       	out	0x0f, r24	; 15
	while (bit_is_clear(SPSR,SPIF)) {} //wait till data is sent out
     6a4:	77 9b       	sbis	0x0e, 7	; 14
     6a6:	fe cf       	rjmp	.-4      	; 0x6a4 <write_SPI+0x2>
PORTD |= (1 << PD2); //SEND data to bargraph, rising edge
     6a8:	92 9a       	sbi	0x12, 2	; 18
PORTD &= ~(1<<PD2); // falling edge
     6aa:	92 98       	cbi	0x12, 2	; 18
     6ac:	08 95       	ret

000006ae <__vector_12>:


/********************************************************************
 *	 		TIMER_COUNTER1 COMPARE ISR
 ********************************************************************/
ISR(TIMER1_COMPA_vect){
     6ae:	1f 92       	push	r1
     6b0:	0f 92       	push	r0
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	0f 92       	push	r0
     6b6:	11 24       	eor	r1, r1
     6b8:	8f 93       	push	r24
     6ba:	9f 93       	push	r25

	DDRE |= 1 << PE3; // PE1 will output for volume
     6bc:	13 9a       	sbi	0x02, 3	; 2
	PORTC ^= 1 << PC0; // PC0 will toggle tone
     6be:	95 b3       	in	r25, 0x15	; 21
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	89 27       	eor	r24, r25
     6c4:	85 bb       	out	0x15, r24	; 21
}
     6c6:	9f 91       	pop	r25
     6c8:	8f 91       	pop	r24
     6ca:	0f 90       	pop	r0
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	0f 90       	pop	r0
     6d0:	1f 90       	pop	r1
     6d2:	18 95       	reti

000006d4 <__vector_9>:


//dimming for LED display 
ISR( TIMER2_COMP_vect){
     6d4:	1f 92       	push	r1
     6d6:	0f 92       	push	r0
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	0f 92       	push	r0
     6dc:	11 24       	eor	r1, r1
     6de:	8f 93       	push	r24
	
	OCR2 = adc_data;
     6e0:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <adc_data>
     6e4:	83 bd       	out	0x23, r24	; 35
}
     6e6:	8f 91       	pop	r24
     6e8:	0f 90       	pop	r0
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	0f 90       	pop	r0
     6ee:	1f 90       	pop	r1
     6f0:	18 95       	reti

000006f2 <__vector_15>:


// TIMER0 Compare Match
ISR( TIMER0_COMP_vect ) {
     6f2:	1f 92       	push	r1
     6f4:	0f 92       	push	r0
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	0f 92       	push	r0
     6fa:	11 24       	eor	r1, r1
     6fc:	0b b6       	in	r0, 0x3b	; 59
     6fe:	0f 92       	push	r0
     700:	8f 92       	push	r8
     702:	9f 92       	push	r9
     704:	af 92       	push	r10
     706:	bf 92       	push	r11
     708:	cf 92       	push	r12
     70a:	df 92       	push	r13
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	2f 93       	push	r18
     716:	3f 93       	push	r19
     718:	4f 93       	push	r20
     71a:	5f 93       	push	r21
     71c:	6f 93       	push	r22
     71e:	7f 93       	push	r23
     720:	8f 93       	push	r24
     722:	9f 93       	push	r25
     724:	af 93       	push	r26
     726:	bf 93       	push	r27
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	ef 93       	push	r30
     72e:	ff 93       	push	r31
	}
DDRA = 0xFF;  //make PORTA an output
*/

//save the states of PORTA and PORTB
saveA = PORTA;
     730:	8b b3       	in	r24, 0x1b	; 27
     732:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <saveA>
saveB = PORTB;
     736:	88 b3       	in	r24, 0x18	; 24
     738:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <saveB>

refresh_lcd(lcd_temp_array); //display the interface with the temperature and alarms
     73c:	88 e1       	ldi	r24, 0x18	; 24
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <refresh_lcd>

alarm_compare2(); //checks if the alarm set time and the clock time matches then trigger alarm
     744:	0e 94 50 01 	call	0x2a0	; 0x2a0 <alarm_compare2>



static uint16_t timer = 0;  //hold value of count between interrupts
timer++;  //extend counter
     748:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <timer.2445>
     74c:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <timer.2445+0x1>
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <timer.2445+0x1>
     756:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <timer.2445>


if((timer% 128) == 0){ // turn off for half a second 
     75a:	9c 01       	movw	r18, r24
     75c:	2f 77       	andi	r18, 0x7F	; 127
     75e:	33 27       	eor	r19, r19
     760:	23 2b       	or	r18, r19
     762:	19 f4       	brne	.+6      	; 0x76a <__vector_15+0x78>
	segment_data[2] = 0x07; //turn off colon
     764:	27 e0       	ldi	r18, 0x07	; 7
     766:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <segment_data+0x2>
} 

if((timer% 512) == 0){
     76a:	91 70       	andi	r25, 0x01	; 1
     76c:	89 2b       	or	r24, r25
     76e:	09 f4       	brne	.+2      	; 0x772 <__vector_15+0x80>
     770:	23 c1       	rjmp	.+582    	; 0x9b8 <__vector_15+0x2c6>
 	seconds+= seconds_holder; 	//increment seconds
	snooze_seconds += seconds_holder;//increment seconds of snooze
} 


PORTB = 0x50;  //enable tristate buffer for pushbutton switches
     772:	80 e5       	ldi	r24, 0x50	; 80
     774:	88 bb       	out	0x18, r24	; 24
     776:	8f e8       	ldi	r24, 0x8F	; 143
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	01 97       	sbiw	r24, 0x01	; 1
     77c:	f1 f7       	brne	.-4      	; 0x77a <__vector_15+0x88>
     77e:	00 c0       	rjmp	.+0      	; 0x780 <__vector_15+0x8e>
     780:	00 00       	nop
//*******************************************************************************
uint8_t chk_buttons(int button) {
static uint16_t states[8] = {0}; // an array to store the states of all buttons on the button board

// states[0] corresponds to S1 on the board and states[7] corresponds to S8
states[button] = (states[button]<<1 | (! bit_is_clear(PINA, button)) | 0xE000); //first extract the bit that corresponds to the button
     782:	29 b3       	in	r18, 0x19	; 25
     784:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <states.2400>
     788:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <states.2400+0x1>
     78c:	88 0f       	add	r24, r24
     78e:	99 1f       	adc	r25, r25
     790:	90 6e       	ori	r25, 0xE0	; 224
     792:	21 70       	andi	r18, 0x01	; 1
     794:	c2 2f       	mov	r28, r18
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	d2 2f       	mov	r29, r18
     79a:	c8 2b       	or	r28, r24
     79c:	d9 2b       	or	r29, r25
     79e:	d0 93 9c 02 	sts	0x029C, r29	; 0x80029c <states.2400+0x1>
     7a2:	c0 93 9b 02 	sts	0x029B, r28	; 0x80029b <states.2400>
//Check if button is pressed
if (states[button] == 0xF000) {return TRUE;} 
     7a6:	c1 15       	cp	r28, r1
     7a8:	d0 4f       	sbci	r29, 0xF0	; 240
     7aa:	31 f4       	brne	.+12     	; 0x7b8 <__vector_15+0xc6>

PORTB = 0x50;  //enable tristate buffer for pushbutton switches
_delay_ms(.1);//need a delay to active buffer


if(chk_buttons(0)){mode ^= 1 << 6;}//sets alarm, 0x40
     7ac:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <mode>
     7b0:	80 e4       	ldi	r24, 0x40	; 64
     7b2:	89 27       	eor	r24, r25
     7b4:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <mode>
//*******************************************************************************
uint8_t chk_buttons(int button) {
static uint16_t states[8] = {0}; // an array to store the states of all buttons on the button board

// states[0] corresponds to S1 on the board and states[7] corresponds to S8
states[button] = (states[button]<<1 | (! bit_is_clear(PINA, button)) | 0xE000); //first extract the bit that corresponds to the button
     7b8:	29 b3       	in	r18, 0x19	; 25
     7ba:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <states.2400+0x8>
     7be:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <states.2400+0x9>
     7c2:	88 0f       	add	r24, r24
     7c4:	99 1f       	adc	r25, r25
     7c6:	90 6e       	ori	r25, 0xE0	; 224
     7c8:	24 fb       	bst	r18, 4
     7ca:	aa 24       	eor	r10, r10
     7cc:	a0 f8       	bld	r10, 0
     7ce:	b1 2c       	mov	r11, r1
     7d0:	a8 2a       	or	r10, r24
     7d2:	b9 2a       	or	r11, r25
     7d4:	b0 92 a4 02 	sts	0x02A4, r11	; 0x8002a4 <states.2400+0x9>
     7d8:	a0 92 a3 02 	sts	0x02A3, r10	; 0x8002a3 <states.2400+0x8>
//Check if button is pressed
if (states[button] == 0xF000) {return TRUE;} 
     7dc:	a1 14       	cp	r10, r1
     7de:	90 ef       	ldi	r25, 0xF0	; 240
     7e0:	b9 06       	cpc	r11, r25
     7e2:	31 f4       	brne	.+12     	; 0x7f0 <__vector_15+0xfe>
PORTB = 0x50;  //enable tristate buffer for pushbutton switches
_delay_ms(.1);//need a delay to active buffer


if(chk_buttons(0)){mode ^= 1 << 6;}//sets alarm, 0x40
if(chk_buttons(4)){mode ^= 1 << 1;}//set tone to be alarm or radio (default: ALARM), 0x02
     7e4:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <mode>
     7e8:	82 e0       	ldi	r24, 0x02	; 2
     7ea:	89 27       	eor	r24, r25
     7ec:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <mode>
//*******************************************************************************
uint8_t chk_buttons(int button) {
static uint16_t states[8] = {0}; // an array to store the states of all buttons on the button board

// states[0] corresponds to S1 on the board and states[7] corresponds to S8
states[button] = (states[button]<<1 | (! bit_is_clear(PINA, button)) | 0xE000); //first extract the bit that corresponds to the button
     7f0:	29 b3       	in	r18, 0x19	; 25
     7f2:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <states.2400+0xc>
     7f6:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <states.2400+0xd>
     7fa:	88 0f       	add	r24, r24
     7fc:	99 1f       	adc	r25, r25
     7fe:	90 6e       	ori	r25, 0xE0	; 224
     800:	26 fb       	bst	r18, 6
     802:	cc 24       	eor	r12, r12
     804:	c0 f8       	bld	r12, 0
     806:	d1 2c       	mov	r13, r1
     808:	c8 2a       	or	r12, r24
     80a:	d9 2a       	or	r13, r25
     80c:	d0 92 a8 02 	sts	0x02A8, r13	; 0x8002a8 <states.2400+0xd>
     810:	c0 92 a7 02 	sts	0x02A7, r12	; 0x8002a7 <states.2400+0xc>
//Check if button is pressed
if (states[button] == 0xF000) {return TRUE;} 
     814:	c1 14       	cp	r12, r1
     816:	20 ef       	ldi	r18, 0xF0	; 240
     818:	d2 06       	cpc	r13, r18
     81a:	31 f4       	brne	.+12     	; 0x828 <__vector_15+0x136>
_delay_ms(.1);//need a delay to active buffer


if(chk_buttons(0)){mode ^= 1 << 6;}//sets alarm, 0x40
if(chk_buttons(4)){mode ^= 1 << 1;}//set tone to be alarm or radio (default: ALARM), 0x02
if(chk_buttons(6)){mode ^= 1 << 4;}// sets Radio frequency, 0x10
     81c:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <mode>
     820:	80 e1       	ldi	r24, 0x10	; 16
     822:	89 27       	eor	r24, r25
     824:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <mode>
//*******************************************************************************
uint8_t chk_buttons(int button) {
static uint16_t states[8] = {0}; // an array to store the states of all buttons on the button board

// states[0] corresponds to S1 on the board and states[7] corresponds to S8
states[button] = (states[button]<<1 | (! bit_is_clear(PINA, button)) | 0xE000); //first extract the bit that corresponds to the button
     828:	29 b3       	in	r18, 0x19	; 25
     82a:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <states.2400+0x4>
     82e:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <states.2400+0x5>
     832:	88 0f       	add	r24, r24
     834:	99 1f       	adc	r25, r25
     836:	90 6e       	ori	r25, 0xE0	; 224
     838:	22 fb       	bst	r18, 2
     83a:	ee 24       	eor	r14, r14
     83c:	e0 f8       	bld	r14, 0
     83e:	f1 2c       	mov	r15, r1
     840:	e8 2a       	or	r14, r24
     842:	f9 2a       	or	r15, r25
     844:	f0 92 a0 02 	sts	0x02A0, r15	; 0x8002a0 <states.2400+0x5>
     848:	e0 92 9f 02 	sts	0x029F, r14	; 0x80029f <states.2400+0x4>
//Check if button is pressed
if (states[button] == 0xF000) {return TRUE;} 
     84c:	e1 14       	cp	r14, r1
     84e:	80 ef       	ldi	r24, 0xF0	; 240
     850:	f8 06       	cpc	r15, r24
     852:	31 f4       	brne	.+12     	; 0x860 <__vector_15+0x16e>


if(chk_buttons(0)){mode ^= 1 << 6;}//sets alarm, 0x40
if(chk_buttons(4)){mode ^= 1 << 1;}//set tone to be alarm or radio (default: ALARM), 0x02
if(chk_buttons(6)){mode ^= 1 << 4;}// sets Radio frequency, 0x10
if(chk_buttons(2)){mode ^= 1 << 5;}//disable alarm, 0x20
     854:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <mode>
     858:	80 e2       	ldi	r24, 0x20	; 32
     85a:	89 27       	eor	r24, r25
     85c:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <mode>
//*******************************************************************************
uint8_t chk_buttons(int button) {
static uint16_t states[8] = {0}; // an array to store the states of all buttons on the button board

// states[0] corresponds to S1 on the board and states[7] corresponds to S8
states[button] = (states[button]<<1 | (! bit_is_clear(PINA, button)) | 0xE000); //first extract the bit that corresponds to the button
     860:	29 b3       	in	r18, 0x19	; 25
     862:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <states.2400+0x6>
     866:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <states.2400+0x7>
     86a:	88 0f       	add	r24, r24
     86c:	99 1f       	adc	r25, r25
     86e:	90 6e       	ori	r25, 0xE0	; 224
     870:	23 fb       	bst	r18, 3
     872:	00 27       	eor	r16, r16
     874:	00 f9       	bld	r16, 0
     876:	10 e0       	ldi	r17, 0x00	; 0
     878:	08 2b       	or	r16, r24
     87a:	19 2b       	or	r17, r25
     87c:	10 93 a2 02 	sts	0x02A2, r17	; 0x8002a2 <states.2400+0x7>
     880:	00 93 a1 02 	sts	0x02A1, r16	; 0x8002a1 <states.2400+0x6>
//Check if button is pressed
if (states[button] == 0xF000) {return TRUE;} 
     884:	01 15       	cp	r16, r1
     886:	10 4f       	sbci	r17, 0xF0	; 240
     888:	31 f4       	brne	.+12     	; 0x896 <__vector_15+0x1a4>

if(chk_buttons(0)){mode ^= 1 << 6;}//sets alarm, 0x40
if(chk_buttons(4)){mode ^= 1 << 1;}//set tone to be alarm or radio (default: ALARM), 0x02
if(chk_buttons(6)){mode ^= 1 << 4;}// sets Radio frequency, 0x10
if(chk_buttons(2)){mode ^= 1 << 5;}//disable alarm, 0x20
if(chk_buttons(3)){mode ^= 1 << 2;}//snooze alarm, 0x08
     88a:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <mode>
     88e:	84 e0       	ldi	r24, 0x04	; 4
     890:	89 27       	eor	r24, r25
     892:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <mode>
//*******************************************************************************
uint8_t chk_buttons(int button) {
static uint16_t states[8] = {0}; // an array to store the states of all buttons on the button board

// states[0] corresponds to S1 on the board and states[7] corresponds to S8
states[button] = (states[button]<<1 | (! bit_is_clear(PINA, button)) | 0xE000); //first extract the bit that corresponds to the button
     896:	29 b3       	in	r18, 0x19	; 25
     898:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <states.2400+0x2>
     89c:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <states.2400+0x3>
     8a0:	88 0f       	add	r24, r24
     8a2:	99 1f       	adc	r25, r25
     8a4:	90 6e       	ori	r25, 0xE0	; 224
     8a6:	21 fb       	bst	r18, 1
     8a8:	88 24       	eor	r8, r8
     8aa:	80 f8       	bld	r8, 0
     8ac:	91 2c       	mov	r9, r1
     8ae:	88 2a       	or	r8, r24
     8b0:	99 2a       	or	r9, r25
     8b2:	90 92 9e 02 	sts	0x029E, r9	; 0x80029e <states.2400+0x3>
     8b6:	80 92 9d 02 	sts	0x029D, r8	; 0x80029d <states.2400+0x2>
//Check if button is pressed
if (states[button] == 0xF000) {return TRUE;} 
     8ba:	81 14       	cp	r8, r1
     8bc:	20 ef       	ldi	r18, 0xF0	; 240
     8be:	92 06       	cpc	r9, r18
     8c0:	31 f4       	brne	.+12     	; 0x8ce <__vector_15+0x1dc>
if(chk_buttons(0)){mode ^= 1 << 6;}//sets alarm, 0x40
if(chk_buttons(4)){mode ^= 1 << 1;}//set tone to be alarm or radio (default: ALARM), 0x02
if(chk_buttons(6)){mode ^= 1 << 4;}// sets Radio frequency, 0x10
if(chk_buttons(2)){mode ^= 1 << 5;}//disable alarm, 0x20
if(chk_buttons(3)){mode ^= 1 << 2;}//snooze alarm, 0x08
if(chk_buttons(1)){mode ^= 1 << 3;} //sets time, 0x04
     8c2:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <mode>
     8c6:	88 e0       	ldi	r24, 0x08	; 8
     8c8:	89 27       	eor	r24, r25
     8ca:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <mode>
	
PORTB = 0x70;//disable tristate
     8ce:	80 e7       	ldi	r24, 0x70	; 112
     8d0:	88 bb       	out	0x18, r24	; 24
 *				read_SPI
 ********************************************************************/
void read_SPI(void){

//shift clock register
PORTE &= ~(1 << PE6);//falling edge
     8d2:	1e 98       	cbi	0x03, 6	; 3
PORTE |= (1 << PE6); //rising edge
     8d4:	1e 9a       	sbi	0x03, 6	; 3
SPDR = 0x20; //send junk data to read in from SPI
     8d6:	80 e2       	ldi	r24, 0x20	; 32
     8d8:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){} // read data in
     8da:	77 9b       	sbis	0x0e, 7	; 14
     8dc:	fe cf       	rjmp	.-4      	; 0x8da <__vector_15+0x1e8>
raw_encoder_val = SPDR;//save the data
     8de:	8f b1       	in	r24, 0x0f	; 15
     8e0:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <raw_encoder_val>
	
PORTB = 0x70;//disable tristate


read_SPI();		//read in from the SPI
read = process_EN(); 	// decrypt the data from the SPI and determine the encoder movement
     8e4:	0e 94 a5 01 	call	0x34a	; 0x34a <process_EN>
     8e8:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <read+0x1>
     8ec:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <read>
update_EN(read);	// increase the time with the encoder movement 
     8f0:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <read>
     8f4:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <read+0x1>
     8f8:	0e 94 a1 02 	call	0x542	; 0x542 <update_EN>
update_EN_alarm(read);	// increase the alarm_time with the encoder movement
     8fc:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <read>
     900:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <read+0x1>
     904:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <update_EN_alarm>
update_freq(read);
     908:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <read>
     90c:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <read+0x1>
     910:	0e 94 7d 02 	call	0x4fa	; 0x4fa <update_freq>

write_SPI(mode); 	// write to the bar graph
     914:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <mode>
/********************************************************************
 *				write_SPI
 ********************************************************************/
void write_SPI(uint8_t value){

SPDR = value; // take in which mode it is currently on and display it 
     918:	8f b9       	out	0x0f, r24	; 15
	while (bit_is_clear(SPSR,SPIF)) {} //wait till data is sent out
     91a:	77 9b       	sbis	0x0e, 7	; 14
     91c:	fe cf       	rjmp	.-4      	; 0x91a <__vector_15+0x228>
PORTD |= (1 << PD2); //SEND data to bargraph, rising edge
     91e:	92 9a       	sbi	0x12, 2	; 18
PORTD &= ~(1<<PD2); // falling edge
     920:	92 98       	cbi	0x12, 2	; 18
update_freq(read);

write_SPI(mode); 	// write to the bar graph

static uint8_t index = 0;
PORTB = 0x00;
     922:	18 ba       	out	0x18, r1	; 24
		PORTB = index << 4; // within 4 digits for the hex value
     924:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <index.2446>
     928:	82 95       	swap	r24
     92a:	80 7f       	andi	r24, 0xF0	; 240
     92c:	88 bb       	out	0x18, r24	; 24
		PORTA = segment_data[index]; //send 7 segment code to LED segments
     92e:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <index.2446>
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	e3 5f       	subi	r30, 0xF3	; 243
     936:	fe 4f       	sbci	r31, 0xFE	; 254
     938:	80 81       	ld	r24, Z
     93a:	8b bb       	out	0x1b, r24	; 27
     93c:	8f e9       	ldi	r24, 0x9F	; 159
     93e:	9f e0       	ldi	r25, 0x0F	; 15
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	f1 f7       	brne	.-4      	; 0x940 <__vector_15+0x24e>
     944:	00 c0       	rjmp	.+0      	; 0x946 <__vector_15+0x254>
     946:	00 00       	nop
	//handles decimal point display when alarm is triggered
//	if(alarm){
//		PORTB = 0; // digit 0
//		PORTA = 0x7F; // turn on decimal point
//	}
index++;
     948:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <index.2446>
     94c:	8f 5f       	subi	r24, 0xFF	; 255
if(index == 5){index = 0;}
     94e:	85 30       	cpi	r24, 0x05	; 5
     950:	09 f4       	brne	.+2      	; 0x954 <__vector_15+0x262>
     952:	5f c0       	rjmp	.+190    	; 0xa12 <__vector_15+0x320>
	//handles decimal point display when alarm is triggered
//	if(alarm){
//		PORTB = 0; // digit 0
//		PORTA = 0x7F; // turn on decimal point
//	}
index++;
     954:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <index.2446>
if(index == 5){index = 0;}

//restore the state when leaving the ISR
PORTA = saveA;
     958:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <saveA>
     95c:	8b bb       	out	0x1b, r24	; 27
PORTB = saveB;
     95e:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <saveB>
     962:	88 bb       	out	0x18, r24	; 24

      if(alarm){
     964:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <alarm>
     968:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <alarm+0x1>
     96c:	89 2b       	or	r24, r25
     96e:	19 f0       	breq	.+6      	; 0x976 <__vector_15+0x284>
              PORTB = 0; // digit 0
     970:	18 ba       	out	0x18, r1	; 24
              PORTA = 0x7F; // turn on decimal point
     972:	8f e7       	ldi	r24, 0x7F	; 127
     974:	8b bb       	out	0x1b, r24	; 27
      }


DDRA = 0xFF; 		//set PORTA to all outputs
     976:	8f ef       	ldi	r24, 0xFF	; 255
     978:	8a bb       	out	0x1a, r24	; 26


}//end of ISR Timer0
     97a:	ff 91       	pop	r31
     97c:	ef 91       	pop	r30
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	bf 91       	pop	r27
     984:	af 91       	pop	r26
     986:	9f 91       	pop	r25
     988:	8f 91       	pop	r24
     98a:	7f 91       	pop	r23
     98c:	6f 91       	pop	r22
     98e:	5f 91       	pop	r21
     990:	4f 91       	pop	r20
     992:	3f 91       	pop	r19
     994:	2f 91       	pop	r18
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	df 90       	pop	r13
     9a0:	cf 90       	pop	r12
     9a2:	bf 90       	pop	r11
     9a4:	af 90       	pop	r10
     9a6:	9f 90       	pop	r9
     9a8:	8f 90       	pop	r8
     9aa:	0f 90       	pop	r0
     9ac:	0b be       	out	0x3b, r0	; 59
     9ae:	0f 90       	pop	r0
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	0f 90       	pop	r0
     9b4:	1f 90       	pop	r1
     9b6:	18 95       	reti
if((timer% 128) == 0){ // turn off for half a second 
	segment_data[2] = 0x07; //turn off colon
} 

if((timer% 512) == 0){
	uart_puts(temp_str);		//send a string through the UART
     9b8:	8c ee       	ldi	r24, 0xEC	; 236
     9ba:	92 e0       	ldi	r25, 0x02	; 2
     9bc:	0e 94 b1 0b 	call	0x1762	; 0x1762 <uart_puts>
	uart_putc('\0');		//ADD a null character
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	0e 94 a0 0b 	call	0x1740	; 0x1740 <uart_putc>

if(radio != TRUE){
     9c6:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <radio>
     9ca:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <radio+0x1>
     9ce:	01 97       	sbiw	r24, 0x01	; 1
     9d0:	19 f0       	breq	.+6      	; 0x9d8 <__vector_15+0x2e6>
	segment_data[2] = 0x0C; 
     9d2:	8c e0       	ldi	r24, 0x0C	; 12
     9d4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <segment_data+0x2>
}	//turn on colon
 	seconds+= seconds_holder; 	//increment seconds
     9d8:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <seconds_holder>
     9dc:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <seconds_holder+0x1>
     9e0:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <seconds>
     9e4:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <seconds+0x1>
     9e8:	82 0f       	add	r24, r18
     9ea:	93 1f       	adc	r25, r19
     9ec:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <seconds+0x1>
     9f0:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <seconds>
	snooze_seconds += seconds_holder;//increment seconds of snooze
     9f4:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <seconds_holder>
     9f8:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <seconds_holder+0x1>
     9fc:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <snooze_seconds>
     a00:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <snooze_seconds+0x1>
     a04:	82 0f       	add	r24, r18
     a06:	93 1f       	adc	r25, r19
     a08:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <snooze_seconds+0x1>
     a0c:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <snooze_seconds>
     a10:	b0 ce       	rjmp	.-672    	; 0x772 <__vector_15+0x80>
//	if(alarm){
//		PORTB = 0; // digit 0
//		PORTA = 0x7F; // turn on decimal point
//	}
index++;
if(index == 5){index = 0;}
     a12:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <index.2446>
     a16:	a0 cf       	rjmp	.-192    	; 0x958 <__vector_15+0x266>

00000a18 <disable_alarm>:

/********************************************************************
 *				disable_alarm
 *******************************************************************/
void disable_alarm(void){
		sound = FALSE;
     a18:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <sound+0x1>
     a1c:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <sound>
		alarm = FALSE;	//alarm is off
     a20:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <alarm+0x1>
     a24:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <alarm>
		dp = FALSE;	//turn off the decimal point
     a28:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <dp+0x1>
     a2c:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <dp>
		tone = FALSE;	//turn off the tone
     a30:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <tone+0x1>
     a34:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <tone>
		snooze_time = FALSE; //disable snooze
     a38:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <snooze_time+0x1>
     a3c:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <snooze_time>
		int a = strlen(alarm_str);//get the length of the alarm string
     a40:	e8 e3       	ldi	r30, 0x38	; 56
     a42:	f1 e0       	ldi	r31, 0x01	; 1
     a44:	01 90       	ld	r0, Z+
     a46:	00 20       	and	r0, r0
     a48:	e9 f7       	brne	.-6      	; 0xa44 <disable_alarm+0x2c>
     a4a:	31 97       	sbiw	r30, 0x01	; 1
     a4c:	af 01       	movw	r20, r30
     a4e:	48 53       	subi	r20, 0x38	; 56
     a50:	51 40       	sbci	r21, 0x01	; 1
		//clear alarm string
		for(i = 0; i < a; i++ ){
     a52:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <i+0x1>
     a56:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <i>
     a5a:	41 15       	cp	r20, r1
     a5c:	51 05       	cpc	r21, r1
     a5e:	71 f0       	breq	.+28     	; 0xa7c <disable_alarm+0x64>
     a60:	e3 e2       	ldi	r30, 0x23	; 35
     a62:	f1 e0       	ldi	r31, 0x01	; 1
     a64:	9a 01       	movw	r18, r20
     a66:	2d 5d       	subi	r18, 0xDD	; 221
     a68:	3e 4f       	sbci	r19, 0xFE	; 254
			lcd_temp_array[11 + i] = ' ';
     a6a:	80 e2       	ldi	r24, 0x20	; 32
     a6c:	81 93       	st	Z+, r24
		dp = FALSE;	//turn off the decimal point
		tone = FALSE;	//turn off the tone
		snooze_time = FALSE; //disable snooze
		int a = strlen(alarm_str);//get the length of the alarm string
		//clear alarm string
		for(i = 0; i < a; i++ ){
     a6e:	e2 17       	cp	r30, r18
     a70:	f3 07       	cpc	r31, r19
     a72:	e1 f7       	brne	.-8      	; 0xa6c <disable_alarm+0x54>
     a74:	50 93 e2 02 	sts	0x02E2, r21	; 0x8002e2 <i+0x1>
     a78:	40 93 e1 02 	sts	0x02E1, r20	; 0x8002e1 <i>
			lcd_temp_array[11 + i] = ' ';
		}
		refresh_lcd(lcd_temp_array);//update the lcd display
     a7c:	88 e1       	ldi	r24, 0x18	; 24
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <refresh_lcd>
		OCR3A = 0;	// clear the compare
     a84:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     a88:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		TCCR1B &= ~(1 << CS10);	//clear the clock
     a8c:	8e b5       	in	r24, 0x2e	; 46
     a8e:	8e 7f       	andi	r24, 0xFE	; 254
     a90:	8e bd       	out	0x2e, r24	; 46
		mode &= ~(1 << 5); // set conditions only once so clear the bit
     a92:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <mode>
     a96:	8f 7d       	andi	r24, 0xDF	; 223
     a98:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <mode>
}
     a9c:	08 95       	ret

00000a9e <freq_bound>:
void freq_bound(void){
//might need to put them in 32 bit array and connect them. They are incrementing by 20? 


//88.1
if(current_fm_freq > 10800){current_fm_freq = 8810;}; //0x2706, arg2, arg3; 99.9Mhz, 200khz steps
     a9e:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <current_fm_freq>
     aa2:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <current_fm_freq+0x1>
     aa6:	81 33       	cpi	r24, 0x31	; 49
     aa8:	2a e2       	ldi	r18, 0x2A	; 42
     aaa:	92 07       	cpc	r25, r18
     aac:	38 f0       	brcs	.+14     	; 0xabc <freq_bound+0x1e>
     aae:	8a e6       	ldi	r24, 0x6A	; 106
     ab0:	92 e2       	ldi	r25, 0x22	; 34
     ab2:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <current_fm_freq+0x1>
     ab6:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <current_fm_freq>
     aba:	08 95       	ret

//108.1
if(current_fm_freq < 8800){current_fm_freq = 10810;}
     abc:	80 36       	cpi	r24, 0x60	; 96
     abe:	92 42       	sbci	r25, 0x22	; 34
     ac0:	30 f4       	brcc	.+12     	; 0xace <freq_bound+0x30>
     ac2:	8a e3       	ldi	r24, 0x3A	; 58
     ac4:	9a e2       	ldi	r25, 0x2A	; 42
     ac6:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <current_fm_freq+0x1>
     aca:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <current_fm_freq>
     ace:	08 95       	ret

00000ad0 <alarm_bound_12>:
 *				alarm_bound_12
 * used to bound the alarm with respect to the time setting when setting
 * the alarm with the encoders.
 ********************************************************************/
void alarm_bound_12(void){
int hours = alarm_time/100;  // convert integer time into hours
     ad0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <alarm_time>
     ad4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <alarm_time+0x1>
     ad8:	64 e6       	ldi	r22, 0x64	; 100
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__divmodhi4>
int minutes = alarm_time - (hours*100); // convert the integer time into minutes
     ae0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <alarm_time>
     ae4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <alarm_time+0x1>
     ae8:	4c e9       	ldi	r20, 0x9C	; 156
     aea:	46 03       	mulsu	r20, r22
     aec:	90 01       	movw	r18, r0
     aee:	47 9f       	mul	r20, r23
     af0:	30 0d       	add	r19, r0
     af2:	11 24       	eor	r1, r1
     af4:	82 0f       	add	r24, r18
     af6:	93 1f       	adc	r25, r19

if(minutes == 99){alarm_time -= 40;alarm_time+=100;} // decrement hours; ex (200 -> 159)
     af8:	83 36       	cpi	r24, 0x63	; 99
     afa:	91 05       	cpc	r25, r1
     afc:	09 f4       	brne	.+2      	; 0xb00 <alarm_bound_12+0x30>
     afe:	40 c0       	rjmp	.+128    	; 0xb80 <alarm_bound_12+0xb0>

//bound the minutes from 0 to 60
if (minutes == 60){
     b00:	8c 33       	cpi	r24, 0x3C	; 60
     b02:	91 05       	cpc	r25, r1
     b04:	41 f1       	breq	.+80     	; 0xb56 <alarm_bound_12+0x86>
}


// bound the minutes from 60 to 0
//bound the hours from 12 to 1 and 1 to 12
if(hours > 12){alarm_time = 100;alarm_time += minutes;}
     b06:	6d 30       	cpi	r22, 0x0D	; 13
     b08:	71 05       	cpc	r23, r1
     b0a:	8c f0       	brlt	.+34     	; 0xb2e <alarm_bound_12+0x5e>
     b0c:	24 e6       	ldi	r18, 0x64	; 100
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <alarm_time+0x1>
     b14:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <alarm_time>
     b18:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <alarm_time>
     b1c:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <alarm_time+0x1>
     b20:	82 0f       	add	r24, r18
     b22:	93 1f       	adc	r25, r19
     b24:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <alarm_time+0x1>
     b28:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <alarm_time>
     b2c:	08 95       	ret
if(hours < 1){alarm_time = 1200;alarm_time += minutes;}
     b2e:	16 16       	cp	r1, r22
     b30:	17 06       	cpc	r1, r23
     b32:	84 f0       	brlt	.+32     	; 0xb54 <alarm_bound_12+0x84>
     b34:	20 eb       	ldi	r18, 0xB0	; 176
     b36:	34 e0       	ldi	r19, 0x04	; 4
     b38:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <alarm_time+0x1>
     b3c:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <alarm_time>
     b40:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <alarm_time>
     b44:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <alarm_time+0x1>
     b48:	82 0f       	add	r24, r18
     b4a:	93 1f       	adc	r25, r19
     b4c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <alarm_time+0x1>
     b50:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <alarm_time>
     b54:	08 95       	ret

if(minutes == 99){alarm_time -= 40;alarm_time+=100;} // decrement hours; ex (200 -> 159)

//bound the minutes from 0 to 60
if (minutes == 60){
	  alarm_time += 40;
     b56:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <alarm_time>
     b5a:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <alarm_time+0x1>
     b5e:	28 5d       	subi	r18, 0xD8	; 216
     b60:	3f 4f       	sbci	r19, 0xFF	; 255
     b62:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <alarm_time+0x1>
     b66:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <alarm_time>
	  alarm_time -= 100;
     b6a:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <alarm_time>
     b6e:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <alarm_time+0x1>
     b72:	24 56       	subi	r18, 0x64	; 100
     b74:	31 09       	sbc	r19, r1
     b76:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <alarm_time+0x1>
     b7a:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <alarm_time>
     b7e:	c3 cf       	rjmp	.-122    	; 0xb06 <alarm_bound_12+0x36>
 ********************************************************************/
void alarm_bound_12(void){
int hours = alarm_time/100;  // convert integer time into hours
int minutes = alarm_time - (hours*100); // convert the integer time into minutes

if(minutes == 99){alarm_time -= 40;alarm_time+=100;} // decrement hours; ex (200 -> 159)
     b80:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <alarm_time>
     b84:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <alarm_time+0x1>
     b88:	28 52       	subi	r18, 0x28	; 40
     b8a:	31 09       	sbc	r19, r1
     b8c:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <alarm_time+0x1>
     b90:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <alarm_time>
     b94:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <alarm_time>
     b98:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <alarm_time+0x1>
     b9c:	2c 59       	subi	r18, 0x9C	; 156
     b9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ba0:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <alarm_time+0x1>
     ba4:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <alarm_time>
     ba8:	ae cf       	rjmp	.-164    	; 0xb06 <alarm_bound_12+0x36>

00000baa <time_bound_12>:
 *				time_bound_12
 * used to bound the correct time when wanting to change the real time 
 * with encoders
 ********************************************************************/
void time_bound_12(void){
int hours = time/100;  // convert integer time into hours
     baa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     bae:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     bb2:	64 e6       	ldi	r22, 0x64	; 100
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__divmodhi4>
int minutes = time - (hours*100); // convert the integer time into minutes
     bba:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     bbe:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     bc2:	4c e9       	ldi	r20, 0x9C	; 156
     bc4:	46 03       	mulsu	r20, r22
     bc6:	90 01       	movw	r18, r0
     bc8:	47 9f       	mul	r20, r23
     bca:	30 0d       	add	r19, r0
     bcc:	11 24       	eor	r1, r1
     bce:	82 0f       	add	r24, r18
     bd0:	93 1f       	adc	r25, r19

if(minutes == 99){
     bd2:	83 36       	cpi	r24, 0x63	; 99
     bd4:	91 05       	cpc	r25, r1
     bd6:	09 f4       	brne	.+2      	; 0xbda <time_bound_12+0x30>
     bd8:	40 c0       	rjmp	.+128    	; 0xc5a <time_bound_12+0xb0>
	time -= 40;
	if(time == 59){time +=1200;} //FIX THE 100 TO 1259 BUG
	else{time+=100;}
} // decrement hours; ex (200 -> 159)
//bound the minutes from 0 to 60
if (minutes == 60){
     bda:	8c 33       	cpi	r24, 0x3C	; 60
     bdc:	91 05       	cpc	r25, r1
     bde:	41 f1       	breq	.+80     	; 0xc30 <time_bound_12+0x86>

// bound the minutes from 60 to 0

//bound the hours from 12 to 1 and 1 to 12

if(hours > 12){time = 100;time += minutes;}
     be0:	6d 30       	cpi	r22, 0x0D	; 13
     be2:	71 05       	cpc	r23, r1
     be4:	8c f0       	brlt	.+34     	; 0xc08 <time_bound_12+0x5e>
     be6:	24 e6       	ldi	r18, 0x64	; 100
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <time+0x1>
     bee:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <time>
     bf2:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     bf6:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     bfa:	82 0f       	add	r24, r18
     bfc:	93 1f       	adc	r25, r19
     bfe:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     c02:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
     c06:	08 95       	ret
if(hours < 1){time = 1200;time += minutes;}
     c08:	16 16       	cp	r1, r22
     c0a:	17 06       	cpc	r1, r23
     c0c:	84 f0       	brlt	.+32     	; 0xc2e <time_bound_12+0x84>
     c0e:	20 eb       	ldi	r18, 0xB0	; 176
     c10:	34 e0       	ldi	r19, 0x04	; 4
     c12:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <time+0x1>
     c16:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <time>
     c1a:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     c1e:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     c22:	82 0f       	add	r24, r18
     c24:	93 1f       	adc	r25, r19
     c26:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     c2a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
     c2e:	08 95       	ret
	if(time == 59){time +=1200;} //FIX THE 100 TO 1259 BUG
	else{time+=100;}
} // decrement hours; ex (200 -> 159)
//bound the minutes from 0 to 60
if (minutes == 60){
	  time += 40;
     c30:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     c34:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     c38:	28 5d       	subi	r18, 0xD8	; 216
     c3a:	3f 4f       	sbci	r19, 0xFF	; 255
     c3c:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <time+0x1>
     c40:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <time>
	  time -= 100;
     c44:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     c48:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     c4c:	24 56       	subi	r18, 0x64	; 100
     c4e:	31 09       	sbc	r19, r1
     c50:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <time+0x1>
     c54:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <time>
     c58:	c3 cf       	rjmp	.-122    	; 0xbe0 <time_bound_12+0x36>
void time_bound_12(void){
int hours = time/100;  // convert integer time into hours
int minutes = time - (hours*100); // convert the integer time into minutes

if(minutes == 99){
	time -= 40;
     c5a:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     c5e:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     c62:	28 52       	subi	r18, 0x28	; 40
     c64:	31 09       	sbc	r19, r1
     c66:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <time+0x1>
     c6a:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <time>
	if(time == 59){time +=1200;} //FIX THE 100 TO 1259 BUG
     c6e:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     c72:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     c76:	2b 33       	cpi	r18, 0x3B	; 59
     c78:	31 05       	cpc	r19, r1
     c7a:	59 f0       	breq	.+22     	; 0xc92 <time_bound_12+0xe8>
	else{time+=100;}
     c7c:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     c80:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     c84:	2c 59       	subi	r18, 0x9C	; 156
     c86:	3f 4f       	sbci	r19, 0xFF	; 255
     c88:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <time+0x1>
     c8c:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <time>
     c90:	a7 cf       	rjmp	.-178    	; 0xbe0 <time_bound_12+0x36>
int hours = time/100;  // convert integer time into hours
int minutes = time - (hours*100); // convert the integer time into minutes

if(minutes == 99){
	time -= 40;
	if(time == 59){time +=1200;} //FIX THE 100 TO 1259 BUG
     c92:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     c96:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     c9a:	20 55       	subi	r18, 0x50	; 80
     c9c:	3b 4f       	sbci	r19, 0xFB	; 251
     c9e:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <time+0x1>
     ca2:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <time>
     ca6:	9c cf       	rjmp	.-200    	; 0xbe0 <time_bound_12+0x36>

00000ca8 <time_tracker_12>:


/***************************************************************
/				time_tracker_12
****************************************************************/
void time_tracker_12(void){
     ca8:	1f 93       	push	r17
int hours = time/100;
     caa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     cae:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     cb2:	64 e6       	ldi	r22, 0x64	; 100
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__divmodhi4>
     cba:	9b 01       	movw	r18, r22
int minutes = time - (hours*100);
     cbc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     cc0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     cc4:	1c e9       	ldi	r17, 0x9C	; 156
     cc6:	16 03       	mulsu	r17, r22
     cc8:	a0 01       	movw	r20, r0
     cca:	17 9f       	mul	r17, r23
     ccc:	50 0d       	add	r21, r0
     cce:	11 24       	eor	r1, r1
     cd0:	84 0f       	add	r24, r20
     cd2:	95 1f       	adc	r25, r21
	//if 60 seconds has been reached then increase the minutes by one
	if(seconds > 59){
     cd4:	40 91 81 02 	lds	r20, 0x0281	; 0x800281 <seconds>
     cd8:	50 91 82 02 	lds	r21, 0x0282	; 0x800282 <seconds+0x1>
     cdc:	4c 33       	cpi	r20, 0x3C	; 60
     cde:	51 05       	cpc	r21, r1
     ce0:	74 f0       	brlt	.+28     	; 0xcfe <time_tracker_12+0x56>
		time++; // increment minutes 
     ce2:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <time>
     ce6:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <time+0x1>
     cea:	4f 5f       	subi	r20, 0xFF	; 255
     cec:	5f 4f       	sbci	r21, 0xFF	; 255
     cee:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <time+0x1>
     cf2:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <time>
		seconds = 0; // reset seconds
     cf6:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <seconds+0x1>
     cfa:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <seconds>
	}
		//increment hours if 60 minutes has passed
	if(minutes > 59){ 
     cfe:	cc 97       	sbiw	r24, 0x3c	; 60
     d00:	64 f0       	brlt	.+24     	; 0xd1a <time_tracker_12+0x72>
	time += 40; // increment the time ex (160 -> 200)
     d02:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     d06:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     d0a:	88 96       	adiw	r24, 0x28	; 40
     d0c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     d10:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
	hours++;
     d14:	9b 01       	movw	r18, r22
     d16:	2f 5f       	subi	r18, 0xFF	; 255
     d18:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	
	if(hours > 12){ time = 100;} // reset hours to 1 o'clock
     d1a:	2d 30       	cpi	r18, 0x0D	; 13
     d1c:	31 05       	cpc	r19, r1
     d1e:	34 f0       	brlt	.+12     	; 0xd2c <time_tracker_12+0x84>
     d20:	84 e6       	ldi	r24, 0x64	; 100
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     d28:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
}
     d2c:	1f 91       	pop	r17
     d2e:	08 95       	ret

00000d30 <digit_display>:
 *				digit_display
 **********************************************************************/
void digit_display(void){
int index;

PORTB = 0x00;
     d30:	18 ba       	out	0x18, r1	; 24
     d32:	ed e0       	ldi	r30, 0x0D	; 13
     d34:	f1 e0       	ldi	r31, 0x01	; 1

	for(index = 0; index < 5; index++){
		PORTA = segment_data[index]; //send 7 segment code to LED segments
     d36:	81 91       	ld	r24, Z+
     d38:	8b bb       	out	0x1b, r24	; 27
     d3a:	8f e6       	ldi	r24, 0x6F	; 111
     d3c:	97 e1       	ldi	r25, 0x17	; 23
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	f1 f7       	brne	.-4      	; 0xd3e <digit_display+0xe>
     d42:	00 c0       	rjmp	.+0      	; 0xd44 <digit_display+0x14>
     d44:	00 00       	nop
		_delay_ms(1.5);
		PORTB += 0x10; // within 4 digits for the hex value
     d46:	88 b3       	in	r24, 0x18	; 24
     d48:	80 5f       	subi	r24, 0xF0	; 240
     d4a:	88 bb       	out	0x18, r24	; 24
void digit_display(void){
int index;

PORTB = 0x00;

	for(index = 0; index < 5; index++){
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	e2 31       	cpi	r30, 0x12	; 18
     d50:	f9 07       	cpc	r31, r25
     d52:	89 f7       	brne	.-30     	; 0xd36 <digit_display+0x6>
		PORTA = segment_data[index]; //send 7 segment code to LED segments
		_delay_ms(1.5);
		PORTB += 0x10; // within 4 digits for the hex value
	}
}
     d54:	08 95       	ret

00000d56 <spi_init>:

/**********************************************************************
 *				spi_init
 **********************************************************************/
void spi_init(void){
DDRB |= ( (1 << PB2) | ( 1<< PB1) | (1<<PB0) ); //mosi and serial clock
     d56:	87 b3       	in	r24, 0x17	; 23
     d58:	87 60       	ori	r24, 0x07	; 7
     d5a:	87 bb       	out	0x17, r24	; 23
SPCR |= ( (1 << MSTR) | (1 << SPE) ); //master mode, SPI enabled, clk low on idle, leading edge sample
     d5c:	8d b1       	in	r24, 0x0d	; 13
     d5e:	80 65       	ori	r24, 0x50	; 80
     d60:	8d b9       	out	0x0d, r24	; 13
SPSR |= 1 << SPI2X;
     d62:	70 9a       	sbi	0x0e, 0	; 14

DDRF |= 0x08; //lcd strobe bit
     d64:	e1 e6       	ldi	r30, 0x61	; 97
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	88 60       	ori	r24, 0x08	; 8
     d6c:	80 83       	st	Z, r24
DDRB |= 0xF0; // set PORTB 4-7 bits as outputs
     d6e:	87 b3       	in	r24, 0x17	; 23
     d70:	80 6f       	ori	r24, 0xF0	; 240
     d72:	87 bb       	out	0x17, r24	; 23
DDRA = 0x03; // set PORTA 6-7 bits as inputs
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	8a bb       	out	0x1a, r24	; 26
DDRD = (1 << PD2); // set PD2 as output
     d78:	84 e0       	ldi	r24, 0x04	; 4
     d7a:	81 bb       	out	0x11, r24	; 17
     d7c:	08 95       	ret

00000d7e <volume_init>:
/**********************************************************************
 *				volume_init
 **********************************************************************/
void volume_init(void){
//volume pin is PE3
TCCR3A = (1 << COM3A1 | (1 << WGM31) ); //normal operation w/ OC3A is disconnected
     d7e:	82 e8       	ldi	r24, 0x82	; 130
     d80:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
TCCR3B |= (  (1 << CS30) | ( 1 << WGM32) | (1 << WGM33) ); //fast pwm 
     d84:	ea e8       	ldi	r30, 0x8A	; 138
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	89 61       	ori	r24, 0x19	; 25
     d8c:	80 83       	st	Z, r24
ICR3 = 10; // Set overflow top ; controls frequency 
     d8e:	8a e0       	ldi	r24, 0x0A	; 10
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     d96:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
OCR3A = 0; // set compare match; duty cycle
     d9a:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     d9e:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     da2:	08 95       	ret

00000da4 <tone_init>:

/**********************************************************************
 *				tone_init
 **********************************************************************/
void tone_init(void){
DDRC = 0xFF; // set all of PORTC as outputs
     da4:	8f ef       	ldi	r24, 0xFF	; 255
     da6:	84 bb       	out	0x14, r24	; 20
TCCR1A = 0x00; // normal operation w/ OC1A is disconnected
     da8:	1f bc       	out	0x2f, r1	; 47
TIMSK |= 1 << OCIE1A; //output compare enable for timercounter1A
     daa:	87 b7       	in	r24, 0x37	; 55
     dac:	80 61       	ori	r24, 0x10	; 16
     dae:	87 bf       	out	0x37, r24	; 55
//OCR1A = 3999; // 4kHz and triggers ISR
OCR1A = 2000;
     db0:	80 ed       	ldi	r24, 0xD0	; 208
     db2:	97 e0       	ldi	r25, 0x07	; 7
     db4:	9b bd       	out	0x2b, r25	; 43
     db6:	8a bd       	out	0x2a, r24	; 42
//OCR1A = 18517;
//clk is not set
TCCR1B |= (1 << WGM12); // CTC mode, clear with OCR and no prescaling
     db8:	8e b5       	in	r24, 0x2e	; 46
     dba:	88 60       	ori	r24, 0x08	; 8
     dbc:	8e bd       	out	0x2e, r24	; 46
     dbe:	08 95       	ret

00000dc0 <clock_init>:

/**********************************************************************
 *				clock_init
 **********************************************************************/
void clock_init(void){
ASSR   |=  1<<AS0; //ext osc TOSC in 32kHz 
     dc0:	80 b7       	in	r24, 0x30	; 48
     dc2:	88 60       	ori	r24, 0x08	; 8
     dc4:	80 bf       	out	0x30, r24	; 48
TIMSK |= 1 << OCIE0; //interrupt flag on compare register 
     dc6:	87 b7       	in	r24, 0x37	; 55
     dc8:	82 60       	ori	r24, 0x02	; 2
     dca:	87 bf       	out	0x37, r24	; 55
TCCR0 |= ((1 << WGM01) | (1 << CS00)); //CTC mode, with clk/no pre-scaling
     dcc:	83 b7       	in	r24, 0x33	; 51
     dce:	89 60       	ori	r24, 0x09	; 9
     dd0:	83 bf       	out	0x33, r24	; 51
OCR0 = 63; // Set top 
     dd2:	8f e3       	ldi	r24, 0x3F	; 63
     dd4:	81 bf       	out	0x31, r24	; 49
     dd6:	08 95       	ret

00000dd8 <dimming_init>:

/**********************************************************************
 *				dimming_init
 **********************************************************************/
void dimming_init(void){
TCCR2 |= (1 << WGM21) | ( 1 << WGM20) | (1 << COM21) | ( 1 << CS20); // no prescale, clear on OC2 match, fast pwm mode
     dd8:	85 b5       	in	r24, 0x25	; 37
     dda:	89 66       	ori	r24, 0x69	; 105
     ddc:	85 bd       	out	0x25, r24	; 37
TIMSK |= (1 << OCIE2); // Compare match interrupt enable timer/counter0
     dde:	87 b7       	in	r24, 0x37	; 55
     de0:	80 68       	ori	r24, 0x80	; 128
     de2:	87 bf       	out	0x37, r24	; 55
TCNT2 = 0; //set count at 0
     de4:	14 bc       	out	0x24, r1	; 36
     de6:	08 95       	ret

00000de8 <ADC_init>:

/**********************************************************************
 *				ADC_init
 **********************************************************************/
void ADC_init(void){
DDRF  &= ~(_BV(DDF7)); //make port F bit 7 the ADC input  
     de8:	e1 e6       	ldi	r30, 0x61	; 97
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8f 77       	andi	r24, 0x7F	; 127
     df0:	80 83       	st	Z, r24
PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
     df2:	e2 e6       	ldi	r30, 0x62	; 98
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	8f 77       	andi	r24, 0x7F	; 127
     dfa:	80 83       	st	Z, r24
	
ADMUX = (1 << REFS0) | (1 << ADLAR) | 0x07; // reference to AVCC(5v), left adjusted (only reading  8bit), and channel 7
     dfc:	87 e6       	ldi	r24, 0x67	; 103
     dfe:	87 b9       	out	0x07, r24	; 7
//ADC enabled, single conversion, division factor is 128
ADCSRA = (1 << ADEN) | (1 << ADPS2) | ( 1 << ADPS1) | ( 1 << ADPS0) ; 
     e00:	87 e8       	ldi	r24, 0x87	; 135
     e02:	86 b9       	out	0x06, r24	; 6
     e04:	08 95       	ret

00000e06 <radio_init>:
 *				radio_init
 **********************************************************************/
void radio_init(void){

// external interrupts configuration
EICRB |= (1 << ISC71) | (1 << ISC70); //set on rising edge for external interrupt
     e06:	8a b7       	in	r24, 0x3a	; 58
     e08:	80 6c       	ori	r24, 0xC0	; 192
     e0a:	8a bf       	out	0x3a, r24	; 58
EIMSK |= 1 << INT7;//enable mask for bit 7
     e0c:	89 b7       	in	r24, 0x39	; 57
     e0e:	80 68       	ori	r24, 0x80	; 128
     e10:	89 bf       	out	0x39, r24	; 57
//   (^ edge int from radio) bit 7--| | | | | | | |--bit 0 USART0 RX
//(shift/load_n for 74HC165) bit 6----| | | | | |----bit 1 USART0 TX
//                           bit 5------| | | |------bit 2 (radio reset, active high)
//                  (unused) bit 4--------| |--------bit 3 (TCNT3 PWM output for volume control)

DDRE  |= 0x04; //Port E bit 2 is active high reset for radio 
     e12:	12 9a       	sbi	0x02, 2	; 2
DDRE  |= 0x40; //Port E bit 6 is shift/load_n for encoder 74HC165
     e14:	16 9a       	sbi	0x02, 6	; 2
DDRE  |= 0x08; //Port E bit 3 is TCNT3 PWM output for volume
     e16:	13 9a       	sbi	0x02, 3	; 2


PORTE |= 0x04; //radio reset is on at powerup (active high), PE2
     e18:	1a 9a       	sbi	0x03, 2	; 3
PORTE |= 0x40; //pulse low to load switch values, else its in shift mode, PE7
     e1a:	1e 9a       	sbi	0x03, 6	; 3
     e1c:	08 95       	ret

00000e1e <segsum>:

/**********************************************************************
 *				segsum
 *Takes in an 16-bit value and display it on the LED screen 
 *********************************************************************/
void segsum(uint16_t sum) {
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	ac 01       	movw	r20, r24
int digit_index = 0;
int temp = 0;
int i;

//display 0 if the value is 0
if(sum == 0){segment_data[digit_index] = dec_to_7seg[0];};
     e24:	00 97       	sbiw	r24, 0x00	; 0
     e26:	91 f4       	brne	.+36     	; 0xe4c <segsum+0x2e>
     e28:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e2c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <segment_data>
     e30:	e0 e0       	ldi	r30, 0x00	; 0
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__DATA_REGION_ORIGIN__+0xa>
     e38:	e3 5f       	subi	r30, 0xF3	; 243
     e3a:	fe 4f       	sbci	r31, 0xFE	; 254
        //segment_data[2] = dec_to_7seg[11]; //replace the colon with a blank colon

//need to turn off the rest of the digits
	if (digit_index < 5) //if there are less digits than segment numbers
	{
        	for (i = digit_index; i < 5; i++){segment_data[i] = dec_to_7seg[10];} //blank them out
     e3c:	81 93       	st	Z+, r24
     e3e:	31 e0       	ldi	r19, 0x01	; 1
     e40:	e2 31       	cpi	r30, 0x12	; 18
     e42:	f3 07       	cpc	r31, r19
     e44:	d9 f7       	brne	.-10     	; 0xe3c <segsum+0x1e>
	}
}
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	08 95       	ret

//display 0 if the value is 0
if(sum == 0){segment_data[digit_index] = dec_to_7seg[0];};

        while(sum > 0){
                temp = sum % 10; // isolate to a single digit
     e4c:	9c 01       	movw	r18, r24
     e4e:	ad ec       	ldi	r26, 0xCD	; 205
     e50:	bc ec       	ldi	r27, 0xCC	; 204
     e52:	0e 94 34 13 	call	0x2668	; 0x2668 <__umulhisi3>
     e56:	96 95       	lsr	r25
     e58:	87 95       	ror	r24
     e5a:	96 95       	lsr	r25
     e5c:	87 95       	ror	r24
     e5e:	96 95       	lsr	r25
     e60:	87 95       	ror	r24
     e62:	9c 01       	movw	r18, r24
     e64:	22 0f       	add	r18, r18
     e66:	33 1f       	adc	r19, r19
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	82 0f       	add	r24, r18
     e76:	93 1f       	adc	r25, r19
     e78:	9a 01       	movw	r18, r20
     e7a:	28 1b       	sub	r18, r24
     e7c:	39 0b       	sbc	r19, r25
     e7e:	c9 01       	movw	r24, r18
     e80:	e0 e0       	ldi	r30, 0x00	; 0
     e82:	f0 e0       	ldi	r31, 0x00	; 0
                if(digit_index == 2){digit_index++;};
                segment_data[digit_index] = dec_to_7seg[temp]; //use the digit to store the hexidecimal value to seg array
     e84:	df 01       	movw	r26, r30
     e86:	a3 5f       	subi	r26, 0xF3	; 243
     e88:	be 4f       	sbci	r27, 0xFE	; 254
     e8a:	ec 01       	movw	r28, r24
     e8c:	c0 50       	subi	r28, 0x00	; 0
     e8e:	df 4f       	sbci	r29, 0xFF	; 255
     e90:	88 81       	ld	r24, Y
     e92:	8c 93       	st	X, r24
                sum = sum/10; // continue to the next digit
     e94:	9a 01       	movw	r18, r20
     e96:	ad ec       	ldi	r26, 0xCD	; 205
     e98:	bc ec       	ldi	r27, 0xCC	; 204
     e9a:	0e 94 34 13 	call	0x2668	; 0x2668 <__umulhisi3>
     e9e:	ac 01       	movw	r20, r24
     ea0:	56 95       	lsr	r21
     ea2:	47 95       	ror	r20
     ea4:	56 95       	lsr	r21
     ea6:	47 95       	ror	r20
     ea8:	56 95       	lsr	r21
     eaa:	47 95       	ror	r20
                digit_index++; // increase the digit index
     eac:	31 96       	adiw	r30, 0x01	; 1
int i;

//display 0 if the value is 0
if(sum == 0){segment_data[digit_index] = dec_to_7seg[0];};

        while(sum > 0){
     eae:	41 15       	cp	r20, r1
     eb0:	51 05       	cpc	r21, r1
     eb2:	01 f1       	breq	.+64     	; 0xef4 <segsum+0xd6>
                temp = sum % 10; // isolate to a single digit
     eb4:	9a 01       	movw	r18, r20
     eb6:	ad ec       	ldi	r26, 0xCD	; 205
     eb8:	bc ec       	ldi	r27, 0xCC	; 204
     eba:	0e 94 34 13 	call	0x2668	; 0x2668 <__umulhisi3>
     ebe:	96 95       	lsr	r25
     ec0:	87 95       	ror	r24
     ec2:	96 95       	lsr	r25
     ec4:	87 95       	ror	r24
     ec6:	96 95       	lsr	r25
     ec8:	87 95       	ror	r24
     eca:	9c 01       	movw	r18, r24
     ecc:	22 0f       	add	r18, r18
     ece:	33 1f       	adc	r19, r19
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	82 0f       	add	r24, r18
     ede:	93 1f       	adc	r25, r19
     ee0:	9a 01       	movw	r18, r20
     ee2:	28 1b       	sub	r18, r24
     ee4:	39 0b       	sbc	r19, r25
     ee6:	c9 01       	movw	r24, r18
                if(digit_index == 2){digit_index++;};
     ee8:	e2 30       	cpi	r30, 0x02	; 2
     eea:	f1 05       	cpc	r31, r1
     eec:	59 f6       	brne	.-106    	; 0xe84 <segsum+0x66>
     eee:	e3 e0       	ldi	r30, 0x03	; 3
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	c8 cf       	rjmp	.-112    	; 0xe84 <segsum+0x66>
                digit_index++; // increase the digit index
        }
        //segment_data[2] = dec_to_7seg[11]; //replace the colon with a blank colon

//need to turn off the rest of the digits
	if (digit_index < 5) //if there are less digits than segment numbers
     ef4:	e5 30       	cpi	r30, 0x05	; 5
     ef6:	f1 05       	cpc	r31, r1
     ef8:	0c f4       	brge	.+2      	; 0xefc <segsum+0xde>
     efa:	9c cf       	rjmp	.-200    	; 0xe34 <segsum+0x16>
	{
        	for (i = digit_index; i < 5; i++){segment_data[i] = dec_to_7seg[10];} //blank them out
	}
}
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	08 95       	ret

00000f02 <temp_display>:

/**********************************************************************
 *                              temp_display
 *********************************************************************/
void temp_display(void){
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29

 //display temperature locally
for(i = 0; i < strlen(temp_str); i++ ){
     f06:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <i+0x1>
     f0a:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <i>
     f0e:	4c ee       	ldi	r20, 0xEC	; 236
     f10:	52 e0       	ldi	r21, 0x02	; 2
     f12:	ea 01       	movw	r28, r20
     f14:	ae e1       	ldi	r26, 0x1E	; 30
     f16:	b1 e0       	ldi	r27, 0x01	; 1
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	06 c0       	rjmp	.+12     	; 0xf2a <temp_display+0x28>
	lcd_temp_array[6 + i] = temp_str[i];//insert the temperature characters to the LCD
     f1e:	29 91       	ld	r18, Y+
     f20:	2d 93       	st	X+, r18
 *                              temp_display
 *********************************************************************/
void temp_display(void){

 //display temperature locally
for(i = 0; i < strlen(temp_str); i++ ){
     f22:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <i+0x1>
     f26:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <i>
     f2a:	9c 01       	movw	r18, r24
     f2c:	fa 01       	movw	r30, r20
     f2e:	01 90       	ld	r0, Z+
     f30:	00 20       	and	r0, r0
     f32:	e9 f7       	brne	.-6      	; 0xf2e <temp_display+0x2c>
     f34:	31 97       	sbiw	r30, 0x01	; 1
     f36:	ec 5e       	subi	r30, 0xEC	; 236
     f38:	f2 40       	sbci	r31, 0x02	; 2
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	2e 17       	cp	r18, r30
     f3e:	3f 07       	cpc	r19, r31
     f40:	70 f3       	brcs	.-36     	; 0xf1e <temp_display+0x1c>
	lcd_temp_array[6 + i] = temp_str[i];//insert the temperature characters to the LCD

}

//populate the lcd array to display the new temperature everyone one second 
if(rcv_rdy == 1){
     f42:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <rcv_rdy>
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	19 f0       	breq	.+6      	; 0xf50 <temp_display+0x4e>
	}
	rcv_rdy = 0;
}


}
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	08 95       	ret
}

//populate the lcd array to display the new temperature everyone one second 
if(rcv_rdy == 1){
	//display temperature remotely 
	for(i = 0; i < strlen(uart_buf); i++ ){
     f50:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <i+0x1>
     f54:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <i>
     f58:	40 ed       	ldi	r20, 0xD0	; 208
     f5a:	52 e0       	ldi	r21, 0x02	; 2
     f5c:	ea 01       	movw	r28, r20
     f5e:	af e2       	ldi	r26, 0x2F	; 47
     f60:	b1 e0       	ldi	r27, 0x01	; 1
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	07 c0       	rjmp	.+14     	; 0xf76 <temp_display+0x74>
		lcd_temp_array[23 + i] = uart_buf[i]; 
     f68:	89 91       	ld	r24, Y+
     f6a:	8d 93       	st	X+, r24
}

//populate the lcd array to display the new temperature everyone one second 
if(rcv_rdy == 1){
	//display temperature remotely 
	for(i = 0; i < strlen(uart_buf); i++ ){
     f6c:	30 93 e2 02 	sts	0x02E2, r19	; 0x8002e2 <i+0x1>
     f70:	20 93 e1 02 	sts	0x02E1, r18	; 0x8002e1 <i>
     f74:	c9 01       	movw	r24, r18
     f76:	fa 01       	movw	r30, r20
     f78:	01 90       	ld	r0, Z+
     f7a:	00 20       	and	r0, r0
     f7c:	e9 f7       	brne	.-6      	; 0xf78 <temp_display+0x76>
     f7e:	31 97       	sbiw	r30, 0x01	; 1
     f80:	e0 5d       	subi	r30, 0xD0	; 208
     f82:	f2 40       	sbci	r31, 0x02	; 2
     f84:	9c 01       	movw	r18, r24
     f86:	2f 5f       	subi	r18, 0xFF	; 255
     f88:	3f 4f       	sbci	r19, 0xFF	; 255
     f8a:	8e 17       	cp	r24, r30
     f8c:	9f 07       	cpc	r25, r31
     f8e:	60 f3       	brcs	.-40     	; 0xf68 <temp_display+0x66>
		lcd_temp_array[23 + i] = uart_buf[i]; 
	}
	rcv_rdy = 0;
     f90:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <rcv_rdy>
}


}
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	08 95       	ret

00000f9a <temp_sens>:
 *communication to the temperature sensor through TWI 
 *********************************************************************/
void temp_sens(void){
uint16_t lm73_temp;  //a place to assemble the temperature from the lm73
//temperature sensor TWI communications
 twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2) ; //read temperature data from LM73 (2 bytes) 
     f9a:	42 e0       	ldi	r20, 0x02	; 2
     f9c:	69 ed       	ldi	r22, 0xD9	; 217
     f9e:	73 e0       	ldi	r23, 0x03	; 3
     fa0:	80 e9       	ldi	r24, 0x90	; 144
     fa2:	0e 94 bf 0c 	call	0x197e	; 0x197e <twi_start_rd>
     fa6:	8f e3       	ldi	r24, 0x3F	; 63
     fa8:	9f e1       	ldi	r25, 0x1F	; 31
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	f1 f7       	brne	.-4      	; 0xfaa <temp_sens+0x10>
     fae:	00 c0       	rjmp	.+0      	; 0xfb0 <temp_sens+0x16>
     fb0:	00 00       	nop
     fb2:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <lm73_rd_buf>
     fb6:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <lm73_rd_buf+0x1>
     fba:	98 27       	eor	r25, r24
     fbc:	89 27       	eor	r24, r25
     fbe:	98 27       	eor	r25, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     fc0:	4a e0       	ldi	r20, 0x0A	; 10
     fc2:	6c ee       	ldi	r22, 0xEC	; 236
     fc4:	72 e0       	ldi	r23, 0x02	; 2
     fc6:	88 0f       	add	r24, r24
     fc8:	89 2f       	mov	r24, r25
     fca:	88 1f       	adc	r24, r24
     fcc:	99 0b       	sbc	r25, r25
     fce:	91 95       	neg	r25
     fd0:	0c 94 79 13 	jmp	0x26f2	; 0x26f2 <__itoa_ncheck>

00000fd4 <set_alarm_sound>:
  lm73_temp = lm73_temp >> 7;
  itoa( lm73_temp, temp_str, 10); //convert to string in array with itoa() from avr-libc                           
}


void set_alarm_sound(void){
     fd4:	ff 92       	push	r15
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	a0 97       	sbiw	r28, 0x20	; 32
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	de bf       	out	0x3e, r29	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	cd bf       	out	0x3d, r28	; 61

//If the user wants to use radio as the alarm 
	if( (sound == TRUE) && (alarm == TRUE) ){ 
     fee:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <sound>
     ff2:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <sound+0x1>
     ff6:	01 97       	sbiw	r24, 0x01	; 1
     ff8:	e1 f0       	breq	.+56     	; 0x1032 <set_alarm_sound+0x5e>
//OCR3A = 0;	// clear the compare
	
	}

//if the user wants the regular alarm tone
if(mode != 0x42){	
     ffa:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <mode>
     ffe:	82 34       	cpi	r24, 0x42	; 66
    1000:	61 f0       	breq	.+24     	; 0x101a <set_alarm_sound+0x46>
	if((sound == FALSE) && (alarm == TRUE)){
    1002:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <sound>
    1006:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <sound+0x1>
    100a:	89 2b       	or	r24, r25
    100c:	31 f4       	brne	.+12     	; 0x101a <set_alarm_sound+0x46>
    100e:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <alarm>
    1012:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <alarm+0x1>
    1016:	01 97       	sbiw	r24, 0x01	; 1
    1018:	a9 f0       	breq	.+42     	; 0x1044 <set_alarm_sound+0x70>
		for(i = 0; i < a; i++ ){
			lcd_temp_array[11 + i] = alarm_str[i];
		}
	}
}
}
    101a:	a0 96       	adiw	r28, 0x20	; 32
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	ff 90       	pop	r15
    1030:	08 95       	ret


void set_alarm_sound(void){

//If the user wants to use radio as the alarm 
	if( (sound == TRUE) && (alarm == TRUE) ){ 
    1032:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <alarm>
    1036:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <alarm+0x1>
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	f1 f1       	breq	.+124    	; 0x10ba <set_alarm_sound+0xe6>
//OCR3A = 0;	// clear the compare
	
	}

//if the user wants the regular alarm tone
if(mode != 0x42){	
    103e:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <mode>
    1042:	eb cf       	rjmp	.-42     	; 0x101a <set_alarm_sound+0x46>
	if((sound == FALSE) && (alarm == TRUE)){
		int a = strlen(alarm_str);
    1044:	68 e3       	ldi	r22, 0x38	; 56
    1046:	71 e0       	ldi	r23, 0x01	; 1
    1048:	fb 01       	movw	r30, r22
    104a:	01 90       	ld	r0, Z+
    104c:	00 20       	and	r0, r0
    104e:	e9 f7       	brne	.-6      	; 0x104a <set_alarm_sound+0x76>
    1050:	31 97       	sbiw	r30, 0x01	; 1
    1052:	8f 01       	movw	r16, r30
    1054:	08 53       	subi	r16, 0x38	; 56
    1056:	11 40       	sbci	r17, 0x01	; 1
		TCCR1B |= (1 << WGM12); // CTC mode, clear with OCR and no prescaling
    1058:	8e b5       	in	r24, 0x2e	; 46
    105a:	88 60       	ori	r24, 0x08	; 8
    105c:	8e bd       	out	0x2e, r24	; 46
    105e:	a3 e2       	ldi	r26, 0x23	; 35
    1060:	b1 e0       	ldi	r27, 0x01	; 1
	
// clear the characters on the top right 
		for(i = 0; i < strlen(alarm_str); i++ ){
    1062:	ad 01       	movw	r20, r26
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	90 e0       	ldi	r25, 0x00	; 0
			lcd_temp_array[11 + i] = ' ';
    1068:	20 e2       	ldi	r18, 0x20	; 32
    106a:	f2 2e       	mov	r15, r18
	if((sound == FALSE) && (alarm == TRUE)){
		int a = strlen(alarm_str);
		TCCR1B |= (1 << WGM12); // CTC mode, clear with OCR and no prescaling
	
// clear the characters on the top right 
		for(i = 0; i < strlen(alarm_str); i++ ){
    106c:	03 c0       	rjmp	.+6      	; 0x1074 <set_alarm_sound+0xa0>
			lcd_temp_array[11 + i] = ' ';
    106e:	fa 01       	movw	r30, r20
    1070:	f1 92       	st	Z+, r15
    1072:	af 01       	movw	r20, r30
    1074:	9c 01       	movw	r18, r24
	if((sound == FALSE) && (alarm == TRUE)){
		int a = strlen(alarm_str);
		TCCR1B |= (1 << WGM12); // CTC mode, clear with OCR and no prescaling
	
// clear the characters on the top right 
		for(i = 0; i < strlen(alarm_str); i++ ){
    1076:	fb 01       	movw	r30, r22
    1078:	01 90       	ld	r0, Z+
    107a:	00 20       	and	r0, r0
    107c:	e9 f7       	brne	.-6      	; 0x1078 <set_alarm_sound+0xa4>
    107e:	31 97       	sbiw	r30, 0x01	; 1
    1080:	e8 53       	subi	r30, 0x38	; 56
    1082:	f1 40       	sbci	r31, 0x01	; 1
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	2e 17       	cp	r18, r30
    1088:	3f 07       	cpc	r19, r31
    108a:	88 f3       	brcs	.-30     	; 0x106e <set_alarm_sound+0x9a>
			lcd_temp_array[11 + i] = ' ';
		}	
		//display alarm on top right
		for(i = 0; i < a; i++ ){
    108c:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <i+0x1>
    1090:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <i>
    1094:	01 15       	cp	r16, r1
    1096:	11 05       	cpc	r17, r1
    1098:	09 f4       	brne	.+2      	; 0x109c <set_alarm_sound+0xc8>
    109a:	bf cf       	rjmp	.-130    	; 0x101a <set_alarm_sound+0x46>
    109c:	e8 e3       	ldi	r30, 0x38	; 56
    109e:	f1 e0       	ldi	r31, 0x01	; 1
    10a0:	98 01       	movw	r18, r16
    10a2:	2d 5d       	subi	r18, 0xDD	; 221
    10a4:	3e 4f       	sbci	r19, 0xFE	; 254
			lcd_temp_array[11 + i] = alarm_str[i];
    10a6:	81 91       	ld	r24, Z+
    10a8:	8d 93       	st	X+, r24
// clear the characters on the top right 
		for(i = 0; i < strlen(alarm_str); i++ ){
			lcd_temp_array[11 + i] = ' ';
		}	
		//display alarm on top right
		for(i = 0; i < a; i++ ){
    10aa:	a2 17       	cp	r26, r18
    10ac:	b3 07       	cpc	r27, r19
    10ae:	d9 f7       	brne	.-10     	; 0x10a6 <set_alarm_sound+0xd2>
    10b0:	10 93 e2 02 	sts	0x02E2, r17	; 0x8002e2 <i+0x1>
    10b4:	00 93 e1 02 	sts	0x02E1, r16	; 0x8002e1 <i>
    10b8:	b0 cf       	rjmp	.-160    	; 0x101a <set_alarm_sound+0x46>

void set_alarm_sound(void){

//If the user wants to use radio as the alarm 
	if( (sound == TRUE) && (alarm == TRUE) ){ 
	char temp[32] = "RADIO";
    10ba:	86 e0       	ldi	r24, 0x06	; 6
    10bc:	e8 e5       	ldi	r30, 0x58	; 88
    10be:	f1 e0       	ldi	r31, 0x01	; 1
    10c0:	9e 01       	movw	r18, r28
    10c2:	2f 5f       	subi	r18, 0xFF	; 255
    10c4:	3f 4f       	sbci	r19, 0xFF	; 255
    10c6:	d9 01       	movw	r26, r18
    10c8:	01 90       	ld	r0, Z+
    10ca:	0d 92       	st	X+, r0
    10cc:	8a 95       	dec	r24
    10ce:	e1 f7       	brne	.-8      	; 0x10c8 <set_alarm_sound+0xf4>
    10d0:	fe 01       	movw	r30, r28
    10d2:	37 96       	adiw	r30, 0x07	; 7
    10d4:	8a e1       	ldi	r24, 0x1A	; 26
    10d6:	df 01       	movw	r26, r30
    10d8:	1d 92       	st	X+, r1
    10da:	8a 95       	dec	r24
    10dc:	e9 f7       	brne	.-6      	; 0x10d8 <set_alarm_sound+0x104>

	//turn off alarm sound
	TCCR1B &= ~(1 << CS10);	//clear the clock
    10de:	8e b5       	in	r24, 0x2e	; 46
    10e0:	8e 7f       	andi	r24, 0xFE	; 254
    10e2:	8e bd       	out	0x2e, r24	; 46
	
	if(mode != 0x02){sound = FALSE;}
    10e4:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <mode>
    10e8:	82 30       	cpi	r24, 0x02	; 2
    10ea:	21 f0       	breq	.+8      	; 0x10f4 <set_alarm_sound+0x120>
    10ec:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <sound+0x1>
    10f0:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <sound>
    10f4:	a3 e2       	ldi	r26, 0x23	; 35
    10f6:	b1 e0       	ldi	r27, 0x01	; 1

		// clear the characters on the top right 
		for(i = 0; i < strlen(alarm_str); i++ ){
    10f8:	8d 01       	movw	r16, r26
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	68 e3       	ldi	r22, 0x38	; 56
    1100:	71 e0       	ldi	r23, 0x01	; 1
			lcd_temp_array[11 + i] = ' ';
    1102:	40 e2       	ldi	r20, 0x20	; 32
    1104:	f4 2e       	mov	r15, r20
	TCCR1B &= ~(1 << CS10);	//clear the clock
	
	if(mode != 0x02){sound = FALSE;}

		// clear the characters on the top right 
		for(i = 0; i < strlen(alarm_str); i++ ){
    1106:	03 c0       	rjmp	.+6      	; 0x110e <__stack+0xf>
			lcd_temp_array[11 + i] = ' ';
    1108:	f8 01       	movw	r30, r16
    110a:	f1 92       	st	Z+, r15
    110c:	8f 01       	movw	r16, r30
    110e:	ac 01       	movw	r20, r24
	TCCR1B &= ~(1 << CS10);	//clear the clock
	
	if(mode != 0x02){sound = FALSE;}

		// clear the characters on the top right 
		for(i = 0; i < strlen(alarm_str); i++ ){
    1110:	fb 01       	movw	r30, r22
    1112:	01 90       	ld	r0, Z+
    1114:	00 20       	and	r0, r0
    1116:	e9 f7       	brne	.-6      	; 0x1112 <__stack+0x13>
    1118:	31 97       	sbiw	r30, 0x01	; 1
    111a:	e8 53       	subi	r30, 0x38	; 56
    111c:	f1 40       	sbci	r31, 0x01	; 1
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	4e 17       	cp	r20, r30
    1122:	5f 07       	cpc	r21, r31
    1124:	88 f3       	brcs	.-30     	; 0x1108 <__stack+0x9>
			lcd_temp_array[11 + i] = ' ';
		}

		//populate the lcd screen on the top right with "RADIO"
		for(i = 0; i < strlen(temp); i++){
    1126:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <i+0x1>
    112a:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <i>
    112e:	a9 01       	movw	r20, r18
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	09 c0       	rjmp	.+18     	; 0x1148 <__stack+0x49>
			lcd_temp_array[11+i] = temp[i];
    1136:	fa 01       	movw	r30, r20
    1138:	61 91       	ld	r22, Z+
    113a:	af 01       	movw	r20, r30
    113c:	6d 93       	st	X+, r22
		for(i = 0; i < strlen(alarm_str); i++ ){
			lcd_temp_array[11 + i] = ' ';
		}

		//populate the lcd screen on the top right with "RADIO"
		for(i = 0; i < strlen(temp); i++){
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <i+0x1>
    1144:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <i>
    1148:	f9 01       	movw	r30, r18
    114a:	01 90       	ld	r0, Z+
    114c:	00 20       	and	r0, r0
    114e:	e9 f7       	brne	.-6      	; 0x114a <__stack+0x4b>
    1150:	31 97       	sbiw	r30, 0x01	; 1
    1152:	e2 1b       	sub	r30, r18
    1154:	f3 0b       	sbc	r31, r19
    1156:	8e 17       	cp	r24, r30
    1158:	9f 07       	cpc	r25, r31
    115a:	68 f3       	brcs	.-38     	; 0x1136 <__stack+0x37>
    115c:	4e cf       	rjmp	.-356    	; 0xffa <set_alarm_sound+0x26>

0000115e <radio_on>:
}
}

void radio_on(void){

if((mode == 0x10)){
    115e:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <mode>
    1162:	80 31       	cpi	r24, 0x10	; 16
    1164:	09 f0       	breq	.+2      	; 0x1168 <radio_on+0xa>
    1166:	08 95       	ret
    1168:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <radio_on.part.5>

0000116c <radio_reset>:
}

}

void radio_reset(void){
PORTE &= ~(1<<PE7); //int2 initially low to sense TWI mode
    116c:	1f 98       	cbi	0x03, 7	; 3
DDRE  |= 0x80;      //turn on Port E bit 7 to drive it low
    116e:	17 9a       	sbi	0x02, 7	; 2
PORTE |=  (1<<PE2); //hardware reset Si4734 
    1170:	1a 9a       	sbi	0x03, 2	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1172:	8f e1       	ldi	r24, 0x1F	; 31
    1174:	93 e0       	ldi	r25, 0x03	; 3
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	f1 f7       	brne	.-4      	; 0x1176 <radio_reset+0xa>
    117a:	00 c0       	rjmp	.+0      	; 0x117c <radio_reset+0x10>
    117c:	00 00       	nop
_delay_us(200);     //hold for 200us, 100us by spec         
PORTE &= ~(1<<PE2); //release reset 
    117e:	1a 98       	cbi	0x03, 2	; 3
    1180:	90 ea       	ldi	r25, 0xA0	; 160
    1182:	9a 95       	dec	r25
    1184:	f1 f7       	brne	.-4      	; 0x1182 <radio_reset+0x16>
_delay_us(30);      //5us required because of my slow I2C translators I suspect
                    //Si code in "low" has 30us delay...no explaination given
DDRE  &= ~(0x80);   //now Port E bit 7 becomes input from the radio interrupt
    1186:	17 98       	cbi	0x02, 7	; 2
    1188:	08 95       	ret

0000118a <__vector_18>:

}//main


//ISR triggers whenever UART receives any data
ISR(USART0_RX_vect){
    118a:	1f 92       	push	r1
    118c:	0f 92       	push	r0
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	0f 92       	push	r0
    1192:	11 24       	eor	r1, r1
    1194:	0b b6       	in	r0, 0x3b	; 59
    1196:	0f 92       	push	r0
    1198:	8f 93       	push	r24
    119a:	9f 93       	push	r25
    119c:	ef 93       	push	r30
    119e:	ff 93       	push	r31
// stores what it receives into a buffer and once it gets a null character
// let the program know it is received
static uint8_t j = 0;
rx_char = UDR0;
    11a0:	8c b1       	in	r24, 0x0c	; 12
    11a2:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <rx_char>
uart_buf[j++] = rx_char;
    11a6:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <j.2571>
    11aa:	91 e0       	ldi	r25, 0x01	; 1
    11ac:	9e 0f       	add	r25, r30
    11ae:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <j.2571>
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	e0 53       	subi	r30, 0x30	; 48
    11b6:	fd 4f       	sbci	r31, 0xFD	; 253
    11b8:	80 83       	st	Z, r24

if(rx_char == '\0'){
    11ba:	81 11       	cpse	r24, r1
    11bc:	09 c0       	rjmp	.+18     	; 0x11d0 <__vector_18+0x46>
	rcv_rdy = 1;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <rcv_rdy>
	uart_buf[--j] = (' ');
    11c4:	80 e2       	ldi	r24, 0x20	; 32
    11c6:	80 83       	st	Z, r24
	uart_buf[j+1] = (' ');
    11c8:	81 83       	std	Z+1, r24	; 0x01
	uart_buf[j+2] = (' ');
    11ca:	82 83       	std	Z+2, r24	; 0x02
	j = 0;
    11cc:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <j.2571>
}



}
    11d0:	ff 91       	pop	r31
    11d2:	ef 91       	pop	r30
    11d4:	9f 91       	pop	r25
    11d6:	8f 91       	pop	r24
    11d8:	0f 90       	pop	r0
    11da:	0b be       	out	0x3b, r0	; 59
    11dc:	0f 90       	pop	r0
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	0f 90       	pop	r0
    11e2:	1f 90       	pop	r1
    11e4:	18 95       	reti

000011e6 <get_int_status>:
//
//TODO: update for interrupts
// 
uint8_t get_int_status(){

    si4734_wr_buf[0] = GET_INT_STATUS;              
    11e6:	84 e1       	ldi	r24, 0x14	; 20
    11e8:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <si4734_wr_buf>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1); //send get_int_status command
    11ec:	41 e0       	ldi	r20, 0x01	; 1
    11ee:	68 eb       	ldi	r22, 0xB8	; 184
    11f0:	72 e0       	ldi	r23, 0x02	; 2
    11f2:	82 e2       	ldi	r24, 0x22	; 34
    11f4:	0e 94 ae 0c 	call	0x195c	; 0x195c <twi_start_wr>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    11f8:	0e 94 aa 0c 	call	0x1954	; 0x1954 <twi_busy>
    11fc:	81 11       	cpse	r24, r1
    11fe:	fc cf       	rjmp	.-8      	; 0x11f8 <get_int_status+0x12>
    1200:	8f ea       	ldi	r24, 0xAF	; 175
    1202:	94 e0       	ldi	r25, 0x04	; 4
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	f1 f7       	brne	.-4      	; 0x1204 <get_int_status+0x1e>
    1208:	00 c0       	rjmp	.+0      	; 0x120a <get_int_status+0x24>
    120a:	00 00       	nop
    _delay_us(300);        //si4734 process delay
    twi_start_rd(SI4734_ADDRESS, si4734_rd_buf, 1); //get the interrupt status 
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	63 e2       	ldi	r22, 0x23	; 35
    1210:	73 e0       	ldi	r23, 0x03	; 3
    1212:	82 e2       	ldi	r24, 0x22	; 34
    1214:	0e 94 bf 0c 	call	0x197e	; 0x197e <twi_start_rd>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    1218:	0e 94 aa 0c 	call	0x1954	; 0x1954 <twi_busy>
    121c:	81 11       	cpse	r24, r1
    121e:	fc cf       	rjmp	.-8      	; 0x1218 <get_int_status+0x32>
    return(si4734_rd_buf[0]);
}
    1220:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <si4734_rd_buf>
    1224:	08 95       	ret

00001226 <fm_tune_freq>:
//
//takes current_fm_freq and sends it to the radio chip
//

void fm_tune_freq(){
  si4734_wr_buf[0] = 0x20;  //fm tune command
    1226:	80 e2       	ldi	r24, 0x20	; 32
    1228:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <si4734_wr_buf>
  si4734_wr_buf[1] = 0x00;  //no FREEZE and no FAST tune
    122c:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <si4734_wr_buf+0x1>
  si4734_wr_buf[2] = (uint8_t)(current_fm_freq >> 8); //freq high byte
    1230:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <current_fm_freq>
    1234:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <current_fm_freq+0x1>
    1238:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <si4734_wr_buf+0x2>
  si4734_wr_buf[3] = (uint8_t)(current_fm_freq);      //freq low byte
    123c:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <si4734_wr_buf+0x3>
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior
    1240:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <si4734_wr_buf+0x4>
  //send fm tune command
  STC_interrupt = FALSE;
    1244:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <STC_interrupt>
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 5);
    1248:	45 e0       	ldi	r20, 0x05	; 5
    124a:	68 eb       	ldi	r22, 0xB8	; 184
    124c:	72 e0       	ldi	r23, 0x02	; 2
    124e:	82 e2       	ldi	r24, 0x22	; 34
    1250:	0e 94 ae 0c 	call	0x195c	; 0x195c <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
    1254:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <STC_interrupt>
    1258:	88 23       	and	r24, r24
    125a:	e1 f3       	breq	.-8      	; 0x1254 <fm_tune_freq+0x2e>
}
    125c:	08 95       	ret

0000125e <am_tune_freq>:
//
//takes current_am_freq and sends it to the radio chip
//

void am_tune_freq(){
  si4734_wr_buf[0] = AM_TUNE_FREQ; //am tune command
    125e:	80 e4       	ldi	r24, 0x40	; 64
    1260:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <si4734_wr_buf>
  si4734_wr_buf[1] = 0x00;         //no FAST tune
    1264:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <si4734_wr_buf+0x1>
  si4734_wr_buf[2] = (uint8_t)(current_am_freq >> 8); //freq high byte
    1268:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <current_am_freq>
    126c:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <current_am_freq+0x1>
    1270:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <si4734_wr_buf+0x2>
  si4734_wr_buf[3] = (uint8_t)(current_am_freq);      //freq low byte
    1274:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <si4734_wr_buf+0x3>
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
    1278:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <si4734_wr_buf+0x4>
  si4734_wr_buf[5] = 0x00;  //antenna tuning capactior low byte
    127c:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <si4734_wr_buf+0x5>
  //send am tune command
  STC_interrupt = FALSE;
    1280:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <STC_interrupt>
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    1284:	46 e0       	ldi	r20, 0x06	; 6
    1286:	68 eb       	ldi	r22, 0xB8	; 184
    1288:	72 e0       	ldi	r23, 0x02	; 2
    128a:	82 e2       	ldi	r24, 0x22	; 34
    128c:	0e 94 ae 0c 	call	0x195c	; 0x195c <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
    1290:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <STC_interrupt>
    1294:	88 23       	and	r24, r24
    1296:	e1 f3       	breq	.-8      	; 0x1290 <am_tune_freq+0x32>
}
    1298:	08 95       	ret

0000129a <sw_tune_freq>:
//
//takes current_sw_freq and sends it to the radio chip
//antcap low byte is 0x01 as per datasheet

void sw_tune_freq(){
  si4734_wr_buf[0] = 0x40;  //am tune command
    129a:	e8 eb       	ldi	r30, 0xB8	; 184
    129c:	f2 e0       	ldi	r31, 0x02	; 2
    129e:	80 e4       	ldi	r24, 0x40	; 64
    12a0:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x00;  //no FAST tune
    12a2:	11 82       	std	Z+1, r1	; 0x01
  si4734_wr_buf[2] = (uint8_t)(current_sw_freq >> 8); //freq high byte
    12a4:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <current_sw_freq>
    12a8:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <current_sw_freq+0x1>
    12ac:	92 83       	std	Z+2, r25	; 0x02
  si4734_wr_buf[3] = (uint8_t)(current_sw_freq);      //freq low byte
    12ae:	83 83       	std	Z+3, r24	; 0x03
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
    12b0:	14 82       	std	Z+4, r1	; 0x04
  si4734_wr_buf[5] = 0x01;  //antenna tuning capactior low byte 
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	85 83       	std	Z+5, r24	; 0x05
  //send am tune command
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    12b6:	46 e0       	ldi	r20, 0x06	; 6
    12b8:	bf 01       	movw	r22, r30
    12ba:	82 e2       	ldi	r24, 0x22	; 34
    12bc:	0e 94 ae 0c 	call	0x195c	; 0x195c <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12c0:	2f ef       	ldi	r18, 0xFF	; 255
    12c2:	87 ee       	ldi	r24, 0xE7	; 231
    12c4:	93 e0       	ldi	r25, 0x03	; 3
    12c6:	21 50       	subi	r18, 0x01	; 1
    12c8:	80 40       	sbci	r24, 0x00	; 0
    12ca:	90 40       	sbci	r25, 0x00	; 0
    12cc:	e1 f7       	brne	.-8      	; 0x12c6 <sw_tune_freq+0x2c>
    12ce:	00 c0       	rjmp	.+0      	; 0x12d0 <sw_tune_freq+0x36>
    12d0:	00 00       	nop
    12d2:	08 95       	ret

000012d4 <radio_pwr_dwn>:
//

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
    12d4:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <current_radio_band>
    12d8:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <current_radio_band+0x1>
    12dc:	81 30       	cpi	r24, 0x01	; 1
    12de:	91 05       	cpc	r25, r1
    12e0:	51 f1       	breq	.+84     	; 0x1336 <radio_pwr_dwn+0x62>
    12e2:	00 f1       	brcs	.+64     	; 0x1324 <radio_pwr_dwn+0x50>
    12e4:	02 97       	sbiw	r24, 0x02	; 2
    12e6:	41 f4       	brne	.+16     	; 0x12f8 <radio_pwr_dwn+0x24>
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
  case(SW) : eeprom_write_word(&eeprom_sw_freq, current_sw_freq); break;
    12e8:	60 91 0c 03 	lds	r22, 0x030C	; 0x80030c <current_sw_freq>
    12ec:	70 91 0d 03 	lds	r23, 0x030D	; 0x80030d <current_sw_freq+0x1>
    12f0:	80 e1       	ldi	r24, 0x10	; 16
    12f2:	93 e0       	ldi	r25, 0x03	; 3
    12f4:	0e 94 c9 13 	call	0x2792	; 0x2792 <eeprom_write_word>
  default  : break;
}//switch      

  eeprom_write_byte(&eeprom_volume, current_volume); //save current volume level
    12f8:	60 91 e0 02 	lds	r22, 0x02E0	; 0x8002e0 <current_volume>
    12fc:	8e ea       	ldi	r24, 0xAE	; 174
    12fe:	92 e0       	ldi	r25, 0x02	; 2
    1300:	0e 94 bc 13 	call	0x2778	; 0x2778 <eeprom_write_byte>

//send fm power down command
    si4734_wr_buf[0] = 0x11;
    1304:	81 e1       	ldi	r24, 0x11	; 17
    1306:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <si4734_wr_buf>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    130a:	41 e0       	ldi	r20, 0x01	; 1
    130c:	68 eb       	ldi	r22, 0xB8	; 184
    130e:	72 e0       	ldi	r23, 0x02	; 2
    1310:	82 e2       	ldi	r24, 0x22	; 34
    1312:	0e 94 ae 0c 	call	0x195c	; 0x195c <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1316:	87 ed       	ldi	r24, 0xD7	; 215
    1318:	94 e0       	ldi	r25, 0x04	; 4
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	f1 f7       	brne	.-4      	; 0x131a <radio_pwr_dwn+0x46>
    131e:	00 c0       	rjmp	.+0      	; 0x1320 <radio_pwr_dwn+0x4c>
    1320:	00 00       	nop
    1322:	08 95       	ret

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
    1324:	60 91 e7 02 	lds	r22, 0x02E7	; 0x8002e7 <current_fm_freq>
    1328:	70 91 e8 02 	lds	r23, 0x02E8	; 0x8002e8 <current_fm_freq+0x1>
    132c:	8f ea       	ldi	r24, 0xAF	; 175
    132e:	92 e0       	ldi	r25, 0x02	; 2
    1330:	0e 94 c9 13 	call	0x2792	; 0x2792 <eeprom_write_word>
    1334:	e1 cf       	rjmp	.-62     	; 0x12f8 <radio_pwr_dwn+0x24>
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
    1336:	60 91 e3 02 	lds	r22, 0x02E3	; 0x8002e3 <current_am_freq>
    133a:	70 91 e4 02 	lds	r23, 0x02E4	; 0x8002e4 <current_am_freq+0x1>
    133e:	8b ec       	ldi	r24, 0xCB	; 203
    1340:	92 e0       	ldi	r25, 0x02	; 2
    1342:	0e 94 c9 13 	call	0x2792	; 0x2792 <eeprom_write_word>
    1346:	d8 cf       	rjmp	.-80     	; 0x12f8 <radio_pwr_dwn+0x24>

00001348 <fm_rsq_status>:
//inside the chip. 
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_rsq_status(){

    si4734_wr_buf[0] = FM_RSQ_STATUS;            //fm_rsq_status command
    1348:	83 e2       	ldi	r24, 0x23	; 35
    134a:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <si4734_wr_buf>
    si4734_wr_buf[1] = FM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    1354:	42 e0       	ldi	r20, 0x02	; 2
    1356:	68 eb       	ldi	r22, 0xB8	; 184
    1358:	72 e0       	ldi	r23, 0x02	; 2
    135a:	82 e2       	ldi	r24, 0x22	; 34
    135c:	0e 94 ae 0c 	call	0x195c	; 0x195c <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1360:	0e 94 aa 0c 	call	0x1954	; 0x1954 <twi_busy>
    1364:	81 11       	cpse	r24, r1
    1366:	fc cf       	rjmp	.-8      	; 0x1360 <fm_rsq_status+0x18>
    1368:	8f ea       	ldi	r24, 0xAF	; 175
    136a:	94 e0       	ldi	r25, 0x04	; 4
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <fm_rsq_status+0x24>
    1370:	00 c0       	rjmp	.+0      	; 0x1372 <fm_rsq_status+0x2a>
    1372:	00 00       	nop
    _delay_us(300);      //delay for si4734 to process
    //This is a blind wait. Waiting for CTS interrupt here would tell you 
    //when the command is received and has been processed.
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1374:	48 e0       	ldi	r20, 0x08	; 8
    1376:	63 ec       	ldi	r22, 0xC3	; 195
    1378:	72 e0       	ldi	r23, 0x02	; 2
    137a:	82 e2       	ldi	r24, 0x22	; 34
    137c:	0e 94 bf 0c 	call	0x197e	; 0x197e <twi_start_rd>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    1380:	0e 94 aa 0c 	call	0x1954	; 0x1954 <twi_busy>
    1384:	81 11       	cpse	r24, r1
    1386:	fc cf       	rjmp	.-8      	; 0x1380 <fm_rsq_status+0x38>
}
    1388:	08 95       	ret

0000138a <fm_tune_status>:
//is cleared.
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_tune_status(){

    si4734_wr_buf[0] = FM_TUNE_STATUS;            //fm_tune_status command
    138a:	82 e2       	ldi	r24, 0x22	; 34
    138c:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <si4734_wr_buf>
    si4734_wr_buf[1] = FM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    1396:	42 e0       	ldi	r20, 0x02	; 2
    1398:	68 eb       	ldi	r22, 0xB8	; 184
    139a:	72 e0       	ldi	r23, 0x02	; 2
    139c:	82 e2       	ldi	r24, 0x22	; 34
    139e:	0e 94 ae 0c 	call	0x195c	; 0x195c <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    13a2:	0e 94 aa 0c 	call	0x1954	; 0x1954 <twi_busy>
    13a6:	81 11       	cpse	r24, r1
    13a8:	fc cf       	rjmp	.-8      	; 0x13a2 <fm_tune_status+0x18>
    13aa:	8f ea       	ldi	r24, 0xAF	; 175
    13ac:	94 e0       	ldi	r25, 0x04	; 4
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <fm_tune_status+0x24>
    13b2:	00 c0       	rjmp	.+0      	; 0x13b4 <fm_tune_status+0x2a>
    13b4:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    13b6:	48 e0       	ldi	r20, 0x08	; 8
    13b8:	63 ec       	ldi	r22, 0xC3	; 195
    13ba:	72 e0       	ldi	r23, 0x02	; 2
    13bc:	82 e2       	ldi	r24, 0x22	; 34
    13be:	0e 94 bf 0c 	call	0x197e	; 0x197e <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    13c2:	0e 94 aa 0c 	call	0x1954	; 0x1954 <twi_busy>
    13c6:	81 11       	cpse	r24, r1
    13c8:	fc cf       	rjmp	.-8      	; 0x13c2 <fm_tune_status+0x38>
}
    13ca:	08 95       	ret

000013cc <am_tune_status>:
//TODO: could probably just have one tune_status() function
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_tune_status(){

    si4734_wr_buf[0] = AM_TUNE_STATUS;            //fm_tune_status command
    13cc:	82 e4       	ldi	r24, 0x42	; 66
    13ce:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <si4734_wr_buf>
    si4734_wr_buf[1] = AM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    13d8:	42 e0       	ldi	r20, 0x02	; 2
    13da:	68 eb       	ldi	r22, 0xB8	; 184
    13dc:	72 e0       	ldi	r23, 0x02	; 2
    13de:	82 e2       	ldi	r24, 0x22	; 34
    13e0:	0e 94 ae 0c 	call	0x195c	; 0x195c <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    13e4:	0e 94 aa 0c 	call	0x1954	; 0x1954 <twi_busy>
    13e8:	81 11       	cpse	r24, r1
    13ea:	fc cf       	rjmp	.-8      	; 0x13e4 <am_tune_status+0x18>
    13ec:	8f ea       	ldi	r24, 0xAF	; 175
    13ee:	94 e0       	ldi	r25, 0x04	; 4
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	f1 f7       	brne	.-4      	; 0x13f0 <am_tune_status+0x24>
    13f4:	00 c0       	rjmp	.+0      	; 0x13f6 <am_tune_status+0x2a>
    13f6:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the am tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    13f8:	48 e0       	ldi	r20, 0x08	; 8
    13fa:	63 ec       	ldi	r22, 0xC3	; 195
    13fc:	72 e0       	ldi	r23, 0x02	; 2
    13fe:	82 e2       	ldi	r24, 0x22	; 34
    1400:	0c 94 bf 0c 	jmp	0x197e	; 0x197e <twi_start_rd>

00001404 <am_rsq_status>:
//
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_rsq_status(){

    si4734_wr_buf[0] = AM_RSQ_STATUS;            //am_rsq_status command
    1404:	83 e4       	ldi	r24, 0x43	; 67
    1406:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <si4734_wr_buf>
    si4734_wr_buf[1] = AM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    1410:	42 e0       	ldi	r20, 0x02	; 2
    1412:	68 eb       	ldi	r22, 0xB8	; 184
    1414:	72 e0       	ldi	r23, 0x02	; 2
    1416:	82 e2       	ldi	r24, 0x22	; 34
    1418:	0e 94 ae 0c 	call	0x195c	; 0x195c <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    141c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <twi_busy>
    1420:	81 11       	cpse	r24, r1
    1422:	fc cf       	rjmp	.-8      	; 0x141c <am_rsq_status+0x18>
    1424:	8f ea       	ldi	r24, 0xAF	; 175
    1426:	94 e0       	ldi	r25, 0x04	; 4
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	f1 f7       	brne	.-4      	; 0x1428 <am_rsq_status+0x24>
    142c:	00 c0       	rjmp	.+0      	; 0x142e <am_rsq_status+0x2a>
    142e:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process command
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1430:	48 e0       	ldi	r20, 0x08	; 8
    1432:	63 ec       	ldi	r22, 0xC3	; 195
    1434:	72 e0       	ldi	r23, 0x02	; 2
    1436:	82 e2       	ldi	r24, 0x22	; 34
    1438:	0c 94 bf 0c 	jmp	0x197e	; 0x197e <twi_start_rd>

0000143c <set_property>:
//The set property command does not have a indication that it has completed. This
//command is guarnteed by design to finish in 10ms. 
//
void set_property(uint16_t property, uint16_t property_value){

    si4734_wr_buf[0] = SET_PROPERTY;                   //set property command
    143c:	e8 eb       	ldi	r30, 0xB8	; 184
    143e:	f2 e0       	ldi	r31, 0x02	; 2
    1440:	22 e1       	ldi	r18, 0x12	; 18
    1442:	20 83       	st	Z, r18
    si4734_wr_buf[1] = 0x00;                           //all zeros
    1444:	11 82       	std	Z+1, r1	; 0x01
    si4734_wr_buf[2] = (uint8_t)(property >> 8);       //property high byte
    1446:	92 83       	std	Z+2, r25	; 0x02
    si4734_wr_buf[3] = (uint8_t)(property);            //property low byte
    1448:	83 83       	std	Z+3, r24	; 0x03
    si4734_wr_buf[4] = (uint8_t)(property_value >> 8); //property value high byte
    144a:	74 83       	std	Z+4, r23	; 0x04
    si4734_wr_buf[5] = (uint8_t)(property_value);      //property value low byte
    144c:	65 83       	std	Z+5, r22	; 0x05
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    144e:	46 e0       	ldi	r20, 0x06	; 6
    1450:	bf 01       	movw	r22, r30
    1452:	82 e2       	ldi	r24, 0x22	; 34
    1454:	0e 94 ae 0c 	call	0x195c	; 0x195c <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1458:	8f e3       	ldi	r24, 0x3F	; 63
    145a:	9c e9       	ldi	r25, 0x9C	; 156
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <set_property+0x20>
    1460:	00 c0       	rjmp	.+0      	; 0x1462 <set_property+0x26>
    1462:	00 00       	nop
    1464:	08 95       	ret

00001466 <fm_pwr_up>:
//********************************************************************************
//                            fm_pwr_up()
//
void fm_pwr_up(){
//restore the previous fm frequency  
 current_fm_freq = eeprom_read_word(&eeprom_fm_freq); //TODO: only this one does not work 
    1466:	8f ea       	ldi	r24, 0xAF	; 175
    1468:	92 e0       	ldi	r25, 0x02	; 2
    146a:	0e 94 b6 13 	call	0x276c	; 0x276c <eeprom_read_word>
    146e:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <current_fm_freq+0x1>
    1472:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <current_fm_freq>
 current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    1476:	8e ea       	ldi	r24, 0xAE	; 174
    1478:	92 e0       	ldi	r25, 0x02	; 2
    147a:	0e 94 ae 13 	call	0x275c	; 0x275c <eeprom_read_byte>
    147e:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <current_volume>

//send fm power up command
  si4734_wr_buf[0] = FM_PWR_UP; //powerup command byte
    1482:	e8 eb       	ldi	r30, 0xB8	; 184
    1484:	f2 e0       	ldi	r31, 0x02	; 2
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x50;      //GPO2O enabled, STCINT enabled, use ext. 32khz osc.
    148a:	80 e5       	ldi	r24, 0x50	; 80
    148c:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;      //OPMODE = 0x05; analog audio output
    148e:	85 e0       	ldi	r24, 0x05	; 5
    1490:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    1492:	43 e0       	ldi	r20, 0x03	; 3
    1494:	bf 01       	movw	r22, r30
    1496:	82 e2       	ldi	r24, 0x22	; 34
    1498:	0e 94 ae 0c 	call	0x195c	; 0x195c <twi_start_wr>
    149c:	2f ef       	ldi	r18, 0xFF	; 255
    149e:	8b ed       	ldi	r24, 0xDB	; 219
    14a0:	95 e0       	ldi	r25, 0x05	; 5
    14a2:	21 50       	subi	r18, 0x01	; 1
    14a4:	80 40       	sbci	r24, 0x00	; 0
    14a6:	90 40       	sbci	r25, 0x00	; 0
    14a8:	e1 f7       	brne	.-8      	; 0x14a2 <fm_pwr_up+0x3c>
    14aa:	00 c0       	rjmp	.+0      	; 0x14ac <fm_pwr_up+0x46>
    14ac:	00 00       	nop
  _delay_ms(120);               //startup delay as specified 
  //The seek/tune interrupt is enabled here. If the STCINT bit is set, a 1.5us
  //low pulse will be output from GPIO2/INT when tune or seek is completed.
  set_property(GPO_IEN, GPO_IEN_STCIEN); //seek_tune complete interrupt
    14ae:	61 e0       	ldi	r22, 0x01	; 1
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <set_property>

000014ba <am_pwr_up>:
//********************************************************************************
//                            am_pwr_up()
//
void am_pwr_up(){
//restore the previous am frequency  
  current_am_freq = eeprom_read_word(&eeprom_am_freq);
    14ba:	8b ec       	ldi	r24, 0xCB	; 203
    14bc:	92 e0       	ldi	r25, 0x02	; 2
    14be:	0e 94 b6 13 	call	0x276c	; 0x276c <eeprom_read_word>
    14c2:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <current_am_freq+0x1>
    14c6:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <current_am_freq>
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    14ca:	8e ea       	ldi	r24, 0xAE	; 174
    14cc:	92 e0       	ldi	r25, 0x02	; 2
    14ce:	0e 94 ae 13 	call	0x275c	; 0x275c <eeprom_read_byte>
    14d2:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <current_volume>

//send am power up command
  si4734_wr_buf[0] = AM_PWR_UP;
    14d6:	e8 eb       	ldi	r30, 0xB8	; 184
    14d8:	f2 e0       	ldi	r31, 0x02	; 2
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	80 83       	st	Z, r24
  si4734_wr_buf[1] = 0x51;//GPO2OEN and XOSCEN selected
    14de:	81 e5       	ldi	r24, 0x51	; 81
    14e0:	81 83       	std	Z+1, r24	; 0x01
  si4734_wr_buf[2] = 0x05;
    14e2:	85 e0       	ldi	r24, 0x05	; 5
    14e4:	82 83       	std	Z+2, r24	; 0x02
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    14e6:	43 e0       	ldi	r20, 0x03	; 3
    14e8:	bf 01       	movw	r22, r30
    14ea:	82 e2       	ldi	r24, 0x22	; 34
    14ec:	0e 94 ae 0c 	call	0x195c	; 0x195c <twi_start_wr>
    14f0:	2f ef       	ldi	r18, 0xFF	; 255
    14f2:	8b ed       	ldi	r24, 0xDB	; 219
    14f4:	95 e0       	ldi	r25, 0x05	; 5
    14f6:	21 50       	subi	r18, 0x01	; 1
    14f8:	80 40       	sbci	r24, 0x00	; 0
    14fa:	90 40       	sbci	r25, 0x00	; 0
    14fc:	e1 f7       	brne	.-8      	; 0x14f6 <am_pwr_up+0x3c>
    14fe:	00 c0       	rjmp	.+0      	; 0x1500 <am_pwr_up+0x46>
    1500:	00 00       	nop
  _delay_ms(120);   
  set_property(GPO_IEN, GPO_IEN_STCIEN);    //Seek/Tune Complete interrupt
    1502:	61 e0       	ldi	r22, 0x01	; 1
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <set_property>

0000150e <sw_pwr_up>:
//                            sw_pwr_up()
//

void sw_pwr_up(){
//restore the previous sw frequency  
  current_sw_freq = eeprom_read_word(&eeprom_sw_freq);
    150e:	80 e1       	ldi	r24, 0x10	; 16
    1510:	93 e0       	ldi	r25, 0x03	; 3
    1512:	0e 94 b6 13 	call	0x276c	; 0x276c <eeprom_read_word>
    1516:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <current_sw_freq+0x1>
    151a:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <current_sw_freq>
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
    151e:	8e ea       	ldi	r24, 0xAE	; 174
    1520:	92 e0       	ldi	r25, 0x02	; 2
    1522:	0e 94 ae 13 	call	0x275c	; 0x275c <eeprom_read_byte>
    1526:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <current_volume>

//send sw power up command (same as am, only tuning rate is different)
    si4734_wr_buf[0] = AM_PWR_UP; //same cmd as for AM
    152a:	e8 eb       	ldi	r30, 0xB8	; 184
    152c:	f2 e0       	ldi	r31, 0x02	; 2
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	80 83       	st	Z, r24
    si4734_wr_buf[1] = 0x51;
    1532:	81 e5       	ldi	r24, 0x51	; 81
    1534:	81 83       	std	Z+1, r24	; 0x01
    si4734_wr_buf[2] = 0x05;
    1536:	85 e0       	ldi	r24, 0x05	; 5
    1538:	82 83       	std	Z+2, r24	; 0x02
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    153a:	43 e0       	ldi	r20, 0x03	; 3
    153c:	bf 01       	movw	r22, r30
    153e:	82 e2       	ldi	r24, 0x22	; 34
    1540:	0e 94 ae 0c 	call	0x195c	; 0x195c <twi_start_wr>
    1544:	2f ef       	ldi	r18, 0xFF	; 255
    1546:	8b ed       	ldi	r24, 0xDB	; 219
    1548:	95 e0       	ldi	r25, 0x05	; 5
    154a:	21 50       	subi	r18, 0x01	; 1
    154c:	80 40       	sbci	r24, 0x00	; 0
    154e:	90 40       	sbci	r25, 0x00	; 0
    1550:	e1 f7       	brne	.-8      	; 0x154a <sw_pwr_up+0x3c>
    1552:	00 c0       	rjmp	.+0      	; 0x1554 <sw_pwr_up+0x46>
    1554:	00 00       	nop
    _delay_ms(120);   //start up delay

  //set property to disable soft muting for shortwave broadcasts
  set_property(AM_SOFT_MUTE_MAX_ATTENUATION, 0x0000); //cut off soft mute  
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	82 e0       	ldi	r24, 0x02	; 2
    155c:	93 e3       	ldi	r25, 0x33	; 51
    155e:	0e 94 1e 0a 	call	0x143c	; 0x143c <set_property>
  //select 4khz filter BW and engage power line filter
  set_property(AM_CHANNEL_FILTER, (AM_CHFILT_4KHZ | AM_PWR_LINE_NOISE_REJT_FILTER)); 
    1562:	61 e0       	ldi	r22, 0x01	; 1
    1564:	71 e0       	ldi	r23, 0x01	; 1
    1566:	82 e0       	ldi	r24, 0x02	; 2
    1568:	91 e3       	ldi	r25, 0x31	; 49
    156a:	0e 94 1e 0a 	call	0x143c	; 0x143c <set_property>
  set_property(GPO_IEN, GPO_IEN_STCIEN); //Seek/Tune Complete interrupt
    156e:	61 e0       	ldi	r22, 0x01	; 1
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <set_property>

0000157a <get_rev>:
//TODO: UNTESTED!
//Report the chip revision info via uart1. UART1 be setup and connected to 
//a dumb terminal. e.g.: screen /dev/cu.usbserial-A800fh27 9600
//
void get_rev(){
    si4734_wr_buf[0] = GET_REV;                   //get rev command 
    157a:	80 e1       	ldi	r24, 0x10	; 16
    157c:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <si4734_wr_buf>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    1580:	41 e0       	ldi	r20, 0x01	; 1
    1582:	68 eb       	ldi	r22, 0xB8	; 184
    1584:	72 e0       	ldi	r23, 0x02	; 2
    1586:	82 e2       	ldi	r24, 0x22	; 34
    1588:	0e 94 ae 0c 	call	0x195c	; 0x195c <twi_start_wr>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    158c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <twi_busy>
    1590:	81 11       	cpse	r24, r1
    1592:	fc cf       	rjmp	.-8      	; 0x158c <get_rev+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1594:	8f ea       	ldi	r24, 0xAF	; 175
    1596:	94 e0       	ldi	r25, 0x04	; 4
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	f1 f7       	brne	.-4      	; 0x1598 <get_rev+0x1e>
    159c:	00 c0       	rjmp	.+0      	; 0x159e <get_rev+0x24>
    159e:	00 00       	nop
    _delay_us(300);        //wait for processing delay
//get the revision info  
    twi_start_rd(SI4734_ADDRESS, si4734_revision_buf, 8);
    15a0:	48 e0       	ldi	r20, 0x08	; 8
    15a2:	63 e1       	ldi	r22, 0x13	; 19
    15a4:	73 e0       	ldi	r23, 0x03	; 3
    15a6:	82 e2       	ldi	r24, 0x22	; 34
    15a8:	0e 94 bf 0c 	call	0x197e	; 0x197e <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    15ac:	0e 94 aa 0c 	call	0x1954	; 0x1954 <twi_busy>
    15b0:	81 11       	cpse	r24, r1
    15b2:	fc cf       	rjmp	.-8      	; 0x15ac <get_rev+0x32>
//use TABs instead?
    uart1_puts("Si4734 Rev:  last 2 digits of part no.   chip rev     \n\r");
    15b4:	88 e7       	ldi	r24, 0x78	; 120
    15b6:	91 e0       	ldi	r25, 0x01	; 1
    15b8:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
    uart1_puts("             -------------------------   --------     \n\r");
    15bc:	81 eb       	ldi	r24, 0xB1	; 177
    15be:	91 e0       	ldi	r25, 0x01	; 1
    15c0:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
    uart1_puts("                          "); itoa((int)si4734_revision_buf[1], uart1_tx_buf, 10); uart1_puts(uart1_tx_buf); 
    15c4:	8a ee       	ldi	r24, 0xEA	; 234
    15c6:	91 e0       	ldi	r25, 0x01	; 1
    15c8:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
    15cc:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <si4734_revision_buf+0x1>
    15d0:	4a e0       	ldi	r20, 0x0A	; 10
    15d2:	6a e5       	ldi	r22, 0x5A	; 90
    15d4:	73 e0       	ldi	r23, 0x03	; 3
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__itoa_ncheck>
    15dc:	8a e5       	ldi	r24, 0x5A	; 90
    15de:	93 e0       	ldi	r25, 0x03	; 3
    15e0:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
    uart1_puts("             "); itoa((int)si4734_revision_buf[2], uart1_tx_buf, 10); uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
    15e4:	87 ef       	ldi	r24, 0xF7	; 247
    15e6:	91 e0       	ldi	r25, 0x01	; 1
    15e8:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
    15ec:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <si4734_revision_buf+0x2>
    15f0:	4a e0       	ldi	r20, 0x0A	; 10
    15f2:	6a e5       	ldi	r22, 0x5A	; 90
    15f4:	73 e0       	ldi	r23, 0x03	; 3
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__itoa_ncheck>
    15fc:	8a e5       	ldi	r24, 0x5A	; 90
    15fe:	93 e0       	ldi	r25, 0x03	; 3
    1600:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
    1604:	87 ee       	ldi	r24, 0xE7	; 231
    1606:	91 e0       	ldi	r25, 0x01	; 1
    1608:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <uart1_puts>

0000160c <get_fm_rsq_status>:
// TODO: UNTESTED!
//Report the fm rsq status via uart1. Requires that UART1 be setup and connected to 
//a terminal. e.g.: screen /dev/cu.usbserial-A800fh27 9600
//Also requires that a fm_tune_status has been previously called.

void get_fm_rsq_status(){
    160c:	ff 92       	push	r15
    160e:	0f 93       	push	r16
    1610:	1f 93       	push	r17
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	a8 97       	sbiw	r28, 0x28	; 40
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
  uint8_t disp_freq;  //temp holding variable
  char    str[40];    //temp for building strings

  uart1_puts("FM_RSQ_STATUS: ");
    1626:	85 e0       	ldi	r24, 0x05	; 5
    1628:	92 e0       	ldi	r25, 0x02	; 2
    162a:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
  uart1_puts("status byte   :");   itoa((int)si4734_tune_status_buf[0], uart1_tx_buf, 16);   uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
    162e:	85 e1       	ldi	r24, 0x15	; 21
    1630:	92 e0       	ldi	r25, 0x02	; 2
    1632:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
    1636:	03 ec       	ldi	r16, 0xC3	; 195
    1638:	12 e0       	ldi	r17, 0x02	; 2
    163a:	f8 01       	movw	r30, r16
    163c:	80 81       	ld	r24, Z
    163e:	40 e1       	ldi	r20, 0x10	; 16
    1640:	6a e5       	ldi	r22, 0x5A	; 90
    1642:	73 e0       	ldi	r23, 0x03	; 3
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__itoa_ncheck>
    164a:	8a e5       	ldi	r24, 0x5A	; 90
    164c:	93 e0       	ldi	r25, 0x03	; 3
    164e:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
    1652:	87 ee       	ldi	r24, 0xE7	; 231
    1654:	91 e0       	ldi	r25, 0x01	; 1
    1656:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
  uart1_puts("resp1         :");   itoa((int)si4734_tune_status_buf[1], uart1_tx_buf, 10);   uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
    165a:	85 e2       	ldi	r24, 0x25	; 37
    165c:	92 e0       	ldi	r25, 0x02	; 2
    165e:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
    1662:	f8 01       	movw	r30, r16
    1664:	81 81       	ldd	r24, Z+1	; 0x01
    1666:	4a e0       	ldi	r20, 0x0A	; 10
    1668:	6a e5       	ldi	r22, 0x5A	; 90
    166a:	73 e0       	ldi	r23, 0x03	; 3
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__itoa_ncheck>
    1672:	8a e5       	ldi	r24, 0x5A	; 90
    1674:	93 e0       	ldi	r25, 0x03	; 3
    1676:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
    167a:	87 ee       	ldi	r24, 0xE7	; 231
    167c:	91 e0       	ldi	r25, 0x01	; 1
    167e:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
  disp_freq = si4734_tune_status_buf[2];      //load high frequency byte
  disp_freq = (disp_freq << 8); //shift upper byte to upper 8 bits
  disp_freq |= si4734_tune_status_buf[3];     //load low high frequency byte
    1682:	f8 01       	movw	r30, r16
    1684:	f3 80       	ldd	r15, Z+3	; 0x03
  uart1_puts("freq          :");   itoa(disp_freq, uart1_tx_buf, 10);   uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
    1686:	85 e3       	ldi	r24, 0x35	; 53
    1688:	92 e0       	ldi	r25, 0x02	; 2
    168a:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
    168e:	4a e0       	ldi	r20, 0x0A	; 10
    1690:	6a e5       	ldi	r22, 0x5A	; 90
    1692:	73 e0       	ldi	r23, 0x03	; 3
    1694:	8f 2d       	mov	r24, r15
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__itoa_ncheck>
    169c:	8a e5       	ldi	r24, 0x5A	; 90
    169e:	93 e0       	ldi	r25, 0x03	; 3
    16a0:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
    16a4:	87 ee       	ldi	r24, 0xE7	; 231
    16a6:	91 e0       	ldi	r25, 0x01	; 1
    16a8:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
  uart1_puts("freq high     :");   itoa((int)si4734_tune_status_buf[2], str, 16);   uart1_puts(str); uart1_puts("\n\r");
    16ac:	85 e4       	ldi	r24, 0x45	; 69
    16ae:	92 e0       	ldi	r25, 0x02	; 2
    16b0:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
    16b4:	f8 01       	movw	r30, r16
    16b6:	82 81       	ldd	r24, Z+2	; 0x02
    16b8:	40 e1       	ldi	r20, 0x10	; 16
    16ba:	be 01       	movw	r22, r28
    16bc:	6f 5f       	subi	r22, 0xFF	; 255
    16be:	7f 4f       	sbci	r23, 0xFF	; 255
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__itoa_ncheck>
    16c6:	ce 01       	movw	r24, r28
    16c8:	01 96       	adiw	r24, 0x01	; 1
    16ca:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
    16ce:	87 ee       	ldi	r24, 0xE7	; 231
    16d0:	91 e0       	ldi	r25, 0x01	; 1
    16d2:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
  uart1_puts("freq low      :");   itoa((int)si4734_tune_status_buf[3], str, 16);   uart1_puts(str); uart1_puts("\n\r");
    16d6:	85 e5       	ldi	r24, 0x55	; 85
    16d8:	92 e0       	ldi	r25, 0x02	; 2
    16da:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
    16de:	f8 01       	movw	r30, r16
    16e0:	83 81       	ldd	r24, Z+3	; 0x03
    16e2:	40 e1       	ldi	r20, 0x10	; 16
    16e4:	be 01       	movw	r22, r28
    16e6:	6f 5f       	subi	r22, 0xFF	; 255
    16e8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__itoa_ncheck>
    16f0:	ce 01       	movw	r24, r28
    16f2:	01 96       	adiw	r24, 0x01	; 1
    16f4:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
    16f8:	87 ee       	ldi	r24, 0xE7	; 231
    16fa:	91 e0       	ldi	r25, 0x01	; 1
    16fc:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
  uart1_puts("rssi          :");   itoa((int)si4734_tune_status_buf[4], uart1_tx_buf, 16);   uart1_puts(uart1_tx_buf); uart1_puts("\n\r");
    1700:	85 e6       	ldi	r24, 0x65	; 101
    1702:	92 e0       	ldi	r25, 0x02	; 2
    1704:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
    1708:	f8 01       	movw	r30, r16
    170a:	84 81       	ldd	r24, Z+4	; 0x04
    170c:	40 e1       	ldi	r20, 0x10	; 16
    170e:	6a e5       	ldi	r22, 0x5A	; 90
    1710:	73 e0       	ldi	r23, 0x03	; 3
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__itoa_ncheck>
    1718:	8a e5       	ldi	r24, 0x5A	; 90
    171a:	93 e0       	ldi	r25, 0x03	; 3
    171c:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
    1720:	87 ee       	ldi	r24, 0xE7	; 231
    1722:	91 e0       	ldi	r25, 0x01	; 1
    1724:	0e 94 bf 0b 	call	0x177e	; 0x177e <uart1_puts>
}
    1728:	a8 96       	adiw	r28, 0x28	; 40
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	1f 91       	pop	r17
    173a:	0f 91       	pop	r16
    173c:	ff 90       	pop	r15
    173e:	08 95       	ret

00001740 <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1740:	5d 9b       	sbis	0x0b, 5	; 11
    1742:	fe cf       	rjmp	.-4      	; 0x1740 <uart_putc>
    UDR0 = data;    // Send data byte
    1744:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1746:	5d 9b       	sbis	0x0b, 5	; 11
    1748:	fe cf       	rjmp	.-4      	; 0x1746 <uart_putc+0x6>
}
    174a:	08 95       	ret

0000174c <uart1_putc>:
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    174c:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1750:	95 ff       	sbrs	r25, 5
    1752:	fc cf       	rjmp	.-8      	; 0x174c <uart1_putc>
    UDR1 = data;    // Send data byte
    1754:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    1758:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    175c:	85 ff       	sbrs	r24, 5
    175e:	fc cf       	rjmp	.-8      	; 0x1758 <uart1_putc+0xc>
}
    1760:	08 95       	ret

00001762 <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    1762:	fc 01       	movw	r30, r24
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    1764:	90 81       	ld	r25, Z
    1766:	99 23       	and	r25, r25
    1768:	49 f0       	breq	.+18     	; 0x177c <uart_puts+0x1a>
    176a:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    176c:	5d 9b       	sbis	0x0b, 5	; 11
    176e:	fe cf       	rjmp	.-4      	; 0x176c <uart_puts+0xa>
    UDR0 = data;    // Send data byte
    1770:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1772:	5d 9b       	sbis	0x0b, 5	; 11
    1774:	fe cf       	rjmp	.-4      	; 0x1772 <uart_puts+0x10>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    1776:	91 91       	ld	r25, Z+
    1778:	91 11       	cpse	r25, r1
    177a:	f8 cf       	rjmp	.-16     	; 0x176c <uart_puts+0xa>
    177c:	08 95       	ret

0000177e <uart1_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    177e:	fc 01       	movw	r30, r24
    1780:	20 81       	ld	r18, Z
    1782:	22 23       	and	r18, r18
    1784:	71 f0       	breq	.+28     	; 0x17a2 <uart1_puts+0x24>
    1786:	31 96       	adiw	r30, 0x01	; 1
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    1788:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    178c:	95 ff       	sbrs	r25, 5
    178e:	fc cf       	rjmp	.-8      	; 0x1788 <uart1_puts+0xa>
    UDR1 = data;    // Send data byte
    1790:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
    1794:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1798:	95 ff       	sbrs	r25, 5
    179a:	fc cf       	rjmp	.-8      	; 0x1794 <uart1_puts+0x16>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
    179c:	21 91       	ld	r18, Z+
    179e:	21 11       	cpse	r18, r1
    17a0:	f3 cf       	rjmp	.-26     	; 0x1788 <uart1_puts+0xa>
    17a2:	08 95       	ret

000017a4 <uart_puts_p>:
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
    17a4:	9c 01       	movw	r18, r24
    17a6:	fc 01       	movw	r30, r24
    17a8:	44 91       	lpm	r20, Z
    17aa:	44 23       	and	r20, r20
    17ac:	69 f0       	breq	.+26     	; 0x17c8 <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
    17ae:	01 96       	adiw	r24, 0x01	; 1
    17b0:	f9 01       	movw	r30, r18
    17b2:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    17b4:	5d 9b       	sbis	0x0b, 5	; 11
    17b6:	fe cf       	rjmp	.-4      	; 0x17b4 <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
    17b8:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    17ba:	5d 9b       	sbis	0x0b, 5	; 11
    17bc:	fe cf       	rjmp	.-4      	; 0x17ba <uart_puts_p+0x16>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
    17be:	9c 01       	movw	r18, r24
    17c0:	fc 01       	movw	r30, r24
    17c2:	44 91       	lpm	r20, Z
    17c4:	41 11       	cpse	r20, r1
    17c6:	f3 cf       	rjmp	.-26     	; 0x17ae <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
    17c8:	08 95       	ret

000017ca <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
    17ca:	8a b1       	in	r24, 0x0a	; 10
    17cc:	88 69       	ori	r24, 0x98	; 152
    17ce:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
    17d0:	e5 e9       	ldi	r30, 0x95	; 149
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	86 60       	ori	r24, 0x06	; 6
    17d8:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
    17da:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
    17de:	87 e6       	ldi	r24, 0x67	; 103
    17e0:	89 b9       	out	0x09, r24	; 9
    17e2:	08 95       	ret

000017e4 <uart1_init>:
//must be in place for the MAX232 chip to get data.

void uart1_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//UCSR1B |= (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1); //INTERRUPTS ENABLED
  UCSR1B |= (1<<RXEN1) | (1<<TXEN1);               //INTERRUPS DISABLED
    17e4:	ea e9       	ldi	r30, 0x9A	; 154
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	88 61       	ori	r24, 0x18	; 24
    17ec:	80 83       	st	Z, r24

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);
    17ee:	ed e9       	ldi	r30, 0x9D	; 157
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	86 60       	ori	r24, 0x06	; 6
    17f6:	80 83       	st	Z, r24
  UBRR1H = (BAUDVALUE_1 >>8 ); //load upper byte of the baud rate into UBRR 
    17f8:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  UBRR1L =  BAUDVALUE_1;       //load lower byte of the baud rate into UBRR 
    17fc:	87 e6       	ldi	r24, 0x67	; 103
    17fe:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1802:	08 95       	ret

00001804 <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    1804:	80 e8       	ldi	r24, 0x80	; 128
    1806:	9e e3       	ldi	r25, 0x3E	; 62
    1808:	02 c0       	rjmp	.+4      	; 0x180e <uart_getc+0xa>
    180a:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    180c:	21 f0       	breq	.+8      	; 0x1816 <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    180e:	5f 9b       	sbis	0x0b, 7	; 11
    1810:	fc cf       	rjmp	.-8      	; 0x180a <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
    1812:	8c b1       	in	r24, 0x0c	; 12
    1814:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
    1816:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
    1818:	08 95       	ret

0000181a <uart1_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
    181a:	80 e8       	ldi	r24, 0x80	; 128
    181c:	9e e3       	ldi	r25, 0x3E	; 62
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <uart1_getc+0xa>
    1820:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    1822:	39 f0       	breq	.+14     	; 0x1832 <uart1_getc+0x18>
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
    1824:	20 91 9b 00 	lds	r18, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    1828:	27 ff       	sbrs	r18, 7
    182a:	fa cf       	rjmp	.-12     	; 0x1820 <uart1_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
    182c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1830:	08 95       	ret
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
  timer++;
  if(timer >= 16000){ return(0);}
    1832:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
}
    1834:	08 95       	ret

00001836 <__vector_33>:
    1836:	1f 92       	push	r1
    1838:	0f 92       	push	r0
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	0f 92       	push	r0
    183e:	11 24       	eor	r1, r1
    1840:	0b b6       	in	r0, 0x3b	; 59
    1842:	0f 92       	push	r0
    1844:	2f 93       	push	r18
    1846:	3f 93       	push	r19
    1848:	8f 93       	push	r24
    184a:	9f 93       	push	r25
    184c:	af 93       	push	r26
    184e:	bf 93       	push	r27
    1850:	ef 93       	push	r30
    1852:	ff 93       	push	r31
    1854:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1858:	8e 2f       	mov	r24, r30
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	fc 01       	movw	r30, r24
    185e:	38 97       	sbiw	r30, 0x08	; 8
    1860:	e1 35       	cpi	r30, 0x51	; 81
    1862:	f1 05       	cpc	r31, r1
    1864:	b0 f0       	brcs	.+44     	; 0x1892 <__vector_33+0x5c>
    1866:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    186a:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <twi_state>
    186e:	84 e0       	ldi	r24, 0x04	; 4
    1870:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1874:	ff 91       	pop	r31
    1876:	ef 91       	pop	r30
    1878:	bf 91       	pop	r27
    187a:	af 91       	pop	r26
    187c:	9f 91       	pop	r25
    187e:	8f 91       	pop	r24
    1880:	3f 91       	pop	r19
    1882:	2f 91       	pop	r18
    1884:	0f 90       	pop	r0
    1886:	0b be       	out	0x3b, r0	; 59
    1888:	0f 90       	pop	r0
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	0f 90       	pop	r0
    188e:	1f 90       	pop	r1
    1890:	18 95       	reti
    1892:	e9 57       	subi	r30, 0x79	; 121
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__tablejump2__>
    189a:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <twi_buf_ptr.1780>
    189e:	e0 91 d3 03 	lds	r30, 0x03D3	; 0x8003d3 <twi_buf>
    18a2:	f0 91 d4 03 	lds	r31, 0x03D4	; 0x8003d4 <twi_buf+0x1>
    18a6:	e8 0f       	add	r30, r24
    18a8:	f1 1d       	adc	r31, r1
    18aa:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    18ae:	80 83       	st	Z, r24
    18b0:	84 e9       	ldi	r24, 0x94	; 148
    18b2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    18b6:	de cf       	rjmp	.-68     	; 0x1874 <__vector_33+0x3e>
    18b8:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <twi_bus_addr>
    18bc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    18c0:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <twi_buf_ptr.1780>
    18c4:	85 e8       	ldi	r24, 0x85	; 133
    18c6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    18ca:	d4 cf       	rjmp	.-88     	; 0x1874 <__vector_33+0x3e>
    18cc:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <twi_buf_ptr.1780>
    18d0:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <twi_msg_size>
    18d4:	89 17       	cp	r24, r25
    18d6:	60 f7       	brcc	.-40     	; 0x18b0 <__vector_33+0x7a>
    18d8:	e0 91 d3 03 	lds	r30, 0x03D3	; 0x8003d3 <twi_buf>
    18dc:	f0 91 d4 03 	lds	r31, 0x03D4	; 0x8003d4 <twi_buf+0x1>
    18e0:	91 e0       	ldi	r25, 0x01	; 1
    18e2:	98 0f       	add	r25, r24
    18e4:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <twi_buf_ptr.1780>
    18e8:	e8 0f       	add	r30, r24
    18ea:	f1 1d       	adc	r31, r1
    18ec:	80 81       	ld	r24, Z
    18ee:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    18f2:	85 e8       	ldi	r24, 0x85	; 133
    18f4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    18f8:	bd cf       	rjmp	.-134    	; 0x1874 <__vector_33+0x3e>
    18fa:	85 ea       	ldi	r24, 0xA5	; 165
    18fc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1900:	b9 cf       	rjmp	.-142    	; 0x1874 <__vector_33+0x3e>
    1902:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <twi_buf_ptr.1780>
    1906:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <twi_msg_size>
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	28 17       	cp	r18, r24
    1912:	39 07       	cpc	r19, r25
    1914:	dc f4       	brge	.+54     	; 0x194c <__vector_33+0x116>
    1916:	85 ec       	ldi	r24, 0xC5	; 197
    1918:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    191c:	ab cf       	rjmp	.-170    	; 0x1874 <__vector_33+0x3e>
    191e:	e0 91 d3 03 	lds	r30, 0x03D3	; 0x8003d3 <twi_buf>
    1922:	f0 91 d4 03 	lds	r31, 0x03D4	; 0x8003d4 <twi_buf+0x1>
    1926:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <twi_buf_ptr.1780>
    192a:	21 e0       	ldi	r18, 0x01	; 1
    192c:	28 0f       	add	r18, r24
    192e:	20 93 ab 02 	sts	0x02AB, r18	; 0x8002ab <twi_buf_ptr.1780>
    1932:	e8 0f       	add	r30, r24
    1934:	f1 1d       	adc	r31, r1
    1936:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    193a:	80 83       	st	Z, r24
    193c:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <twi_msg_size>
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	28 17       	cp	r18, r24
    1948:	39 07       	cpc	r19, r25
    194a:	2c f3       	brlt	.-54     	; 0x1916 <__vector_33+0xe0>
    194c:	85 e8       	ldi	r24, 0x85	; 133
    194e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1952:	90 cf       	rjmp	.-224    	; 0x1874 <__vector_33+0x3e>

00001954 <twi_busy>:
    1954:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1958:	81 70       	andi	r24, 0x01	; 1
    195a:	08 95       	ret

0000195c <twi_start_wr>:
    195c:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1960:	90 fd       	sbrc	r25, 0
    1962:	fc cf       	rjmp	.-8      	; 0x195c <twi_start_wr>
    1964:	8e 7f       	andi	r24, 0xFE	; 254
    1966:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <twi_bus_addr>
    196a:	70 93 d4 03 	sts	0x03D4, r23	; 0x8003d4 <twi_buf+0x1>
    196e:	60 93 d3 03 	sts	0x03D3, r22	; 0x8003d3 <twi_buf>
    1972:	40 93 d6 03 	sts	0x03D6, r20	; 0x8003d6 <twi_msg_size>
    1976:	85 ea       	ldi	r24, 0xA5	; 165
    1978:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    197c:	08 95       	ret

0000197e <twi_start_rd>:
    197e:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1982:	90 fd       	sbrc	r25, 0
    1984:	fc cf       	rjmp	.-8      	; 0x197e <twi_start_rd>
    1986:	81 60       	ori	r24, 0x01	; 1
    1988:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <twi_bus_addr>
    198c:	70 93 d4 03 	sts	0x03D4, r23	; 0x8003d4 <twi_buf+0x1>
    1990:	60 93 d3 03 	sts	0x03D3, r22	; 0x8003d3 <twi_buf>
    1994:	40 93 d6 03 	sts	0x03D6, r20	; 0x8003d6 <twi_msg_size>
    1998:	85 ea       	ldi	r24, 0xA5	; 165
    199a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    199e:	08 95       	ret

000019a0 <init_twi>:
    19a0:	8f ef       	ldi	r24, 0xFF	; 255
    19a2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    19a6:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    19aa:	8c e0       	ldi	r24, 0x0C	; 12
    19ac:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    19b0:	08 95       	ret

000019b2 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    19b2:	91 e0       	ldi	r25, 0x01	; 1
    19b4:	81 11       	cpse	r24, r1
    19b6:	01 c0       	rjmp	.+2      	; 0x19ba <send_lcd+0x8>
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    19bc:	77 9b       	sbis	0x0e, 7	; 14
    19be:	fe cf       	rjmp	.-4      	; 0x19bc <send_lcd+0xa>
  SPDR = byte;                        //send payload
    19c0:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    19c2:	77 9b       	sbis	0x0e, 7	; 14
    19c4:	fe cf       	rjmp	.-4      	; 0x19c2 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    19c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19ca:	88 60       	ori	r24, 0x08	; 8
    19cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19d4:	87 7f       	andi	r24, 0xF7	; 247
    19d6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19da:	08 95       	ret

000019dc <refresh_lcd>:
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;
    19dc:	20 91 ad 02 	lds	r18, 0x02AD	; 0x8002ad <i.2094>
    19e0:	82 0f       	add	r24, r18
    19e2:	91 1d       	adc	r25, r1
    19e4:	fc 01       	movw	r30, r24
    19e6:	80 81       	ld	r24, Z
    19e8:	81 11       	cpse	r24, r1
    19ea:	1f c0       	rjmp	.+62     	; 0x1a2a <refresh_lcd+0x4e>
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <null_flag.2095>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    19f6:	77 9b       	sbis	0x0e, 7	; 14
    19f8:	fe cf       	rjmp	.-4      	; 0x19f6 <refresh_lcd+0x1a>
  SPDR = byte;                        //send payload
    19fa:	80 e2       	ldi	r24, 0x20	; 32
    19fc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    19fe:	77 9b       	sbis	0x0e, 7	; 14
    1a00:	fe cf       	rjmp	.-4      	; 0x19fe <refresh_lcd+0x22>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1a02:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a06:	88 60       	ori	r24, 0x08	; 8
    1a08:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a0c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a10:	87 7f       	andi	r24, 0xF7	; 247
    1a12:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
  else send_lcd(CHAR_BYTE,lcd_string_array[i]);

  i++;   //increment to next character
    1a16:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <i.2094>
    1a1a:	8f 5f       	subi	r24, 0xFF	; 255
    1a1c:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <i.2094>

  //delays are inserted to allow character to be written before moving
  //the cursor to the next line.
  if(i == 16)
    1a20:	80 31       	cpi	r24, 0x10	; 16
    1a22:	49 f1       	breq	.+82     	; 0x1a76 <refresh_lcd+0x9a>
  {
      // goto line2, 1st char
      _delay_us(40);
      line2_col1();
  }
  else if(i == 32)
    1a24:	80 32       	cpi	r24, 0x20	; 32
    1a26:	69 f0       	breq	.+26     	; 0x1a42 <refresh_lcd+0x66>
    1a28:	08 95       	ret
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
    1a2a:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <null_flag.2095>
    1a2e:	91 11       	cpse	r25, r1
    1a30:	e0 cf       	rjmp	.-64     	; 0x19f2 <refresh_lcd+0x16>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1a32:	91 e0       	ldi	r25, 0x01	; 1
    1a34:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1a36:	77 9b       	sbis	0x0e, 7	; 14
    1a38:	fe cf       	rjmp	.-4      	; 0x1a36 <refresh_lcd+0x5a>
  SPDR = byte;                        //send payload
    1a3a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1a3c:	77 9b       	sbis	0x0e, 7	; 14
    1a3e:	fe cf       	rjmp	.-4      	; 0x1a3c <refresh_lcd+0x60>
    1a40:	e0 cf       	rjmp	.-64     	; 0x1a02 <refresh_lcd+0x26>
    1a42:	85 ed       	ldi	r24, 0xD5	; 213
    1a44:	8a 95       	dec	r24
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <refresh_lcd+0x68>
    1a48:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1a4a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1a4c:	77 9b       	sbis	0x0e, 7	; 14
    1a4e:	fe cf       	rjmp	.-4      	; 0x1a4c <refresh_lcd+0x70>
  SPDR = byte;                        //send payload
    1a50:	80 e8       	ldi	r24, 0x80	; 128
    1a52:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1a54:	77 9b       	sbis	0x0e, 7	; 14
    1a56:	fe cf       	rjmp	.-4      	; 0x1a54 <refresh_lcd+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1a58:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a5c:	88 60       	ori	r24, 0x08	; 8
    1a5e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a62:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a66:	87 7f       	andi	r24, 0xF7	; 247
    1a68:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  else if(i == 32)
  {
      // goto line1, 1st char
      _delay_us(40);
      line1_col1();
      null_flag=0;
    1a6c:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <null_flag.2095>
      i=0;
    1a70:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <i.2094>
    1a74:	08 95       	ret
    1a76:	f5 ed       	ldi	r31, 0xD5	; 213
    1a78:	fa 95       	dec	r31
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <refresh_lcd+0x9c>
    1a7c:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1a7e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1a80:	77 9b       	sbis	0x0e, 7	; 14
    1a82:	fe cf       	rjmp	.-4      	; 0x1a80 <refresh_lcd+0xa4>
  SPDR = byte;                        //send payload
    1a84:	80 ec       	ldi	r24, 0xC0	; 192
    1a86:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1a88:	77 9b       	sbis	0x0e, 7	; 14
    1a8a:	fe cf       	rjmp	.-4      	; 0x1a88 <refresh_lcd+0xac>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1a8c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a90:	88 60       	ori	r24, 0x08	; 8
    1a92:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a96:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1a9a:	87 7f       	andi	r24, 0xF7	; 247
    1a9c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1aa0:	08 95       	ret

00001aa2 <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    1aa2:	66 0f       	add	r22, r22
    1aa4:	66 0f       	add	r22, r22
    1aa6:	66 0f       	add	r22, r22
    1aa8:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1aaa:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1aac:	77 9b       	sbis	0x0e, 7	; 14
    1aae:	fe cf       	rjmp	.-4      	; 0x1aac <set_custom_character+0xa>
  SPDR = byte;                        //send payload
    1ab0:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1ab2:	77 9b       	sbis	0x0e, 7	; 14
    1ab4:	fe cf       	rjmp	.-4      	; 0x1ab2 <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1ab6:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1aba:	28 60       	ori	r18, 0x08	; 8
    1abc:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1ac0:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1ac4:	27 7f       	andi	r18, 0xF7	; 247
    1ac6:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1aca:	25 ed       	ldi	r18, 0xD5	; 213
    1acc:	2a 95       	dec	r18
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <set_custom_character+0x2a>
    1ad0:	00 00       	nop
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	9c 01       	movw	r18, r24
    1ad6:	28 5f       	subi	r18, 0xF8	; 248
    1ad8:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1ada:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    1adc:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1ade:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1ae0:	77 9b       	sbis	0x0e, 7	; 14
    1ae2:	fe cf       	rjmp	.-4      	; 0x1ae0 <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
    1ae4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1ae6:	77 9b       	sbis	0x0e, 7	; 14
    1ae8:	fe cf       	rjmp	.-4      	; 0x1ae6 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1aea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1aee:	88 60       	ori	r24, 0x08	; 8
    1af0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1af4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1af8:	87 7f       	andi	r24, 0xF7	; 247
    1afa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1afe:	85 ed       	ldi	r24, 0xD5	; 213
    1b00:	8a 95       	dec	r24
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <set_custom_character+0x5e>
    1b04:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
    1b06:	e2 17       	cp	r30, r18
    1b08:	f3 07       	cpc	r31, r19
    1b0a:	41 f7       	brne	.-48     	; 0x1adc <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
    1b0c:	08 95       	ret

00001b0e <set_cursor>:
//                          set_cursor
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
    1b0e:	90 e4       	ldi	r25, 0x40	; 64
    1b10:	89 9f       	mul	r24, r25
    1b12:	60 0d       	add	r22, r0
    1b14:	11 24       	eor	r1, r1
    1b16:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1b18:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1b1a:	77 9b       	sbis	0x0e, 7	; 14
    1b1c:	fe cf       	rjmp	.-4      	; 0x1b1a <set_cursor+0xc>
  SPDR = byte;                        //send payload
    1b1e:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1b20:	77 9b       	sbis	0x0e, 7	; 14
    1b22:	fe cf       	rjmp	.-4      	; 0x1b20 <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1b24:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b28:	88 60       	ori	r24, 0x08	; 8
    1b2a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b2e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b32:	87 7f       	andi	r24, 0xF7	; 247
    1b34:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b38:	08 95       	ret

00001b3a <uint2lcd>:
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    1b3a:	81 11       	cpse	r24, r1
    1b3c:	13 c0       	rjmp	.+38     	; 0x1b64 <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1b42:	77 9b       	sbis	0x0e, 7	; 14
    1b44:	fe cf       	rjmp	.-4      	; 0x1b42 <uint2lcd+0x8>
  SPDR = byte;                        //send payload
    1b46:	80 e3       	ldi	r24, 0x30	; 48
    1b48:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1b4a:	77 9b       	sbis	0x0e, 7	; 14
    1b4c:	fe cf       	rjmp	.-4      	; 0x1b4a <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1b4e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b52:	88 60       	ori	r24, 0x08	; 8
    1b54:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b58:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b5c:	87 7f       	andi	r24, 0xF7	; 247
    1b5e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1b62:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    1b64:	84 36       	cpi	r24, 0x64	; 100
    1b66:	b0 f4       	brcc	.+44     	; 0x1b94 <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    1b68:	8a 30       	cpi	r24, 0x0A	; 10
    1b6a:	60 f5       	brcc	.+88     	; 0x1bc4 <uint2lcd+0x8a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1b6c:	91 e0       	ldi	r25, 0x01	; 1
    1b6e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1b70:	77 9b       	sbis	0x0e, 7	; 14
    1b72:	fe cf       	rjmp	.-4      	; 0x1b70 <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    1b74:	9d ec       	ldi	r25, 0xCD	; 205
    1b76:	89 9f       	mul	r24, r25
    1b78:	91 2d       	mov	r25, r1
    1b7a:	11 24       	eor	r1, r1
    1b7c:	96 95       	lsr	r25
    1b7e:	96 95       	lsr	r25
    1b80:	96 95       	lsr	r25
    1b82:	2a e0       	ldi	r18, 0x0A	; 10
    1b84:	92 9f       	mul	r25, r18
    1b86:	80 19       	sub	r24, r0
    1b88:	11 24       	eor	r1, r1
    1b8a:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
    1b8c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1b8e:	77 9b       	sbis	0x0e, 7	; 14
    1b90:	fe cf       	rjmp	.-4      	; 0x1b8e <uint2lcd+0x54>
    1b92:	dd cf       	rjmp	.-70     	; 0x1b4e <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    1b94:	99 e2       	ldi	r25, 0x29	; 41
    1b96:	89 9f       	mul	r24, r25
    1b98:	91 2d       	mov	r25, r1
    1b9a:	11 24       	eor	r1, r1
    1b9c:	92 95       	swap	r25
    1b9e:	9f 70       	andi	r25, 0x0F	; 15
    1ba0:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1ba2:	21 e0       	ldi	r18, 0x01	; 1
    1ba4:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1ba6:	77 9b       	sbis	0x0e, 7	; 14
    1ba8:	fe cf       	rjmp	.-4      	; 0x1ba6 <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
    1baa:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1bac:	77 9b       	sbis	0x0e, 7	; 14
    1bae:	fe cf       	rjmp	.-4      	; 0x1bac <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1bb0:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1bb4:	98 60       	ori	r25, 0x08	; 8
    1bb6:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1bba:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1bbe:	97 7f       	andi	r25, 0xF7	; 247
    1bc0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    1bc4:	99 e2       	ldi	r25, 0x29	; 41
    1bc6:	89 9f       	mul	r24, r25
    1bc8:	91 2d       	mov	r25, r1
    1bca:	11 24       	eor	r1, r1
    1bcc:	92 95       	swap	r25
    1bce:	9f 70       	andi	r25, 0x0F	; 15
    1bd0:	38 2f       	mov	r19, r24
    1bd2:	24 e6       	ldi	r18, 0x64	; 100
    1bd4:	92 9f       	mul	r25, r18
    1bd6:	30 19       	sub	r19, r0
    1bd8:	11 24       	eor	r1, r1
    1bda:	2d ec       	ldi	r18, 0xCD	; 205
    1bdc:	32 9f       	mul	r19, r18
    1bde:	91 2d       	mov	r25, r1
    1be0:	11 24       	eor	r1, r1
    1be2:	96 95       	lsr	r25
    1be4:	96 95       	lsr	r25
    1be6:	96 95       	lsr	r25
    1be8:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1bea:	21 e0       	ldi	r18, 0x01	; 1
    1bec:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1bee:	77 9b       	sbis	0x0e, 7	; 14
    1bf0:	fe cf       	rjmp	.-4      	; 0x1bee <uint2lcd+0xb4>
  SPDR = byte;                        //send payload
    1bf2:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1bf4:	77 9b       	sbis	0x0e, 7	; 14
    1bf6:	fe cf       	rjmp	.-4      	; 0x1bf4 <uint2lcd+0xba>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1bf8:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1bfc:	98 60       	ori	r25, 0x08	; 8
    1bfe:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1c02:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1c06:	97 7f       	andi	r25, 0xF7	; 247
    1c08:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1c0c:	af cf       	rjmp	.-162    	; 0x1b6c <uint2lcd+0x32>

00001c0e <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
    1c0e:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
    1c10:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1c14:	91 e0       	ldi	r25, 0x01	; 1
    1c16:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1c18:	77 9b       	sbis	0x0e, 7	; 14
    1c1a:	fe cf       	rjmp	.-4      	; 0x1c18 <int2lcd+0xa>
  SPDR = byte;                        //send payload
    1c1c:	9d e2       	ldi	r25, 0x2D	; 45
    1c1e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1c20:	77 9b       	sbis	0x0e, 7	; 14
    1c22:	fe cf       	rjmp	.-4      	; 0x1c20 <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1c24:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1c28:	98 60       	ori	r25, 0x08	; 8
    1c2a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1c2e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1c32:	97 7f       	andi	r25, 0xF7	; 247
    1c34:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1c38:	95 ed       	ldi	r25, 0xD5	; 213
    1c3a:	9a 95       	dec	r25
    1c3c:	f1 f7       	brne	.-4      	; 0x1c3a <int2lcd+0x2c>
    1c3e:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
    1c40:	81 95       	neg	r24
    1c42:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <uint2lcd>

00001c46 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1c46:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1c48:	77 9b       	sbis	0x0e, 7	; 14
    1c4a:	fe cf       	rjmp	.-4      	; 0x1c48 <cursor_on+0x2>
  SPDR = byte;                        //send payload
    1c4c:	8e e0       	ldi	r24, 0x0E	; 14
    1c4e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1c50:	77 9b       	sbis	0x0e, 7	; 14
    1c52:	fe cf       	rjmp	.-4      	; 0x1c50 <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1c54:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1c58:	88 60       	ori	r24, 0x08	; 8
    1c5a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1c5e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1c62:	87 7f       	andi	r24, 0xF7	; 247
    1c64:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1c68:	08 95       	ret

00001c6a <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1c6a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1c6c:	77 9b       	sbis	0x0e, 7	; 14
    1c6e:	fe cf       	rjmp	.-4      	; 0x1c6c <cursor_off+0x2>
  SPDR = byte;                        //send payload
    1c70:	8c e0       	ldi	r24, 0x0C	; 12
    1c72:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1c74:	77 9b       	sbis	0x0e, 7	; 14
    1c76:	fe cf       	rjmp	.-4      	; 0x1c74 <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1c78:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1c7c:	88 60       	ori	r24, 0x08	; 8
    1c7e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1c82:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1c86:	87 7f       	andi	r24, 0xF7	; 247
    1c88:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1c8c:	08 95       	ret

00001c8e <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1c8e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1c90:	77 9b       	sbis	0x0e, 7	; 14
    1c92:	fe cf       	rjmp	.-4      	; 0x1c90 <shift_right+0x2>
  SPDR = byte;                        //send payload
    1c94:	8e e1       	ldi	r24, 0x1E	; 30
    1c96:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1c98:	77 9b       	sbis	0x0e, 7	; 14
    1c9a:	fe cf       	rjmp	.-4      	; 0x1c98 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1c9c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1ca0:	88 60       	ori	r24, 0x08	; 8
    1ca2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1ca6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1caa:	87 7f       	andi	r24, 0xF7	; 247
    1cac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1cb0:	08 95       	ret

00001cb2 <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1cb2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1cb4:	77 9b       	sbis	0x0e, 7	; 14
    1cb6:	fe cf       	rjmp	.-4      	; 0x1cb4 <shift_left+0x2>
  SPDR = byte;                        //send payload
    1cb8:	88 e1       	ldi	r24, 0x18	; 24
    1cba:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1cbc:	77 9b       	sbis	0x0e, 7	; 14
    1cbe:	fe cf       	rjmp	.-4      	; 0x1cbc <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1cc0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1cc4:	88 60       	ori	r24, 0x08	; 8
    1cc6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1cca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1cce:	87 7f       	andi	r24, 0xF7	; 247
    1cd0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1cd4:	08 95       	ret

00001cd6 <strobe_lcd>:
    1cd6:	e2 e6       	ldi	r30, 0x62	; 98
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	88 60       	ori	r24, 0x08	; 8
    1cde:	80 83       	st	Z, r24
    1ce0:	80 81       	ld	r24, Z
    1ce2:	87 7f       	andi	r24, 0xF7	; 247
    1ce4:	80 83       	st	Z, r24
    1ce6:	08 95       	ret

00001ce8 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1ce8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1cea:	77 9b       	sbis	0x0e, 7	; 14
    1cec:	fe cf       	rjmp	.-4      	; 0x1cea <clear_display+0x2>
  SPDR = byte;                        //send payload
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1cf2:	77 9b       	sbis	0x0e, 7	; 14
    1cf4:	fe cf       	rjmp	.-4      	; 0x1cf2 <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1cf6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1cfa:	88 60       	ori	r24, 0x08	; 8
    1cfc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d00:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d04:	87 7f       	andi	r24, 0xF7	; 247
    1d06:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d0a:	8f e1       	ldi	r24, 0x1F	; 31
    1d0c:	9c e1       	ldi	r25, 0x1C	; 28
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <clear_display+0x26>
    1d12:	00 c0       	rjmp	.+0      	; 0x1d14 <clear_display+0x2c>
    1d14:	00 00       	nop
    1d16:	08 95       	ret

00001d18 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1d18:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1d1a:	77 9b       	sbis	0x0e, 7	; 14
    1d1c:	fe cf       	rjmp	.-4      	; 0x1d1a <cursor_home+0x2>
  SPDR = byte;                        //send payload
    1d1e:	82 e0       	ldi	r24, 0x02	; 2
    1d20:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1d22:	77 9b       	sbis	0x0e, 7	; 14
    1d24:	fe cf       	rjmp	.-4      	; 0x1d22 <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1d26:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d2a:	88 60       	ori	r24, 0x08	; 8
    1d2c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d30:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d34:	87 7f       	andi	r24, 0xF7	; 247
    1d36:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d3a:	8f e6       	ldi	r24, 0x6F	; 111
    1d3c:	97 e1       	ldi	r25, 0x17	; 23
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <cursor_home+0x26>
    1d42:	00 c0       	rjmp	.+0      	; 0x1d44 <cursor_home+0x2c>
    1d44:	00 00       	nop
    1d46:	08 95       	ret

00001d48 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1d48:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1d4a:	77 9b       	sbis	0x0e, 7	; 14
    1d4c:	fe cf       	rjmp	.-4      	; 0x1d4a <line2_col1+0x2>
  SPDR = byte;                        //send payload
    1d4e:	80 ec       	ldi	r24, 0xC0	; 192
    1d50:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1d52:	77 9b       	sbis	0x0e, 7	; 14
    1d54:	fe cf       	rjmp	.-4      	; 0x1d52 <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1d56:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d5a:	88 60       	ori	r24, 0x08	; 8
    1d5c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d60:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d64:	87 7f       	andi	r24, 0xF7	; 247
    1d66:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d6a:	08 95       	ret

00001d6c <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1d6c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1d6e:	77 9b       	sbis	0x0e, 7	; 14
    1d70:	fe cf       	rjmp	.-4      	; 0x1d6e <line1_col1+0x2>
  SPDR = byte;                        //send payload
    1d72:	80 e8       	ldi	r24, 0x80	; 128
    1d74:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1d76:	77 9b       	sbis	0x0e, 7	; 14
    1d78:	fe cf       	rjmp	.-4      	; 0x1d76 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1d7a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d7e:	88 60       	ori	r24, 0x08	; 8
    1d80:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d84:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d88:	87 7f       	andi	r24, 0xF7	; 247
    1d8a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1d8e:	08 95       	ret

00001d90 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
    1d90:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1d92:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
    1d94:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1d96:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1d98:	77 9b       	sbis	0x0e, 7	; 14
    1d9a:	fe cf       	rjmp	.-4      	; 0x1d98 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
    1d9c:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1d9e:	77 9b       	sbis	0x0e, 7	; 14
    1da0:	fe cf       	rjmp	.-4      	; 0x1d9e <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1da2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1da6:	88 60       	ori	r24, 0x08	; 8
    1da8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1dac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1db0:	87 7f       	andi	r24, 0xF7	; 247
    1db2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1db6:	85 ed       	ldi	r24, 0xD5	; 213
    1db8:	8a 95       	dec	r24
    1dba:	f1 f7       	brne	.-4      	; 0x1db8 <fill_spaces+0x28>
    1dbc:	00 00       	nop
    1dbe:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
    1dc0:	51 f7       	brne	.-44     	; 0x1d96 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ');
                _delay_us(40);  //40us wait between characters
	}
}
    1dc2:	08 95       	ret

00001dc4 <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1dc4:	91 e0       	ldi	r25, 0x01	; 1
    1dc6:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1dc8:	77 9b       	sbis	0x0e, 7	; 14
    1dca:	fe cf       	rjmp	.-4      	; 0x1dc8 <char2lcd+0x4>
  SPDR = byte;                        //send payload
    1dcc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1dce:	77 9b       	sbis	0x0e, 7	; 14
    1dd0:	fe cf       	rjmp	.-4      	; 0x1dce <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1dd2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1dd6:	88 60       	ori	r24, 0x08	; 8
    1dd8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1ddc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1de0:	87 7f       	andi	r24, 0xF7	; 247
    1de2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1de6:	08 95       	ret

00001de8 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
    1de8:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    1dea:	40 e0       	ldi	r20, 0x00	; 0
    1dec:	50 e0       	ldi	r21, 0x00	; 0
    1dee:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1df0:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    1df2:	df 01       	movw	r26, r30
    1df4:	a4 0f       	add	r26, r20
    1df6:	b5 1f       	adc	r27, r21
    1df8:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1dfa:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1dfc:	77 9b       	sbis	0x0e, 7	; 14
    1dfe:	fe cf       	rjmp	.-4      	; 0x1dfc <string2lcd+0x14>
  SPDR = byte;                        //send payload
    1e00:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1e02:	77 9b       	sbis	0x0e, 7	; 14
    1e04:	fe cf       	rjmp	.-4      	; 0x1e02 <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1e06:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1e0a:	98 60       	ori	r25, 0x08	; 8
    1e0c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1e10:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1e14:	97 7f       	andi	r25, 0xF7	; 247
    1e16:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1e1a:	85 ed       	ldi	r24, 0xD5	; 213
    1e1c:	8a 95       	dec	r24
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <string2lcd+0x34>
    1e20:	00 00       	nop
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    1e22:	6f 5f       	subi	r22, 0xFF	; 255
    1e24:	46 2f       	mov	r20, r22
    1e26:	50 e0       	ldi	r21, 0x00	; 0
    1e28:	df 01       	movw	r26, r30
    1e2a:	0d 90       	ld	r0, X+
    1e2c:	00 20       	and	r0, r0
    1e2e:	e9 f7       	brne	.-6      	; 0x1e2a <string2lcd+0x42>
    1e30:	9d 01       	movw	r18, r26
    1e32:	2e 1b       	sub	r18, r30
    1e34:	3f 0b       	sbc	r19, r31
    1e36:	22 50       	subi	r18, 0x02	; 2
    1e38:	31 09       	sbc	r19, r1
    1e3a:	24 17       	cp	r18, r20
    1e3c:	35 07       	cpc	r19, r21
    1e3e:	c8 f6       	brcc	.-78     	; 0x1df2 <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }
}
    1e40:	08 95       	ret

00001e42 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e42:	8f ef       	ldi	r24, 0xFF	; 255
    1e44:	99 ef       	ldi	r25, 0xF9	; 249
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <lcd_init+0x4>
    1e4a:	00 c0       	rjmp	.+0      	; 0x1e4c <lcd_init+0xa>
    1e4c:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
    1e4e:	88 e0       	ldi	r24, 0x08	; 8
    1e50:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1e54:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1e56:	77 9b       	sbis	0x0e, 7	; 14
    1e58:	fe cf       	rjmp	.-4      	; 0x1e56 <lcd_init+0x14>
  SPDR = byte;                        //send payload
    1e5a:	80 e3       	ldi	r24, 0x30	; 48
    1e5c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1e5e:	77 9b       	sbis	0x0e, 7	; 14
    1e60:	fe cf       	rjmp	.-4      	; 0x1e5e <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1e62:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1e66:	88 60       	ori	r24, 0x08	; 8
    1e68:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1e6c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1e70:	87 7f       	andi	r24, 0xF7	; 247
    1e72:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1e76:	8f e5       	ldi	r24, 0x5F	; 95
    1e78:	9d e6       	ldi	r25, 0x6D	; 109
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <lcd_init+0x38>
    1e7e:	00 c0       	rjmp	.+0      	; 0x1e80 <lcd_init+0x3e>
    1e80:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1e82:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1e84:	77 9b       	sbis	0x0e, 7	; 14
    1e86:	fe cf       	rjmp	.-4      	; 0x1e84 <lcd_init+0x42>
  SPDR = byte;                        //send payload
    1e88:	80 e3       	ldi	r24, 0x30	; 48
    1e8a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1e8c:	77 9b       	sbis	0x0e, 7	; 14
    1e8e:	fe cf       	rjmp	.-4      	; 0x1e8c <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1e90:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1e94:	88 60       	ori	r24, 0x08	; 8
    1e96:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1e9a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1e9e:	87 7f       	andi	r24, 0xF7	; 247
    1ea0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1ea4:	8f e5       	ldi	r24, 0x5F	; 95
    1ea6:	9d e6       	ldi	r25, 0x6D	; 109
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	f1 f7       	brne	.-4      	; 0x1ea8 <lcd_init+0x66>
    1eac:	00 c0       	rjmp	.+0      	; 0x1eae <lcd_init+0x6c>
    1eae:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1eb0:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1eb2:	77 9b       	sbis	0x0e, 7	; 14
    1eb4:	fe cf       	rjmp	.-4      	; 0x1eb2 <lcd_init+0x70>
  SPDR = byte;                        //send payload
    1eb6:	80 e3       	ldi	r24, 0x30	; 48
    1eb8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1eba:	77 9b       	sbis	0x0e, 7	; 14
    1ebc:	fe cf       	rjmp	.-4      	; 0x1eba <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1ebe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1ec2:	88 60       	ori	r24, 0x08	; 8
    1ec4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1ec8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1ecc:	87 7f       	andi	r24, 0xF7	; 247
    1ece:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1ed2:	8f e5       	ldi	r24, 0x5F	; 95
    1ed4:	9d e6       	ldi	r25, 0x6D	; 109
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	f1 f7       	brne	.-4      	; 0x1ed6 <lcd_init+0x94>
    1eda:	00 c0       	rjmp	.+0      	; 0x1edc <lcd_init+0x9a>
    1edc:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1ede:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1ee0:	77 9b       	sbis	0x0e, 7	; 14
    1ee2:	fe cf       	rjmp	.-4      	; 0x1ee0 <lcd_init+0x9e>
  SPDR = byte;                        //send payload
    1ee4:	88 e3       	ldi	r24, 0x38	; 56
    1ee6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1ee8:	77 9b       	sbis	0x0e, 7	; 14
    1eea:	fe cf       	rjmp	.-4      	; 0x1ee8 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1eec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1ef0:	88 60       	ori	r24, 0x08	; 8
    1ef2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1ef6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1efa:	87 7f       	andi	r24, 0xF7	; 247
    1efc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1f00:	8f e1       	ldi	r24, 0x1F	; 31
    1f02:	9e e4       	ldi	r25, 0x4E	; 78
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <lcd_init+0xc2>
    1f08:	00 c0       	rjmp	.+0      	; 0x1f0a <lcd_init+0xc8>
    1f0a:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1f0c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1f0e:	77 9b       	sbis	0x0e, 7	; 14
    1f10:	fe cf       	rjmp	.-4      	; 0x1f0e <lcd_init+0xcc>
  SPDR = byte;                        //send payload
    1f12:	88 e0       	ldi	r24, 0x08	; 8
    1f14:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1f16:	77 9b       	sbis	0x0e, 7	; 14
    1f18:	fe cf       	rjmp	.-4      	; 0x1f16 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1f1a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1f1e:	88 60       	ori	r24, 0x08	; 8
    1f20:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1f24:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1f28:	87 7f       	andi	r24, 0xF7	; 247
    1f2a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1f2e:	8f e1       	ldi	r24, 0x1F	; 31
    1f30:	9e e4       	ldi	r25, 0x4E	; 78
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <lcd_init+0xf0>
    1f36:	00 c0       	rjmp	.+0      	; 0x1f38 <lcd_init+0xf6>
    1f38:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1f3a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1f3c:	77 9b       	sbis	0x0e, 7	; 14
    1f3e:	fe cf       	rjmp	.-4      	; 0x1f3c <lcd_init+0xfa>
  SPDR = byte;                        //send payload
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1f44:	77 9b       	sbis	0x0e, 7	; 14
    1f46:	fe cf       	rjmp	.-4      	; 0x1f44 <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1f48:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1f4c:	88 60       	ori	r24, 0x08	; 8
    1f4e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1f52:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1f56:	87 7f       	andi	r24, 0xF7	; 247
    1f58:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1f5c:	8f e1       	ldi	r24, 0x1F	; 31
    1f5e:	9e e4       	ldi	r25, 0x4E	; 78
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <lcd_init+0x11e>
    1f64:	00 c0       	rjmp	.+0      	; 0x1f66 <lcd_init+0x124>
    1f66:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1f68:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1f6a:	77 9b       	sbis	0x0e, 7	; 14
    1f6c:	fe cf       	rjmp	.-4      	; 0x1f6a <lcd_init+0x128>
  SPDR = byte;                        //send payload
    1f6e:	86 e0       	ldi	r24, 0x06	; 6
    1f70:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1f72:	77 9b       	sbis	0x0e, 7	; 14
    1f74:	fe cf       	rjmp	.-4      	; 0x1f72 <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1f76:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1f7a:	88 60       	ori	r24, 0x08	; 8
    1f7c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1f80:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1f84:	87 7f       	andi	r24, 0xF7	; 247
    1f86:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1f8a:	8f e1       	ldi	r24, 0x1F	; 31
    1f8c:	9e e4       	ldi	r25, 0x4E	; 78
    1f8e:	01 97       	sbiw	r24, 0x01	; 1
    1f90:	f1 f7       	brne	.-4      	; 0x1f8e <lcd_init+0x14c>
    1f92:	00 c0       	rjmp	.+0      	; 0x1f94 <lcd_init+0x152>
    1f94:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1f96:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1f98:	77 9b       	sbis	0x0e, 7	; 14
    1f9a:	fe cf       	rjmp	.-4      	; 0x1f98 <lcd_init+0x156>
  SPDR = byte;                        //send payload
    1f9c:	8c e0       	ldi	r24, 0x0C	; 12
    1f9e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1fa0:	77 9b       	sbis	0x0e, 7	; 14
    1fa2:	fe cf       	rjmp	.-4      	; 0x1fa0 <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1fa4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1fa8:	88 60       	ori	r24, 0x08	; 8
    1faa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1fae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1fb2:	87 7f       	andi	r24, 0xF7	; 247
    1fb4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1fb8:	8f e1       	ldi	r24, 0x1F	; 31
    1fba:	9e e4       	ldi	r25, 0x4E	; 78
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <lcd_init+0x17a>
    1fc0:	00 c0       	rjmp	.+0      	; 0x1fc2 <lcd_init+0x180>
    1fc2:	00 00       	nop
    1fc4:	08 95       	ret

00001fc6 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    1fc6:	4f 92       	push	r4
    1fc8:	5f 92       	push	r5
    1fca:	6f 92       	push	r6
    1fcc:	7f 92       	push	r7
    1fce:	8f 92       	push	r8
    1fd0:	9f 92       	push	r9
    1fd2:	af 92       	push	r10
    1fd4:	bf 92       	push	r11
    1fd6:	cf 92       	push	r12
    1fd8:	df 92       	push	r13
    1fda:	ef 92       	push	r14
    1fdc:	ff 92       	push	r15
    1fde:	0f 93       	push	r16
    1fe0:	1f 93       	push	r17
    1fe2:	cf 93       	push	r28
    1fe4:	df 93       	push	r29
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	69 97       	sbiw	r28, 0x19	; 25
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
    1ff6:	14 2f       	mov	r17, r20
    1ff8:	42 2e       	mov	r4, r18
    1ffa:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient

      if (bSigned){
    1ffc:	00 23       	and	r16, r16
    1ffe:	79 f0       	breq	.+30     	; 0x201e <lcd_int32+0x58>
        bSigned = (qr.quot<0);
    2000:	6b 01       	movw	r12, r22
    2002:	7c 01       	movw	r14, r24
    2004:	cc 24       	eor	r12, r12
    2006:	f7 fc       	sbrc	r15, 7
    2008:	c3 94       	inc	r12
    200a:	dd 24       	eor	r13, r13
    200c:	ee 24       	eor	r14, r14
    200e:	ff 24       	eor	r15, r15
    2010:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
    2012:	6b 01       	movw	r12, r22
    2014:	7c 01       	movw	r14, r24
    2016:	97 fd       	sbrc	r25, 7
    2018:	a3 c0       	rjmp	.+326    	; 0x2160 <lcd_int32+0x19a>
    201a:	c7 01       	movw	r24, r14
    201c:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point
      if (decpos){
    201e:	44 20       	and	r4, r4
    2020:	09 f4       	brne	.+2      	; 0x2024 <lcd_int32+0x5e>
    2022:	96 c0       	rjmp	.+300    	; 0x2150 <lcd_int32+0x18a>
    2024:	9e 01       	movw	r18, r28
    2026:	2f 5f       	subi	r18, 0xFF	; 255
    2028:	3f 4f       	sbci	r19, 0xFF	; 255
    202a:	59 01       	movw	r10, r18
    202c:	49 01       	movw	r8, r18
    202e:	66 24       	eor	r6, r6
    2030:	6a 94       	dec	r6
    2032:	64 0c       	add	r6, r4
    2034:	71 2c       	mov	r7, r1
    2036:	3f ef       	ldi	r19, 0xFF	; 255
    2038:	63 1a       	sub	r6, r19
    203a:	73 0a       	sbc	r7, r19
    203c:	6a 0c       	add	r6, r10
    203e:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    2040:	2a e0       	ldi	r18, 0x0A	; 10
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e0       	ldi	r20, 0x00	; 0
    2046:	50 e0       	ldi	r21, 0x00	; 0
    2048:	0e 94 0c 13 	call	0x2618	; 0x2618 <__divmodsi4>
    204c:	e6 2f       	mov	r30, r22
    204e:	2a 8b       	std	Y+18, r18	; 0x12
    2050:	3b 8b       	std	Y+19, r19	; 0x13
    2052:	4c 8b       	std	Y+20, r20	; 0x14
    2054:	5d 8b       	std	Y+21, r21	; 0x15
    2056:	6a 89       	ldd	r22, Y+18	; 0x12
    2058:	7b 89       	ldd	r23, Y+19	; 0x13
    205a:	8c 89       	ldd	r24, Y+20	; 0x14
    205c:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    205e:	20 e3       	ldi	r18, 0x30	; 48
    2060:	2e 0f       	add	r18, r30
    2062:	f4 01       	movw	r30, r8
    2064:	21 93       	st	Z+, r18
    2066:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point
      if (decpos){
        for (; decpos ; decpos--){
    2068:	6e 16       	cp	r6, r30
    206a:	7f 06       	cpc	r7, r31
    206c:	49 f7       	brne	.-46     	; 0x2040 <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    206e:	99 24       	eor	r9, r9
    2070:	93 94       	inc	r9
    2072:	94 0c       	add	r9, r4
    2074:	f5 01       	movw	r30, r10
    2076:	e4 0d       	add	r30, r4
    2078:	f1 1d       	adc	r31, r1
    207a:	2e e2       	ldi	r18, 0x2E	; 46
    207c:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point
      do{
          qr = ldiv(qr.quot, 10);
    207e:	2a e0       	ldi	r18, 0x0A	; 10
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e0       	ldi	r20, 0x00	; 0
    2084:	50 e0       	ldi	r21, 0x00	; 0
    2086:	0e 94 0c 13 	call	0x2618	; 0x2618 <__divmodsi4>
    208a:	e6 2f       	mov	r30, r22
    208c:	2a 8b       	std	Y+18, r18	; 0x12
    208e:	3b 8b       	std	Y+19, r19	; 0x13
    2090:	4c 8b       	std	Y+20, r20	; 0x14
    2092:	5d 8b       	std	Y+21, r21	; 0x15
    2094:	6e 8b       	std	Y+22, r22	; 0x16
    2096:	7f 8b       	std	Y+23, r23	; 0x17
    2098:	88 8f       	std	Y+24, r24	; 0x18
    209a:	99 8f       	std	Y+25, r25	; 0x19
    209c:	6a 89       	ldd	r22, Y+18	; 0x12
    209e:	7b 89       	ldd	r23, Y+19	; 0x13
    20a0:	8c 89       	ldd	r24, Y+20	; 0x14
    20a2:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    20a4:	31 e0       	ldi	r19, 0x01	; 1
    20a6:	39 0d       	add	r19, r9
    20a8:	d5 01       	movw	r26, r10
    20aa:	a9 0d       	add	r26, r9
    20ac:	b1 1d       	adc	r27, r1
    20ae:	e0 5d       	subi	r30, 0xD0	; 208
    20b0:	ec 93       	st	X, r30
    20b2:	93 2e       	mov	r9, r19
        }while(qr.quot);
    20b4:	61 15       	cp	r22, r1
    20b6:	71 05       	cpc	r23, r1
    20b8:	81 05       	cpc	r24, r1
    20ba:	91 05       	cpc	r25, r1
    20bc:	01 f7       	brne	.-64     	; 0x207e <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
    20be:	11 23       	and	r17, r17
    20c0:	61 f0       	breq	.+24     	; 0x20da <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    20c2:	51 10       	cpse	r5, r1
    20c4:	4b c0       	rjmp	.+150    	; 0x215c <lcd_int32+0x196>
    20c6:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    20c8:	31 17       	cp	r19, r17
    20ca:	38 f4       	brcc	.+14     	; 0x20da <lcd_int32+0x114>
    20cc:	f5 01       	movw	r30, r10
    20ce:	e3 0f       	add	r30, r19
    20d0:	f1 1d       	adc	r31, r1
    20d2:	90 83       	st	Z, r25
    20d4:	3f 5f       	subi	r19, 0xFF	; 255
    20d6:	13 13       	cpse	r17, r19
    20d8:	f9 cf       	rjmp	.-14     	; 0x20cc <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    20da:	00 23       	and	r16, r16
    20dc:	31 f0       	breq	.+12     	; 0x20ea <lcd_int32+0x124>
    20de:	f5 01       	movw	r30, r10
    20e0:	e3 0f       	add	r30, r19
    20e2:	f1 1d       	adc	r31, r1
    20e4:	9d e2       	ldi	r25, 0x2D	; 45
    20e6:	90 83       	st	Z, r25
    20e8:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    20ea:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    20ec:	31 50       	subi	r19, 0x01	; 1
    20ee:	f5 01       	movw	r30, r10
    20f0:	e3 0f       	add	r30, r19
    20f2:	f1 1d       	adc	r31, r1
    20f4:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    20f6:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    20f8:	77 9b       	sbis	0x0e, 7	; 14
    20fa:	fe cf       	rjmp	.-4      	; 0x20f8 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
    20fc:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    20fe:	77 9b       	sbis	0x0e, 7	; 14
    2100:	fe cf       	rjmp	.-4      	; 0x20fe <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    2102:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    2106:	98 60       	ori	r25, 0x08	; 8
    2108:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    210c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    2110:	97 7f       	andi	r25, 0xF7	; 247
    2112:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2116:	85 ed       	ldi	r24, 0xD5	; 213
    2118:	8a 95       	dec	r24
    211a:	f1 f7       	brne	.-4      	; 0x2118 <lcd_int32+0x152>
    211c:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    211e:	31 11       	cpse	r19, r1
    2120:	e5 cf       	rjmp	.-54     	; 0x20ec <lcd_int32+0x126>

}
    2122:	69 96       	adiw	r28, 0x19	; 25
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	cd bf       	out	0x3d, r28	; 61
    212e:	df 91       	pop	r29
    2130:	cf 91       	pop	r28
    2132:	1f 91       	pop	r17
    2134:	0f 91       	pop	r16
    2136:	ff 90       	pop	r15
    2138:	ef 90       	pop	r14
    213a:	df 90       	pop	r13
    213c:	cf 90       	pop	r12
    213e:	bf 90       	pop	r11
    2140:	af 90       	pop	r10
    2142:	9f 90       	pop	r9
    2144:	8f 90       	pop	r8
    2146:	7f 90       	pop	r7
    2148:	6f 90       	pop	r6
    214a:	5f 90       	pop	r5
    214c:	4f 90       	pop	r4
    214e:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    2150:	91 2c       	mov	r9, r1
    2152:	9e 01       	movw	r18, r28
    2154:	2f 5f       	subi	r18, 0xFF	; 255
    2156:	3f 4f       	sbci	r19, 0xFF	; 255
    2158:	59 01       	movw	r10, r18
    215a:	91 cf       	rjmp	.-222    	; 0x207e <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    215c:	90 e3       	ldi	r25, 0x30	; 48
    215e:	b4 cf       	rjmp	.-152    	; 0x20c8 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    2160:	f0 94       	com	r15
    2162:	e0 94       	com	r14
    2164:	d0 94       	com	r13
    2166:	c0 94       	com	r12
    2168:	c1 1c       	adc	r12, r1
    216a:	d1 1c       	adc	r13, r1
    216c:	e1 1c       	adc	r14, r1
    216e:	f1 1c       	adc	r15, r1
    2170:	54 cf       	rjmp	.-344    	; 0x201a <lcd_int32+0x54>

00002172 <lcd_int16>:
    2172:	5f 92       	push	r5
    2174:	6f 92       	push	r6
    2176:	7f 92       	push	r7
    2178:	8f 92       	push	r8
    217a:	9f 92       	push	r9
    217c:	af 92       	push	r10
    217e:	bf 92       	push	r11
    2180:	cf 92       	push	r12
    2182:	df 92       	push	r13
    2184:	ef 92       	push	r14
    2186:	ff 92       	push	r15
    2188:	0f 93       	push	r16
    218a:	1f 93       	push	r17
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	61 97       	sbiw	r28, 0x11	; 17
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
    21a0:	5c 01       	movw	r10, r24
    21a2:	96 2e       	mov	r9, r22
    21a4:	54 2e       	mov	r5, r20
    21a6:	62 2e       	mov	r6, r18
    21a8:	8b 2c       	mov	r8, r11
    21aa:	88 1c       	adc	r8, r8
    21ac:	88 24       	eor	r8, r8
    21ae:	88 1c       	adc	r8, r8
    21b0:	78 2c       	mov	r7, r8
    21b2:	9c 01       	movw	r18, r24
    21b4:	97 fd       	sbrc	r25, 7
    21b6:	9d c0       	rjmp	.+314    	; 0x22f2 <lcd_int16+0x180>
    21b8:	55 20       	and	r5, r5
    21ba:	09 f4       	brne	.+2      	; 0x21be <lcd_int16+0x4c>
    21bc:	8e c0       	rjmp	.+284    	; 0x22da <lcd_int16+0x168>
    21be:	8e 01       	movw	r16, r28
    21c0:	0f 5f       	subi	r16, 0xFF	; 255
    21c2:	1f 4f       	sbci	r17, 0xFF	; 255
    21c4:	78 01       	movw	r14, r16
    21c6:	cc 24       	eor	r12, r12
    21c8:	ca 94       	dec	r12
    21ca:	c5 0c       	add	r12, r5
    21cc:	d1 2c       	mov	r13, r1
    21ce:	8f ef       	ldi	r24, 0xFF	; 255
    21d0:	c8 1a       	sub	r12, r24
    21d2:	d8 0a       	sbc	r13, r24
    21d4:	c0 0e       	add	r12, r16
    21d6:	d1 1e       	adc	r13, r17
    21d8:	6a e0       	ldi	r22, 0x0A	; 10
    21da:	70 e0       	ldi	r23, 0x00	; 0
    21dc:	c9 01       	movw	r24, r18
    21de:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__divmodhi4>
    21e2:	46 2f       	mov	r20, r22
    21e4:	24 2f       	mov	r18, r20
    21e6:	37 2f       	mov	r19, r23
    21e8:	80 5d       	subi	r24, 0xD0	; 208
    21ea:	f7 01       	movw	r30, r14
    21ec:	81 93       	st	Z+, r24
    21ee:	7f 01       	movw	r14, r30
    21f0:	ec 15       	cp	r30, r12
    21f2:	fd 05       	cpc	r31, r13
    21f4:	89 f7       	brne	.-30     	; 0x21d8 <lcd_int16+0x66>
    21f6:	ff 24       	eor	r15, r15
    21f8:	f3 94       	inc	r15
    21fa:	f5 0c       	add	r15, r5
    21fc:	f8 01       	movw	r30, r16
    21fe:	e5 0d       	add	r30, r5
    2200:	f1 1d       	adc	r31, r1
    2202:	8e e2       	ldi	r24, 0x2E	; 46
    2204:	80 83       	st	Z, r24
    2206:	01 c0       	rjmp	.+2      	; 0x220a <lcd_int16+0x98>
    2208:	f9 2e       	mov	r15, r25
    220a:	6a e0       	ldi	r22, 0x0A	; 10
    220c:	70 e0       	ldi	r23, 0x00	; 0
    220e:	c9 01       	movw	r24, r18
    2210:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__divmodhi4>
    2214:	46 2f       	mov	r20, r22
    2216:	24 2f       	mov	r18, r20
    2218:	37 2f       	mov	r19, r23
    221a:	91 e0       	ldi	r25, 0x01	; 1
    221c:	9f 0d       	add	r25, r15
    221e:	f8 01       	movw	r30, r16
    2220:	ef 0d       	add	r30, r15
    2222:	f1 1d       	adc	r31, r1
    2224:	80 5d       	subi	r24, 0xD0	; 208
    2226:	80 83       	st	Z, r24
    2228:	21 15       	cp	r18, r1
    222a:	31 05       	cpc	r19, r1
    222c:	69 f7       	brne	.-38     	; 0x2208 <lcd_int16+0x96>
    222e:	61 10       	cpse	r6, r1
    2230:	59 c0       	rjmp	.+178    	; 0x22e4 <lcd_int16+0x172>
    2232:	b7 fc       	sbrc	r11, 7
    2234:	63 c0       	rjmp	.+198    	; 0x22fc <lcd_int16+0x18a>
    2236:	99 20       	and	r9, r9
    2238:	b1 f0       	breq	.+44     	; 0x2266 <lcd_int16+0xf4>
    223a:	68 2d       	mov	r22, r8
    223c:	70 e0       	ldi	r23, 0x00	; 0
    223e:	80 e2       	ldi	r24, 0x20	; 32
    2240:	29 2f       	mov	r18, r25
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	49 2d       	mov	r20, r9
    2246:	50 e0       	ldi	r21, 0x00	; 0
    2248:	46 1b       	sub	r20, r22
    224a:	57 0b       	sbc	r21, r23
    224c:	24 17       	cp	r18, r20
    224e:	35 07       	cpc	r19, r21
    2250:	54 f4       	brge	.+20     	; 0x2266 <lcd_int16+0xf4>
    2252:	9f 5f       	subi	r25, 0xFF	; 255
    2254:	f8 01       	movw	r30, r16
    2256:	e2 0f       	add	r30, r18
    2258:	f3 1f       	adc	r31, r19
    225a:	80 83       	st	Z, r24
    225c:	29 2f       	mov	r18, r25
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	24 17       	cp	r18, r20
    2262:	35 07       	cpc	r19, r21
    2264:	b4 f3       	brlt	.-20     	; 0x2252 <lcd_int16+0xe0>
    2266:	77 20       	and	r7, r7
    2268:	31 f0       	breq	.+12     	; 0x2276 <lcd_int16+0x104>
    226a:	f8 01       	movw	r30, r16
    226c:	e9 0f       	add	r30, r25
    226e:	f1 1d       	adc	r31, r1
    2270:	8d e2       	ldi	r24, 0x2D	; 45
    2272:	80 83       	st	Z, r24
    2274:	9f 5f       	subi	r25, 0xFF	; 255
    2276:	21 e0       	ldi	r18, 0x01	; 1
    2278:	91 50       	subi	r25, 0x01	; 1
    227a:	f8 01       	movw	r30, r16
    227c:	e9 0f       	add	r30, r25
    227e:	f1 1d       	adc	r31, r1
    2280:	80 81       	ld	r24, Z
    2282:	2f b9       	out	0x0f, r18	; 15
    2284:	77 9b       	sbis	0x0e, 7	; 14
    2286:	fe cf       	rjmp	.-4      	; 0x2284 <lcd_int16+0x112>
    2288:	8f b9       	out	0x0f, r24	; 15
    228a:	77 9b       	sbis	0x0e, 7	; 14
    228c:	fe cf       	rjmp	.-4      	; 0x228a <lcd_int16+0x118>
    228e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    2292:	88 60       	ori	r24, 0x08	; 8
    2294:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    2298:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    229c:	87 7f       	andi	r24, 0xF7	; 247
    229e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    22a2:	f5 ed       	ldi	r31, 0xD5	; 213
    22a4:	fa 95       	dec	r31
    22a6:	f1 f7       	brne	.-4      	; 0x22a4 <lcd_int16+0x132>
    22a8:	00 00       	nop
    22aa:	91 11       	cpse	r25, r1
    22ac:	e5 cf       	rjmp	.-54     	; 0x2278 <lcd_int16+0x106>
    22ae:	61 96       	adiw	r28, 0x11	; 17
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	f8 94       	cli
    22b4:	de bf       	out	0x3e, r29	; 62
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	cd bf       	out	0x3d, r28	; 61
    22ba:	df 91       	pop	r29
    22bc:	cf 91       	pop	r28
    22be:	1f 91       	pop	r17
    22c0:	0f 91       	pop	r16
    22c2:	ff 90       	pop	r15
    22c4:	ef 90       	pop	r14
    22c6:	df 90       	pop	r13
    22c8:	cf 90       	pop	r12
    22ca:	bf 90       	pop	r11
    22cc:	af 90       	pop	r10
    22ce:	9f 90       	pop	r9
    22d0:	8f 90       	pop	r8
    22d2:	7f 90       	pop	r7
    22d4:	6f 90       	pop	r6
    22d6:	5f 90       	pop	r5
    22d8:	08 95       	ret
    22da:	f1 2c       	mov	r15, r1
    22dc:	8e 01       	movw	r16, r28
    22de:	0f 5f       	subi	r16, 0xFF	; 255
    22e0:	1f 4f       	sbci	r17, 0xFF	; 255
    22e2:	93 cf       	rjmp	.-218    	; 0x220a <lcd_int16+0x98>
    22e4:	99 20       	and	r9, r9
    22e6:	09 f4       	brne	.+2      	; 0x22ea <lcd_int16+0x178>
    22e8:	be cf       	rjmp	.-132    	; 0x2266 <lcd_int16+0xf4>
    22ea:	68 2d       	mov	r22, r8
    22ec:	70 e0       	ldi	r23, 0x00	; 0
    22ee:	80 e3       	ldi	r24, 0x30	; 48
    22f0:	a7 cf       	rjmp	.-178    	; 0x2240 <lcd_int16+0xce>
    22f2:	22 27       	eor	r18, r18
    22f4:	33 27       	eor	r19, r19
    22f6:	28 1b       	sub	r18, r24
    22f8:	39 0b       	sbc	r19, r25
    22fa:	5e cf       	rjmp	.-324    	; 0x21b8 <lcd_int16+0x46>
    22fc:	f3 94       	inc	r15
    22fe:	f3 94       	inc	r15
    2300:	f8 01       	movw	r30, r16
    2302:	e9 0f       	add	r30, r25
    2304:	f1 1d       	adc	r31, r1
    2306:	8d e2       	ldi	r24, 0x2D	; 45
    2308:	80 83       	st	Z, r24
    230a:	99 20       	and	r9, r9
    230c:	59 f0       	breq	.+22     	; 0x2324 <lcd_int16+0x1b2>
    230e:	2f 2d       	mov	r18, r15
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	49 2d       	mov	r20, r9
    2314:	50 e0       	ldi	r21, 0x00	; 0
    2316:	24 17       	cp	r18, r20
    2318:	35 07       	cpc	r19, r21
    231a:	24 f4       	brge	.+8      	; 0x2324 <lcd_int16+0x1b2>
    231c:	9f 2d       	mov	r25, r15
    231e:	71 2c       	mov	r7, r1
    2320:	80 e2       	ldi	r24, 0x20	; 32
    2322:	97 cf       	rjmp	.-210    	; 0x2252 <lcd_int16+0xe0>
    2324:	9f 2d       	mov	r25, r15
    2326:	a7 cf       	rjmp	.-178    	; 0x2276 <lcd_int16+0x104>

00002328 <main>:


//***********************************************************************************
uint8_t main()
{
spi_init();	//initialize SPI and port configurations
    2328:	0e 94 ab 06 	call	0xd56	; 0xd56 <spi_init>
init_twi(); //initalize TWI (twi_master.h)  
    232c:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <init_twi>

uart_init(); 	//initialize uart
    2330:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <uart_init>
lcd_init();	//initialize LCD display
    2334:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <lcd_init>
clear_display(); //Clean LCD display
    2338:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <clear_display>

/**********************************************************************
 *				ADC_init
 **********************************************************************/
void ADC_init(void){
DDRF  &= ~(_BV(DDF7)); //make port F bit 7 the ADC input  
    233c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    2340:	8f 77       	andi	r24, 0x7F	; 127
    2342:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
    2346:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    234a:	8f 77       	andi	r24, 0x7F	; 127
    234c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	
ADMUX = (1 << REFS0) | (1 << ADLAR) | 0x07; // reference to AVCC(5v), left adjusted (only reading  8bit), and channel 7
    2350:	87 e6       	ldi	r24, 0x67	; 103
    2352:	87 b9       	out	0x07, r24	; 7
//ADC enabled, single conversion, division factor is 128
ADCSRA = (1 << ADEN) | (1 << ADPS2) | ( 1 << ADPS1) | ( 1 << ADPS0) ; 
    2354:	87 e8       	ldi	r24, 0x87	; 135
    2356:	86 b9       	out	0x06, r24	; 6

/**********************************************************************
 *				dimming_init
 **********************************************************************/
void dimming_init(void){
TCCR2 |= (1 << WGM21) | ( 1 << WGM20) | (1 << COM21) | ( 1 << CS20); // no prescale, clear on OC2 match, fast pwm mode
    2358:	85 b5       	in	r24, 0x25	; 37
    235a:	89 66       	ori	r24, 0x69	; 105
    235c:	85 bd       	out	0x25, r24	; 37
TIMSK |= (1 << OCIE2); // Compare match interrupt enable timer/counter0
    235e:	87 b7       	in	r24, 0x37	; 55
    2360:	80 68       	ori	r24, 0x80	; 128
    2362:	87 bf       	out	0x37, r24	; 55
TCNT2 = 0; //set count at 0
    2364:	14 bc       	out	0x24, r1	; 36

/**********************************************************************
 *				tone_init
 **********************************************************************/
void tone_init(void){
DDRC = 0xFF; // set all of PORTC as outputs
    2366:	8f ef       	ldi	r24, 0xFF	; 255
    2368:	84 bb       	out	0x14, r24	; 20
TCCR1A = 0x00; // normal operation w/ OC1A is disconnected
    236a:	1f bc       	out	0x2f, r1	; 47
TIMSK |= 1 << OCIE1A; //output compare enable for timercounter1A
    236c:	87 b7       	in	r24, 0x37	; 55
    236e:	80 61       	ori	r24, 0x10	; 16
    2370:	87 bf       	out	0x37, r24	; 55
//OCR1A = 3999; // 4kHz and triggers ISR
OCR1A = 2000;
    2372:	80 ed       	ldi	r24, 0xD0	; 208
    2374:	97 e0       	ldi	r25, 0x07	; 7
    2376:	9b bd       	out	0x2b, r25	; 43
    2378:	8a bd       	out	0x2a, r24	; 42
//OCR1A = 18517;
//clk is not set
TCCR1B |= (1 << WGM12); // CTC mode, clear with OCR and no prescaling
    237a:	8e b5       	in	r24, 0x2e	; 46
    237c:	88 60       	ori	r24, 0x08	; 8
    237e:	8e bd       	out	0x2e, r24	; 46

/**********************************************************************
 *				clock_init
 **********************************************************************/
void clock_init(void){
ASSR   |=  1<<AS0; //ext osc TOSC in 32kHz 
    2380:	80 b7       	in	r24, 0x30	; 48
    2382:	88 60       	ori	r24, 0x08	; 8
    2384:	80 bf       	out	0x30, r24	; 48
TIMSK |= 1 << OCIE0; //interrupt flag on compare register 
    2386:	87 b7       	in	r24, 0x37	; 55
    2388:	82 60       	ori	r24, 0x02	; 2
    238a:	87 bf       	out	0x37, r24	; 55
TCCR0 |= ((1 << WGM01) | (1 << CS00)); //CTC mode, with clk/no pre-scaling
    238c:	83 b7       	in	r24, 0x33	; 51
    238e:	89 60       	ori	r24, 0x09	; 9
    2390:	83 bf       	out	0x33, r24	; 51
OCR0 = 63; // Set top 
    2392:	8f e3       	ldi	r24, 0x3F	; 63
    2394:	81 bf       	out	0x31, r24	; 49
/**********************************************************************
 *				volume_init
 **********************************************************************/
void volume_init(void){
//volume pin is PE3
TCCR3A = (1 << COM3A1 | (1 << WGM31) ); //normal operation w/ OC3A is disconnected
    2396:	82 e8       	ldi	r24, 0x82	; 130
    2398:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
TCCR3B |= (  (1 << CS30) | ( 1 << WGM32) | (1 << WGM33) ); //fast pwm 
    239c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    23a0:	89 61       	ori	r24, 0x19	; 25
    23a2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
ICR3 = 10; // Set overflow top ; controls frequency 
    23a6:	8a e0       	ldi	r24, 0x0A	; 10
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    23ae:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
OCR3A = 0; // set compare match; duty cycle
    23b2:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    23b6:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
clock_init();	//initializing timer/counter0 (TCNT0) 
volume_init();	//initialize timer/counter3
//radio_init();


radio_init();
    23ba:	0e 94 03 07 	call	0xe06	; 0xe06 <radio_init>
radio_reset();
    23be:	0e 94 b6 08 	call	0x116c	; 0x116c <radio_reset>
		break;

	default:
		incr_time = 0; 	// encoders should not change time when clock is running
		incr_alarm = 0; // encoders should not change alarm time when clock is running 
		seconds_holder = 1; // increment seconds 
    23c2:	c1 e0       	ldi	r28, 0x01	; 1
    23c4:	d0 e0       	ldi	r29, 0x00	; 0
		//if snooze flag is initiated then trigger count 
	if(snooze_time){
		if(snooze_seconds == 10){
			snooze_seconds = 0;
			tone = TRUE;
			OCR3A = 5;
    23c6:	35 e0       	ldi	r19, 0x05	; 5
    23c8:	a3 2e       	mov	r10, r19
    23ca:	b1 2c       	mov	r11, r1
		break;

	case 0x10: //setting radio
		radio = TRUE;
		//sound = TRUE;
		incr_freq = 20;
    23cc:	44 e1       	ldi	r20, 0x14	; 20
    23ce:	c4 2e       	mov	r12, r20

//88.1
if(current_fm_freq > 10800){current_fm_freq = 8810;}; //0x2706, arg2, arg3; 99.9Mhz, 200khz steps

//108.1
if(current_fm_freq < 8800){current_fm_freq = 10810;}
    23d0:	5a e3       	ldi	r21, 0x3A	; 58
    23d2:	e5 2e       	mov	r14, r21
    23d4:	5a e2       	ldi	r21, 0x2A	; 42
    23d6:	f5 2e       	mov	r15, r21
void freq_bound(void){
//might need to put them in 32 bit array and connect them. They are incrementing by 20? 


//88.1
if(current_fm_freq > 10800){current_fm_freq = 8810;}; //0x2706, arg2, arg3; 99.9Mhz, 200khz steps
    23d8:	0a e6       	ldi	r16, 0x6A	; 106
    23da:	12 e2       	ldi	r17, 0x22	; 34

time_tracker_12(); //keep track of the time in 12 hr format 



PORTA = 0xFF;  //make PORTA an input port with pullups 	
    23dc:	dd 24       	eor	r13, r13
    23de:	da 94       	dec	r13
//OCR3A = 6;
//DDRE &= ~( 1 << PE7);
while(1){ // main loop


ADCSR |= (1<<ADSC); //start writing 
    23e0:	36 9a       	sbi	0x06, 6	; 6
while(bit_is_clear(ADCSRA, ADIF)){};
    23e2:	34 9b       	sbis	0x06, 4	; 6
    23e4:	fe cf       	rjmp	.-4      	; 0x23e2 <main+0xba>

ADCSR |= (1 << ADIF);//clear flag by writing one
    23e6:	34 9a       	sbi	0x06, 4	; 6
adc_data = ADCH; // store ADC values
    23e8:	85 b1       	in	r24, 0x05	; 5
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <adc_data+0x1>
    23f0:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <adc_data>

temp_sens();	//Commuincate the temp sensor through TWI:W
    23f4:	0e 94 cd 07 	call	0xf9a	; 0xf9a <temp_sens>
temp_display();	//display the remote and local temperatures
    23f8:	0e 94 81 07 	call	0xf02	; 0xf02 <temp_display>
set_alarm_sound();
    23fc:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <set_alarm_sound>

switch(mode){
    2400:	e0 91 7c 02 	lds	r30, 0x027C	; 0x80027c <mode>
    2404:	8e 2f       	mov	r24, r30
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	fc 01       	movw	r30, r24
    240a:	32 97       	sbiw	r30, 0x02	; 2
    240c:	e1 34       	cpi	r30, 0x41	; 65
    240e:	f1 05       	cpc	r31, r1
    2410:	08 f4       	brcc	.+2      	; 0x2414 <main+0xec>
    2412:	4a c0       	rjmp	.+148    	; 0x24a8 <main+0x180>
		}	
	}
		break;

	default:
		incr_time = 0; 	// encoders should not change time when clock is running
    2414:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <incr_time+0x1>
    2418:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <incr_time>
		incr_alarm = 0; // encoders should not change alarm time when clock is running 
    241c:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <incr_alarm+0x1>
    2420:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <incr_alarm>
		seconds_holder = 1; // increment seconds 
    2424:	d0 93 13 01 	sts	0x0113, r29	; 0x800113 <seconds_holder+0x1>
    2428:	c0 93 12 01 	sts	0x0112, r28	; 0x800112 <seconds_holder>
		OCR3A = 0;	// mute the sound of both alarm and radio
    242c:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    2430:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		radio = FALSE;	// radio is defaulted as off
    2434:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <radio+0x1>
    2438:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <radio>
	if(radio_status){radio_pwr_dwn();} //power down the radio if it was previously on
    243c:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <radio_status>
    2440:	81 11       	cpse	r24, r1
    2442:	d0 c0       	rjmp	.+416    	; 0x25e4 <main+0x2bc>
		//_delay_ms(.1);
}

time_tracker_12(); //keep track of the time in 12 hr format 
    2444:	0e 94 54 06 	call	0xca8	; 0xca8 <time_tracker_12>



PORTA = 0xFF;  //make PORTA an input port with pullups 	
    2448:	db ba       	out	0x1b, r13	; 27

//if(radio == TRUE){segsum(current_fm_freq);}
//segsum(time);
//float frequency = current;

if( ((alarm == TRUE) && (mode == 0x40)) | (mode == 0x42)){
    244a:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <alarm>
    244e:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <alarm+0x1>
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	09 f4       	brne	.+2      	; 0x2458 <main+0x130>
    2456:	af c0       	rjmp	.+350    	; 0x25b6 <main+0x28e>
    2458:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <mode>
    245c:	82 34       	cpi	r24, 0x42	; 66
    245e:	09 f4       	brne	.+2      	; 0x2462 <main+0x13a>
    2460:	b1 c0       	rjmp	.+354    	; 0x25c4 <main+0x29c>
	segsum(alarm_time);
}
else if((radio == TRUE) && (mode != 0x08)){
    2462:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <radio>
    2466:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <radio+0x1>
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	b1 f4       	brne	.+44     	; 0x249a <main+0x172>
    246e:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <mode>
    2472:	88 30       	cpi	r24, 0x08	; 8
    2474:	91 f0       	breq	.+36     	; 0x249a <main+0x172>
segsum(current_fm_freq/10);
    2476:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <current_fm_freq>
    247a:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <current_fm_freq+0x1>
    247e:	ad ec       	ldi	r26, 0xCD	; 205
    2480:	bc ec       	ldi	r27, 0xCC	; 204
    2482:	0e 94 34 13 	call	0x2668	; 0x2668 <__umulhisi3>
    2486:	96 95       	lsr	r25
    2488:	87 95       	ror	r24
    248a:	96 95       	lsr	r25
    248c:	87 95       	ror	r24
    248e:	96 95       	lsr	r25
    2490:	87 95       	ror	r24
    2492:	0e 94 0f 07 	call	0xe1e	; 0xe1e <segsum>
//		PORTB = 0; // digit 0
//		PORTA = 0x7F; // turn on decimal point
//	}
//DDRA = 0xFF;  //make PORTA an output

sei(); // ISR will return here
    2496:	78 94       	sei

}//while
    2498:	a3 cf       	rjmp	.-186    	; 0x23e0 <main+0xb8>
}
else if((radio == TRUE) && (mode != 0x08)){
segsum(current_fm_freq/10);
}

else{segsum(time);}
    249a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
    249e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
    24a2:	0e 94 0f 07 	call	0xe1e	; 0xe1e <segsum>
    24a6:	f7 cf       	rjmp	.-18     	; 0x2496 <main+0x16e>

temp_sens();	//Commuincate the temp sensor through TWI:W
temp_display();	//display the remote and local temperatures
set_alarm_sound();

switch(mode){
    24a8:	ea 5b       	subi	r30, 0xBA	; 186
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__tablejump2__>
	case 0x02://Set ALARM sound or RADIO sound
		sound = TRUE;//radio sound on	
		break;

	case 0x42://when setting alarm time with radio setting is set 
		sound = TRUE;
    24b0:	d0 93 93 02 	sts	0x0293, r29	; 0x800293 <sound+0x1>
    24b4:	c0 93 92 02 	sts	0x0292, r28	; 0x800292 <sound>
		incr_alarm = 1;
    24b8:	d0 93 7e 02 	sts	0x027E, r29	; 0x80027e <incr_alarm+0x1>
    24bc:	c0 93 7d 02 	sts	0x027D, r28	; 0x80027d <incr_alarm>
		alarm_bound_12();
    24c0:	0e 94 68 05 	call	0xad0	; 0xad0 <alarm_bound_12>
		//dp = TRUE;
		//tone = TRUE;
	//	alarm = TRUE;
		break;
    24c4:	bf cf       	rjmp	.-130    	; 0x2444 <main+0x11c>
temp_display();	//display the remote and local temperatures
set_alarm_sound();

switch(mode){
	case 0x40: //Setting alarm
		alarm = TRUE;		//alarm is on
    24c6:	d0 93 8e 02 	sts	0x028E, r29	; 0x80028e <alarm+0x1>
    24ca:	c0 93 8d 02 	sts	0x028D, r28	; 0x80028d <alarm>
		sound = FALSE;  	// regular alarm tone is defaulted
    24ce:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <sound+0x1>
    24d2:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <sound>
		tone = TRUE;		//turn on tone
    24d6:	d0 93 8a 02 	sts	0x028A, r29	; 0x80028a <tone+0x1>
    24da:	c0 93 89 02 	sts	0x0289, r28	; 0x800289 <tone>
		dp = TRUE;		//turn on decimal point
    24de:	d0 93 8c 02 	sts	0x028C, r29	; 0x80028c <dp+0x1>
    24e2:	c0 93 8b 02 	sts	0x028B, r28	; 0x80028b <dp>
		incr_alarm = 1;		//increment alarm time
    24e6:	d0 93 7e 02 	sts	0x027E, r29	; 0x80027e <incr_alarm+0x1>
    24ea:	c0 93 7d 02 	sts	0x027D, r28	; 0x80027d <incr_alarm>
		alarm_bound_12(); 	//bound the time for 12hr mark
    24ee:	0e 94 68 05 	call	0xad0	; 0xad0 <alarm_bound_12>
		break;
    24f2:	a8 cf       	rjmp	.-176    	; 0x2444 <main+0x11c>
		freq_bound();
		//mode &= ~(0x10);
		break;

	case 0x20: //disable alarm	
		disable_alarm();
    24f4:	0e 94 0c 05 	call	0xa18	; 0xa18 <disable_alarm>
		mode &= ~(0x20);
    24f8:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <mode>
    24fc:	8f 7d       	andi	r24, 0xDF	; 223
    24fe:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <mode>
		break;
    2502:	a0 cf       	rjmp	.-192    	; 0x2444 <main+0x11c>
		//tone = TRUE;
	//	alarm = TRUE;
		break;

	case 0x10: //setting radio
		radio = TRUE;
    2504:	d0 93 96 02 	sts	0x0296, r29	; 0x800296 <radio+0x1>
    2508:	c0 93 95 02 	sts	0x0295, r28	; 0x800295 <radio>
		//sound = TRUE;
		incr_freq = 20;
    250c:	c0 92 b5 02 	sts	0x02B5, r12	; 0x8002b5 <incr_freq>
}
}

void radio_on(void){

if((mode == 0x10)){
    2510:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <mode>
    2514:	80 31       	cpi	r24, 0x10	; 16
    2516:	09 f4       	brne	.+2      	; 0x251a <main+0x1f2>
    2518:	68 c0       	rjmp	.+208    	; 0x25ea <main+0x2c2>
void freq_bound(void){
//might need to put them in 32 bit array and connect them. They are incrementing by 20? 


//88.1
if(current_fm_freq > 10800){current_fm_freq = 8810;}; //0x2706, arg2, arg3; 99.9Mhz, 200khz steps
    251a:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <current_fm_freq>
    251e:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <current_fm_freq+0x1>
    2522:	81 33       	cpi	r24, 0x31	; 49
    2524:	2a e2       	ldi	r18, 0x2A	; 42
    2526:	92 07       	cpc	r25, r18
    2528:	08 f4       	brcc	.+2      	; 0x252c <main+0x204>
    252a:	53 c0       	rjmp	.+166    	; 0x25d2 <main+0x2aa>
    252c:	10 93 e8 02 	sts	0x02E8, r17	; 0x8002e8 <current_fm_freq+0x1>
    2530:	00 93 e7 02 	sts	0x02E7, r16	; 0x8002e7 <current_fm_freq>
    2534:	87 cf       	rjmp	.-242    	; 0x2444 <main+0x11c>
		disable_alarm();
		mode &= ~(0x20);
		break;

	case 0x08: // setting time
		incr_time = 1;	//increment time
    2536:	d0 93 80 02 	sts	0x0280, r29	; 0x800280 <incr_time+0x1>
    253a:	c0 93 7f 02 	sts	0x027F, r28	; 0x80027f <incr_time>
		seconds_holder = 0;	//seconds is not counting
    253e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <seconds_holder+0x1>
    2542:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <seconds_holder>
		time_bound_12();	//bound the encoders
    2546:	0e 94 d5 05 	call	0xbaa	; 0xbaa <time_bound_12>
		break;
    254a:	7c cf       	rjmp	.-264    	; 0x2444 <main+0x11c>
	
	case 0x04://snooze alarm
	if(snooze_time == FALSE){
    254c:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <snooze_time>
    2550:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <snooze_time+0x1>
    2554:	89 2b       	or	r24, r25
    2556:	79 f4       	brne	.+30     	; 0x2576 <main+0x24e>
		snooze_seconds = 0;
    2558:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <snooze_seconds+0x1>
    255c:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <snooze_seconds>
		tone = FALSE; //turn off the tone
    2560:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <tone+0x1>
    2564:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <tone>
		OCR3A = 0; // turn off the volume
    2568:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    256c:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		TCCR1B &= ~(1 << CS10);	//clear the clock for the tone
    2570:	8e b5       	in	r24, 0x2e	; 46
    2572:	8e 7f       	andi	r24, 0xFE	; 254
    2574:	8e bd       	out	0x2e, r24	; 46
		}	
		
	snooze_time = TRUE; //set flag for snooze
    2576:	d0 93 86 02 	sts	0x0286, r29	; 0x800286 <snooze_time+0x1>
    257a:	c0 93 85 02 	sts	0x0285, r28	; 0x800285 <snooze_time>
		//if snooze flag is initiated then trigger count 
	if(snooze_time){
		if(snooze_seconds == 10){
    257e:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <snooze_seconds>
    2582:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <snooze_seconds+0x1>
    2586:	0a 97       	sbiw	r24, 0x0a	; 10
    2588:	09 f0       	breq	.+2      	; 0x258c <main+0x264>
    258a:	5c cf       	rjmp	.-328    	; 0x2444 <main+0x11c>
			snooze_seconds = 0;
    258c:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <snooze_seconds+0x1>
    2590:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <snooze_seconds>
			tone = TRUE;
    2594:	d0 93 8a 02 	sts	0x028A, r29	; 0x80028a <tone+0x1>
    2598:	c0 93 89 02 	sts	0x0289, r28	; 0x800289 <tone>
			OCR3A = 5;
    259c:	b0 92 87 00 	sts	0x0087, r11	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    25a0:	a0 92 86 00 	sts	0x0086, r10	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
			TCCR1B |= 1 << CS10;
    25a4:	8e b5       	in	r24, 0x2e	; 46
    25a6:	81 60       	ori	r24, 0x01	; 1
    25a8:	8e bd       	out	0x2e, r24	; 46
    25aa:	4c cf       	rjmp	.-360    	; 0x2444 <main+0x11c>
		incr_alarm = 1;		//increment alarm time
		alarm_bound_12(); 	//bound the time for 12hr mark
		break;

	case 0x02://Set ALARM sound or RADIO sound
		sound = TRUE;//radio sound on	
    25ac:	d0 93 93 02 	sts	0x0293, r29	; 0x800293 <sound+0x1>
    25b0:	c0 93 92 02 	sts	0x0292, r28	; 0x800292 <sound>
		break;
    25b4:	47 cf       	rjmp	.-370    	; 0x2444 <main+0x11c>

//if(radio == TRUE){segsum(current_fm_freq);}
//segsum(time);
//float frequency = current;

if( ((alarm == TRUE) && (mode == 0x40)) | (mode == 0x42)){
    25b6:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <mode>
    25ba:	80 34       	cpi	r24, 0x40	; 64
    25bc:	09 f0       	breq	.+2      	; 0x25c0 <main+0x298>
    25be:	4c cf       	rjmp	.-360    	; 0x2458 <main+0x130>
    25c0:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <mode>
	segsum(alarm_time);
    25c4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <alarm_time>
    25c8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <alarm_time+0x1>
    25cc:	0e 94 0f 07 	call	0xe1e	; 0xe1e <segsum>
    25d0:	62 cf       	rjmp	.-316    	; 0x2496 <main+0x16e>

//88.1
if(current_fm_freq > 10800){current_fm_freq = 8810;}; //0x2706, arg2, arg3; 99.9Mhz, 200khz steps

//108.1
if(current_fm_freq < 8800){current_fm_freq = 10810;}
    25d2:	80 36       	cpi	r24, 0x60	; 96
    25d4:	92 42       	sbci	r25, 0x22	; 34
    25d6:	08 f0       	brcs	.+2      	; 0x25da <main+0x2b2>
    25d8:	35 cf       	rjmp	.-406    	; 0x2444 <main+0x11c>
    25da:	f0 92 e8 02 	sts	0x02E8, r15	; 0x8002e8 <current_fm_freq+0x1>
    25de:	e0 92 e7 02 	sts	0x02E7, r14	; 0x8002e7 <current_fm_freq>
    25e2:	30 cf       	rjmp	.-416    	; 0x2444 <main+0x11c>
		incr_time = 0; 	// encoders should not change time when clock is running
		incr_alarm = 0; // encoders should not change alarm time when clock is running 
		seconds_holder = 1; // increment seconds 
		OCR3A = 0;	// mute the sound of both alarm and radio
		radio = FALSE;	// radio is defaulted as off
	if(radio_status){radio_pwr_dwn();} //power down the radio if it was previously on
    25e4:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <radio_pwr_dwn>
    25e8:	2d cf       	rjmp	.-422    	; 0x2444 <main+0x11c>
    25ea:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <radio_on.part.5>
    25ee:	95 cf       	rjmp	.-214    	; 0x251a <main+0x1f2>

000025f0 <__divmodhi4>:
    25f0:	97 fb       	bst	r25, 7
    25f2:	07 2e       	mov	r0, r23
    25f4:	16 f4       	brtc	.+4      	; 0x25fa <__divmodhi4+0xa>
    25f6:	00 94       	com	r0
    25f8:	07 d0       	rcall	.+14     	; 0x2608 <__divmodhi4_neg1>
    25fa:	77 fd       	sbrc	r23, 7
    25fc:	09 d0       	rcall	.+18     	; 0x2610 <__divmodhi4_neg2>
    25fe:	0e 94 43 13 	call	0x2686	; 0x2686 <__udivmodhi4>
    2602:	07 fc       	sbrc	r0, 7
    2604:	05 d0       	rcall	.+10     	; 0x2610 <__divmodhi4_neg2>
    2606:	3e f4       	brtc	.+14     	; 0x2616 <__divmodhi4_exit>

00002608 <__divmodhi4_neg1>:
    2608:	90 95       	com	r25
    260a:	81 95       	neg	r24
    260c:	9f 4f       	sbci	r25, 0xFF	; 255
    260e:	08 95       	ret

00002610 <__divmodhi4_neg2>:
    2610:	70 95       	com	r23
    2612:	61 95       	neg	r22
    2614:	7f 4f       	sbci	r23, 0xFF	; 255

00002616 <__divmodhi4_exit>:
    2616:	08 95       	ret

00002618 <__divmodsi4>:
    2618:	05 2e       	mov	r0, r21
    261a:	97 fb       	bst	r25, 7
    261c:	1e f4       	brtc	.+6      	; 0x2624 <__divmodsi4+0xc>
    261e:	00 94       	com	r0
    2620:	0e 94 23 13 	call	0x2646	; 0x2646 <__negsi2>
    2624:	57 fd       	sbrc	r21, 7
    2626:	07 d0       	rcall	.+14     	; 0x2636 <__divmodsi4_neg2>
    2628:	0e 94 57 13 	call	0x26ae	; 0x26ae <__udivmodsi4>
    262c:	07 fc       	sbrc	r0, 7
    262e:	03 d0       	rcall	.+6      	; 0x2636 <__divmodsi4_neg2>
    2630:	4e f4       	brtc	.+18     	; 0x2644 <__divmodsi4_exit>
    2632:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__negsi2>

00002636 <__divmodsi4_neg2>:
    2636:	50 95       	com	r21
    2638:	40 95       	com	r20
    263a:	30 95       	com	r19
    263c:	21 95       	neg	r18
    263e:	3f 4f       	sbci	r19, 0xFF	; 255
    2640:	4f 4f       	sbci	r20, 0xFF	; 255
    2642:	5f 4f       	sbci	r21, 0xFF	; 255

00002644 <__divmodsi4_exit>:
    2644:	08 95       	ret

00002646 <__negsi2>:
    2646:	90 95       	com	r25
    2648:	80 95       	com	r24
    264a:	70 95       	com	r23
    264c:	61 95       	neg	r22
    264e:	7f 4f       	sbci	r23, 0xFF	; 255
    2650:	8f 4f       	sbci	r24, 0xFF	; 255
    2652:	9f 4f       	sbci	r25, 0xFF	; 255
    2654:	08 95       	ret

00002656 <__tablejump2__>:
    2656:	ee 0f       	add	r30, r30
    2658:	ff 1f       	adc	r31, r31
    265a:	00 24       	eor	r0, r0
    265c:	00 1c       	adc	r0, r0
    265e:	0b be       	out	0x3b, r0	; 59
    2660:	07 90       	elpm	r0, Z+
    2662:	f6 91       	elpm	r31, Z
    2664:	e0 2d       	mov	r30, r0
    2666:	09 94       	ijmp

00002668 <__umulhisi3>:
    2668:	a2 9f       	mul	r26, r18
    266a:	b0 01       	movw	r22, r0
    266c:	b3 9f       	mul	r27, r19
    266e:	c0 01       	movw	r24, r0
    2670:	a3 9f       	mul	r26, r19
    2672:	70 0d       	add	r23, r0
    2674:	81 1d       	adc	r24, r1
    2676:	11 24       	eor	r1, r1
    2678:	91 1d       	adc	r25, r1
    267a:	b2 9f       	mul	r27, r18
    267c:	70 0d       	add	r23, r0
    267e:	81 1d       	adc	r24, r1
    2680:	11 24       	eor	r1, r1
    2682:	91 1d       	adc	r25, r1
    2684:	08 95       	ret

00002686 <__udivmodhi4>:
    2686:	aa 1b       	sub	r26, r26
    2688:	bb 1b       	sub	r27, r27
    268a:	51 e1       	ldi	r21, 0x11	; 17
    268c:	07 c0       	rjmp	.+14     	; 0x269c <__udivmodhi4_ep>

0000268e <__udivmodhi4_loop>:
    268e:	aa 1f       	adc	r26, r26
    2690:	bb 1f       	adc	r27, r27
    2692:	a6 17       	cp	r26, r22
    2694:	b7 07       	cpc	r27, r23
    2696:	10 f0       	brcs	.+4      	; 0x269c <__udivmodhi4_ep>
    2698:	a6 1b       	sub	r26, r22
    269a:	b7 0b       	sbc	r27, r23

0000269c <__udivmodhi4_ep>:
    269c:	88 1f       	adc	r24, r24
    269e:	99 1f       	adc	r25, r25
    26a0:	5a 95       	dec	r21
    26a2:	a9 f7       	brne	.-22     	; 0x268e <__udivmodhi4_loop>
    26a4:	80 95       	com	r24
    26a6:	90 95       	com	r25
    26a8:	bc 01       	movw	r22, r24
    26aa:	cd 01       	movw	r24, r26
    26ac:	08 95       	ret

000026ae <__udivmodsi4>:
    26ae:	a1 e2       	ldi	r26, 0x21	; 33
    26b0:	1a 2e       	mov	r1, r26
    26b2:	aa 1b       	sub	r26, r26
    26b4:	bb 1b       	sub	r27, r27
    26b6:	fd 01       	movw	r30, r26
    26b8:	0d c0       	rjmp	.+26     	; 0x26d4 <__udivmodsi4_ep>

000026ba <__udivmodsi4_loop>:
    26ba:	aa 1f       	adc	r26, r26
    26bc:	bb 1f       	adc	r27, r27
    26be:	ee 1f       	adc	r30, r30
    26c0:	ff 1f       	adc	r31, r31
    26c2:	a2 17       	cp	r26, r18
    26c4:	b3 07       	cpc	r27, r19
    26c6:	e4 07       	cpc	r30, r20
    26c8:	f5 07       	cpc	r31, r21
    26ca:	20 f0       	brcs	.+8      	; 0x26d4 <__udivmodsi4_ep>
    26cc:	a2 1b       	sub	r26, r18
    26ce:	b3 0b       	sbc	r27, r19
    26d0:	e4 0b       	sbc	r30, r20
    26d2:	f5 0b       	sbc	r31, r21

000026d4 <__udivmodsi4_ep>:
    26d4:	66 1f       	adc	r22, r22
    26d6:	77 1f       	adc	r23, r23
    26d8:	88 1f       	adc	r24, r24
    26da:	99 1f       	adc	r25, r25
    26dc:	1a 94       	dec	r1
    26de:	69 f7       	brne	.-38     	; 0x26ba <__udivmodsi4_loop>
    26e0:	60 95       	com	r22
    26e2:	70 95       	com	r23
    26e4:	80 95       	com	r24
    26e6:	90 95       	com	r25
    26e8:	9b 01       	movw	r18, r22
    26ea:	ac 01       	movw	r20, r24
    26ec:	bd 01       	movw	r22, r26
    26ee:	cf 01       	movw	r24, r30
    26f0:	08 95       	ret

000026f2 <__itoa_ncheck>:
    26f2:	bb 27       	eor	r27, r27
    26f4:	4a 30       	cpi	r20, 0x0A	; 10
    26f6:	31 f4       	brne	.+12     	; 0x2704 <__itoa_ncheck+0x12>
    26f8:	99 23       	and	r25, r25
    26fa:	22 f4       	brpl	.+8      	; 0x2704 <__itoa_ncheck+0x12>
    26fc:	bd e2       	ldi	r27, 0x2D	; 45
    26fe:	90 95       	com	r25
    2700:	81 95       	neg	r24
    2702:	9f 4f       	sbci	r25, 0xFF	; 255
    2704:	0c 94 85 13 	jmp	0x270a	; 0x270a <__utoa_common>

00002708 <__utoa_ncheck>:
    2708:	bb 27       	eor	r27, r27

0000270a <__utoa_common>:
    270a:	fb 01       	movw	r30, r22
    270c:	55 27       	eor	r21, r21
    270e:	aa 27       	eor	r26, r26
    2710:	88 0f       	add	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	aa 1f       	adc	r26, r26
    2716:	a4 17       	cp	r26, r20
    2718:	10 f0       	brcs	.+4      	; 0x271e <__utoa_common+0x14>
    271a:	a4 1b       	sub	r26, r20
    271c:	83 95       	inc	r24
    271e:	50 51       	subi	r21, 0x10	; 16
    2720:	b9 f7       	brne	.-18     	; 0x2710 <__utoa_common+0x6>
    2722:	a0 5d       	subi	r26, 0xD0	; 208
    2724:	aa 33       	cpi	r26, 0x3A	; 58
    2726:	08 f0       	brcs	.+2      	; 0x272a <__utoa_common+0x20>
    2728:	a9 5d       	subi	r26, 0xD9	; 217
    272a:	a1 93       	st	Z+, r26
    272c:	00 97       	sbiw	r24, 0x00	; 0
    272e:	79 f7       	brne	.-34     	; 0x270e <__utoa_common+0x4>
    2730:	b1 11       	cpse	r27, r1
    2732:	b1 93       	st	Z+, r27
    2734:	11 92       	st	Z+, r1
    2736:	cb 01       	movw	r24, r22
    2738:	0c 94 9e 13 	jmp	0x273c	; 0x273c <strrev>

0000273c <strrev>:
    273c:	dc 01       	movw	r26, r24
    273e:	fc 01       	movw	r30, r24
    2740:	67 2f       	mov	r22, r23
    2742:	71 91       	ld	r23, Z+
    2744:	77 23       	and	r23, r23
    2746:	e1 f7       	brne	.-8      	; 0x2740 <strrev+0x4>
    2748:	32 97       	sbiw	r30, 0x02	; 2
    274a:	04 c0       	rjmp	.+8      	; 0x2754 <strrev+0x18>
    274c:	7c 91       	ld	r23, X
    274e:	6d 93       	st	X+, r22
    2750:	70 83       	st	Z, r23
    2752:	62 91       	ld	r22, -Z
    2754:	ae 17       	cp	r26, r30
    2756:	bf 07       	cpc	r27, r31
    2758:	c8 f3       	brcs	.-14     	; 0x274c <strrev+0x10>
    275a:	08 95       	ret

0000275c <eeprom_read_byte>:
    275c:	e1 99       	sbic	0x1c, 1	; 28
    275e:	fe cf       	rjmp	.-4      	; 0x275c <eeprom_read_byte>
    2760:	9f bb       	out	0x1f, r25	; 31
    2762:	8e bb       	out	0x1e, r24	; 30
    2764:	e0 9a       	sbi	0x1c, 0	; 28
    2766:	99 27       	eor	r25, r25
    2768:	8d b3       	in	r24, 0x1d	; 29
    276a:	08 95       	ret

0000276c <eeprom_read_word>:
    276c:	a8 e1       	ldi	r26, 0x18	; 24
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	42 e0       	ldi	r20, 0x02	; 2
    2772:	50 e0       	ldi	r21, 0x00	; 0
    2774:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <eeprom_read_blraw>

00002778 <eeprom_write_byte>:
    2778:	26 2f       	mov	r18, r22

0000277a <eeprom_write_r18>:
    277a:	e1 99       	sbic	0x1c, 1	; 28
    277c:	fe cf       	rjmp	.-4      	; 0x277a <eeprom_write_r18>
    277e:	9f bb       	out	0x1f, r25	; 31
    2780:	8e bb       	out	0x1e, r24	; 30
    2782:	2d bb       	out	0x1d, r18	; 29
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	f8 94       	cli
    2788:	e2 9a       	sbi	0x1c, 2	; 28
    278a:	e1 9a       	sbi	0x1c, 1	; 28
    278c:	0f be       	out	0x3f, r0	; 63
    278e:	01 96       	adiw	r24, 0x01	; 1
    2790:	08 95       	ret

00002792 <eeprom_write_word>:
    2792:	0e 94 bc 13 	call	0x2778	; 0x2778 <eeprom_write_byte>
    2796:	27 2f       	mov	r18, r23
    2798:	0c 94 bd 13 	jmp	0x277a	; 0x277a <eeprom_write_r18>

0000279c <eeprom_read_block>:
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22

000027a0 <eeprom_read_blraw>:
    27a0:	fc 01       	movw	r30, r24
    27a2:	e1 99       	sbic	0x1c, 1	; 28
    27a4:	fe cf       	rjmp	.-4      	; 0x27a2 <eeprom_read_blraw+0x2>
    27a6:	06 c0       	rjmp	.+12     	; 0x27b4 <eeprom_read_blraw+0x14>
    27a8:	ff bb       	out	0x1f, r31	; 31
    27aa:	ee bb       	out	0x1e, r30	; 30
    27ac:	e0 9a       	sbi	0x1c, 0	; 28
    27ae:	31 96       	adiw	r30, 0x01	; 1
    27b0:	0d b2       	in	r0, 0x1d	; 29
    27b2:	0d 92       	st	X+, r0
    27b4:	41 50       	subi	r20, 0x01	; 1
    27b6:	50 40       	sbci	r21, 0x00	; 0
    27b8:	b8 f7       	brcc	.-18     	; 0x27a8 <eeprom_read_blraw+0x8>
    27ba:	08 95       	ret

000027bc <_exit>:
    27bc:	f8 94       	cli

000027be <__stop_program>:
    27be:	ff cf       	rjmp	.-2      	; 0x27be <__stop_program>
