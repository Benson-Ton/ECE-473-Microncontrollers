
plane4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00001972  00001a06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001972  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000053  0080012a  0080012a  00001a30  2**0
                  ALLOC
  3 .stab         000037e0  00000000  00000000  00001a30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017f8  00000000  00000000  00005210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006a08  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006a1c  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00006a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  000071d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000078f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  0000790a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_9>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_12>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 1b 04 	jmp	0x836	; 0x836 <__vector_15>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e7       	ldi	r30, 0x72	; 114
      a0:	f9 e1       	ldi	r31, 0x19	; 25
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 32       	cpi	r26, 0x2A	; 42
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	aa e2       	ldi	r26, 0x2A	; 42
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ad 37       	cpi	r26, 0x7D	; 125
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 ba 0b 	call	0x1774	; 0x1774 <main>
      c6:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_12>:
//NOTE:: TRY TO FIX BUG
// LOOK OVER PRESSING THE CHANGE TIME AND ALARM BUTTON AT THE SAME TIME CONDITIONS


//oscilator tone
ISR(TIMER1_COMPA_vect){
      ce:	1f 92       	push	r1
      d0:	0f 92       	push	r0
      d2:	0f b6       	in	r0, 0x3f	; 63
      d4:	0f 92       	push	r0
      d6:	11 24       	eor	r1, r1
      d8:	2f 93       	push	r18
      da:	3f 93       	push	r19
      dc:	8f 93       	push	r24
      de:	9f 93       	push	r25
 *				alarm_compare
 *******************************************************************/
int alarm_compare(void){

//return true if alarm time and real time match
if( (hours == hr_temp) && (minutes == min_temp)){
      e0:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <hours>
      e4:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <hours+0x1>
      e8:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <hr_temp>
      ec:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <hr_temp+0x1>
      f0:	28 17       	cp	r18, r24
      f2:	39 07       	cpc	r19, r25
      f4:	49 f0       	breq	.+18     	; 0x108 <__vector_12+0x3a>
	//if alarm matches and not in alarm toggle mode then trigger the ALARM!
	if( ( (alarm_compare()) && (mode != 0x40)) ){
		DDRE |= 1 << PE3;
		PORTC ^= 1 << PC0;
	}
}
      f6:	9f 91       	pop	r25
      f8:	8f 91       	pop	r24
      fa:	3f 91       	pop	r19
      fc:	2f 91       	pop	r18
      fe:	0f 90       	pop	r0
     100:	0f be       	out	0x3f, r0	; 63
     102:	0f 90       	pop	r0
     104:	1f 90       	pop	r1
     106:	18 95       	reti
 *				alarm_compare
 *******************************************************************/
int alarm_compare(void){

//return true if alarm time and real time match
if( (hours == hr_temp) && (minutes == min_temp)){
     108:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <minutes>
     10c:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <minutes+0x1>
     110:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <min_temp>
     114:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <min_temp+0x1>
     118:	28 17       	cp	r18, r24
     11a:	39 07       	cpc	r19, r25
     11c:	61 f7       	brne	.-40     	; 0xf6 <__vector_12+0x28>


//oscilator tone
ISR(TIMER1_COMPA_vect){
	//if alarm matches and not in alarm toggle mode then trigger the ALARM!
	if( ( (alarm_compare()) && (mode != 0x40)) ){
     11e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <mode>
     122:	80 34       	cpi	r24, 0x40	; 64
     124:	41 f3       	breq	.-48     	; 0xf6 <__vector_12+0x28>
		DDRE |= 1 << PE3;
     126:	13 9a       	sbi	0x02, 3	; 2
		PORTC ^= 1 << PC0;
     128:	95 b3       	in	r25, 0x15	; 21
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	89 27       	eor	r24, r25
     12e:	85 bb       	out	0x15, r24	; 21
	}
}
     130:	e2 cf       	rjmp	.-60     	; 0xf6 <__vector_12+0x28>

00000132 <__vector_9>:


//dimming for LED display 
ISR( TIMER2_COMP_vect){
     132:	1f 92       	push	r1
     134:	0f 92       	push	r0
     136:	0f b6       	in	r0, 0x3f	; 63
     138:	0f 92       	push	r0
     13a:	11 24       	eor	r1, r1
     13c:	8f 93       	push	r24
	
//	if(adc_data > 70){OCR2 = 10;} // dim the light if it is bright
//	else{OCR2 = 200;} // brighten the light otherwise
	OCR2 = adc_data;
     13e:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <adc_data>
     142:	83 bd       	out	0x23, r24	; 35
}
     144:	8f 91       	pop	r24
     146:	0f 90       	pop	r0
     148:	0f be       	out	0x3f, r0	; 63
     14a:	0f 90       	pop	r0
     14c:	1f 90       	pop	r1
     14e:	18 95       	reti

00000150 <alarm_set>:
/********************************************************************
 *				alarm_set
 *******************************************************************/
void alarm_set(void){
//save the alarm time that the user chooses
hr_temp = al_hr12;
     150:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <al_hr12>
     154:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <al_hr12+0x1>
     158:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <hr_temp+0x1>
     15c:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <hr_temp>
min_temp = al_min12;
     160:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <al_min12>
     164:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <al_min12+0x1>
     168:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <min_temp+0x1>
     16c:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <min_temp>
     170:	08 95       	ret

00000172 <alarm_compare>:
 *				alarm_compare
 *******************************************************************/
int alarm_compare(void){

//return true if alarm time and real time match
if( (hours == hr_temp) && (minutes == min_temp)){
     172:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <hours>
     176:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <hours+0x1>
     17a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <hr_temp>
     17e:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <hr_temp+0x1>
     182:	28 17       	cp	r18, r24
     184:	39 07       	cpc	r19, r25
     186:	19 f0       	breq	.+6      	; 0x18e <alarm_compare+0x1c>
	return TRUE;
}
return FALSE; // return false otherwise
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	90 e0       	ldi	r25, 0x00	; 0
}
     18c:	08 95       	ret
 *				alarm_compare
 *******************************************************************/
int alarm_compare(void){

//return true if alarm time and real time match
if( (hours == hr_temp) && (minutes == min_temp)){
     18e:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <minutes>
     192:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <minutes+0x1>
     196:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <min_temp>
     19a:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <min_temp+0x1>
	return TRUE;
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	42 17       	cp	r20, r18
     1a4:	53 07       	cpc	r21, r19
     1a6:	91 f3       	breq	.-28     	; 0x18c <alarm_compare+0x1a>
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	08 95       	ret

000001ac <alarm_bound_24>:
 * used to bound the alarm with respect to the time setting when setting
 * the alarm with the encoders.
 ********************************************************************/
void alarm_bound_24(void){
//bound minutes from 0 to 60
if (al_min12 > 59){
     1ac:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <al_min12>
     1b0:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <al_min12+0x1>
     1b4:	cc 97       	sbiw	r24, 0x3c	; 60
     1b6:	24 f0       	brlt	.+8      	; 0x1c0 <alarm_bound_24+0x14>
	  al_min12 = 0;
     1b8:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <al_min12+0x1>
     1bc:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <al_min12>
}

if(al_min12 < 0){al_min12 = 59;}//need to save the negative value to add toward the decrement 
     1c0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <al_min12>
     1c4:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <al_min12+0x1>
     1c8:	97 fd       	sbrc	r25, 7
     1ca:	17 c0       	rjmp	.+46     	; 0x1fa <alarm_bound_24+0x4e>

//bound the hours from 12 to 1 and 1 to 12
if(al_hr12 > 23){al_hr12 = 0;}
     1cc:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <al_hr12>
     1d0:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <al_hr12+0x1>
     1d4:	48 97       	sbiw	r24, 0x18	; 24
     1d6:	24 f0       	brlt	.+8      	; 0x1e0 <alarm_bound_24+0x34>
     1d8:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <al_hr12+0x1>
     1dc:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <al_hr12>
if(al_hr12 < 0){al_hr12 = 23;}
     1e0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <al_hr12>
     1e4:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <al_hr12+0x1>
     1e8:	97 ff       	sbrs	r25, 7
     1ea:	08 95       	ret
     1ec:	87 e1       	ldi	r24, 0x17	; 23
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <al_hr12+0x1>
     1f4:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <al_hr12>
     1f8:	08 95       	ret
//bound minutes from 0 to 60
if (al_min12 > 59){
	  al_min12 = 0;
}

if(al_min12 < 0){al_min12 = 59;}//need to save the negative value to add toward the decrement 
     1fa:	8b e3       	ldi	r24, 0x3B	; 59
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <al_min12+0x1>
     202:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <al_min12>
     206:	e2 cf       	rjmp	.-60     	; 0x1cc <alarm_bound_24+0x20>

00000208 <alarm_bound_12>:
 * used to bound the alarm with respect to the time setting when setting
 * the alarm with the encoders.
 ********************************************************************/
void alarm_bound_12(void){
//bound minutes from 0 to 60
if (al_min12 > 59){
     208:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <al_min12>
     20c:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <al_min12+0x1>
     210:	cc 97       	sbiw	r24, 0x3c	; 60
     212:	24 f0       	brlt	.+8      	; 0x21c <alarm_bound_12+0x14>
	  al_min12 = 0;
     214:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <al_min12+0x1>
     218:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <al_min12>
}

if(al_min12 < 0){al_min12 = 59;}//need to save the negative value to add toward the decrement 
     21c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <al_min12>
     220:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <al_min12+0x1>
     224:	97 fd       	sbrc	r25, 7
     226:	1b c0       	rjmp	.+54     	; 0x25e <alarm_bound_12+0x56>

//bound the hours from 12 to 1 and 1 to 12
if(al_hr12 > 12){al_hr12 = 1;}
     228:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <al_hr12>
     22c:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <al_hr12+0x1>
     230:	0d 97       	sbiw	r24, 0x0d	; 13
     232:	34 f0       	brlt	.+12     	; 0x240 <alarm_bound_12+0x38>
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <al_hr12+0x1>
     23c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <al_hr12>
if(al_hr12 < 1){al_hr12 = 12;}
     240:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <al_hr12>
     244:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <al_hr12+0x1>
     248:	18 16       	cp	r1, r24
     24a:	19 06       	cpc	r1, r25
     24c:	0c f4       	brge	.+2      	; 0x250 <alarm_bound_12+0x48>
     24e:	08 95       	ret
     250:	8c e0       	ldi	r24, 0x0C	; 12
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <al_hr12+0x1>
     258:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <al_hr12>
     25c:	08 95       	ret
//bound minutes from 0 to 60
if (al_min12 > 59){
	  al_min12 = 0;
}

if(al_min12 < 0){al_min12 = 59;}//need to save the negative value to add toward the decrement 
     25e:	8b e3       	ldi	r24, 0x3B	; 59
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <al_min12+0x1>
     266:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <al_min12>
     26a:	de cf       	rjmp	.-68     	; 0x228 <alarm_bound_12+0x20>

0000026c <time_bound_24>:
 * used to bound the correct time when wanting to change the real time 
 * with encoders
 ********************************************************************/
void time_bound_24(void){
//bound the minutes from 0 to 60
if (minutes > 59){
     26c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <minutes>
     270:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <minutes+0x1>
     274:	cc 97       	sbiw	r24, 0x3c	; 60
     276:	24 f0       	brlt	.+8      	; 0x280 <time_bound_24+0x14>
	  minutes = 0;
     278:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <minutes+0x1>
     27c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <minutes>
}

// bound the minutes from 60 to 0
if(minutes < 0){minutes = 59;}//need to save the negative value to add toward the decrement 
     280:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <minutes>
     284:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <minutes+0x1>
     288:	97 fd       	sbrc	r25, 7
     28a:	17 c0       	rjmp	.+46     	; 0x2ba <time_bound_24+0x4e>

//bound the hours from 24 to 0 and 0 to 24
if(hours > 23){hours = 0;}
     28c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <hours>
     290:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <hours+0x1>
     294:	48 97       	sbiw	r24, 0x18	; 24
     296:	24 f0       	brlt	.+8      	; 0x2a0 <time_bound_24+0x34>
     298:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <hours+0x1>
     29c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <hours>
if(hours < 0){hours = 23;}
     2a0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <hours>
     2a4:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <hours+0x1>
     2a8:	97 ff       	sbrs	r25, 7
     2aa:	08 95       	ret
     2ac:	87 e1       	ldi	r24, 0x17	; 23
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <hours+0x1>
     2b4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <hours>
     2b8:	08 95       	ret
if (minutes > 59){
	  minutes = 0;
}

// bound the minutes from 60 to 0
if(minutes < 0){minutes = 59;}//need to save the negative value to add toward the decrement 
     2ba:	8b e3       	ldi	r24, 0x3B	; 59
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <minutes+0x1>
     2c2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <minutes>
     2c6:	e2 cf       	rjmp	.-60     	; 0x28c <time_bound_24+0x20>

000002c8 <time_bound_12>:
 * used to bound the correct time when wanting to change the real time 
 * with encoders
 ********************************************************************/
void time_bound_12(void){
//bound the minutes from 0 to 60
if (minutes > 59){
     2c8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <minutes>
     2cc:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <minutes+0x1>
     2d0:	cc 97       	sbiw	r24, 0x3c	; 60
     2d2:	24 f0       	brlt	.+8      	; 0x2dc <time_bound_12+0x14>
	  minutes = 0;
     2d4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <minutes+0x1>
     2d8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <minutes>
}

// bound the minutes from 60 to 0
if(minutes < 0){minutes = 59;}//need to save the negative value to add toward the decrement 
     2dc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <minutes>
     2e0:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <minutes+0x1>
     2e4:	97 fd       	sbrc	r25, 7
     2e6:	1b c0       	rjmp	.+54     	; 0x31e <time_bound_12+0x56>

//bound the hours from 12 to 1 and 1 to 12
if(hours > 12){hours = 1;}
     2e8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <hours>
     2ec:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <hours+0x1>
     2f0:	0d 97       	sbiw	r24, 0x0d	; 13
     2f2:	34 f0       	brlt	.+12     	; 0x300 <time_bound_12+0x38>
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <hours+0x1>
     2fc:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <hours>
if(hours < 1){hours = 12;}
     300:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <hours>
     304:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <hours+0x1>
     308:	18 16       	cp	r1, r24
     30a:	19 06       	cpc	r1, r25
     30c:	0c f4       	brge	.+2      	; 0x310 <time_bound_12+0x48>
     30e:	08 95       	ret
     310:	8c e0       	ldi	r24, 0x0C	; 12
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <hours+0x1>
     318:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <hours>
     31c:	08 95       	ret
if (minutes > 59){
	  minutes = 0;
}

// bound the minutes from 60 to 0
if(minutes < 0){minutes = 59;}//need to save the negative value to add toward the decrement 
     31e:	8b e3       	ldi	r24, 0x3B	; 59
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <minutes+0x1>
     326:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <minutes>
     32a:	de cf       	rjmp	.-68     	; 0x2e8 <time_bound_12+0x20>

0000032c <time_tracker_12>:
}
/***************************************************************
/				time_tracker_12
****************************************************************/
void time_tracker_12(int sec, int min){
min = minutes;
     32c:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <minutes>
     330:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <minutes+0x1>
	//if 60 seconds has been reached then increase the minutes by one
	if(sec == 60){
     334:	cc 97       	sbiw	r24, 0x3c	; 60
     336:	e9 f0       	breq	.+58     	; 0x372 <time_tracker_12+0x46>
	//		minutes = 0;//reset minutes
	//		if(hours > 12){ hours = 1;} // reset hours
	//	}
	}

	if(min > 59){
     338:	2c 33       	cpi	r18, 0x3C	; 60
     33a:	31 05       	cpc	r19, r1
     33c:	6c f0       	brlt	.+26     	; 0x358 <time_tracker_12+0x2c>
		hours++;
     33e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <hours>
     342:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <hours+0x1>
     346:	01 96       	adiw	r24, 0x01	; 1
     348:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <hours+0x1>
     34c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <hours>
		minutes = 0;
     350:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <minutes+0x1>
     354:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <minutes>
	}
	if(hours > 12){hours = 1;}
     358:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <hours>
     35c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <hours+0x1>
     360:	0d 97       	sbiw	r24, 0x0d	; 13
     362:	34 f0       	brlt	.+12     	; 0x370 <time_tracker_12+0x44>
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <hours+0x1>
     36c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <hours>
     370:	08 95       	ret
****************************************************************/
void time_tracker_12(int sec, int min){
min = minutes;
	//if 60 seconds has been reached then increase the minutes by one
	if(sec == 60){
		minutes++; // increment minutes 
     372:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <minutes>
     376:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <minutes+0x1>
     37a:	01 96       	adiw	r24, 0x01	; 1
     37c:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <minutes+0x1>
     380:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <minutes>
	//	min = minutes; 
		seconds = 0; // reset seconds
     384:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <seconds+0x1>
     388:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <seconds>
     38c:	d5 cf       	rjmp	.-86     	; 0x338 <time_tracker_12+0xc>

0000038e <time_tracker_24>:
/				time_tracker_24
****************************************************************/
void time_tracker_24(int sec, int min){

	//if 60 seconds has been reached then increase the minutes by one
	if(sec == 60){
     38e:	cc 97       	sbiw	r24, 0x3c	; 60
     390:	09 f0       	breq	.+2      	; 0x394 <time_tracker_24+0x6>
     392:	08 95       	ret
		minutes++; // increment minutes 
     394:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <minutes>
     398:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <minutes+0x1>
     39c:	01 96       	adiw	r24, 0x01	; 1
     39e:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <minutes+0x1>
     3a2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <minutes>
		min = minutes; 
     3a6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <minutes>
     3aa:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <minutes+0x1>
		seconds = 0; // reset seconds
     3ae:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <seconds+0x1>
     3b2:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <seconds>
		//increment hours if 60 minutes has passed
		if(min > 59){ 
     3b6:	cc 97       	sbiw	r24, 0x3c	; 60
     3b8:	64 f3       	brlt	.-40     	; 0x392 <time_tracker_24+0x4>
			hours++;
     3ba:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <hours>
     3be:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <hours+0x1>
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <hours+0x1>
     3c8:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <hours>
			minutes = 0;//reset minutes
     3cc:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <minutes+0x1>
     3d0:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <minutes>
			if(hours > 23){ hours = 0;} // reset hours
     3d4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <hours>
     3d8:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <hours+0x1>
     3dc:	48 97       	sbiw	r24, 0x18	; 24
     3de:	cc f2       	brlt	.-78     	; 0x392 <time_tracker_24+0x4>
     3e0:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <hours+0x1>
     3e4:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <hours>
     3e8:	08 95       	ret

000003ea <update_EN_alarm>:
 *				update_encoder_alarm
 ********************************************************************/

void update_EN_alarm(int val_rot){
//changes the alarm time without affecting real time
	if(val_rot == 1){ al_hr12 += increment;} //if rotating to the right for left encoder then increment 
     3ea:	81 30       	cpi	r24, 0x01	; 1
     3ec:	91 05       	cpc	r25, r1
     3ee:	31 f1       	breq	.+76     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
	else if(val_rot ==0){al_hr12-= increment;}//if rotating to the left for left encoder then decrement
     3f0:	00 97       	sbiw	r24, 0x00	; 0
     3f2:	31 f0       	breq	.+12     	; 0x400 <__LOCK_REGION_LENGTH__>
	else if(val_rot == 2){al_min12-= increment;} // if rotating to the left for right encoder then decrement
     3f4:	82 30       	cpi	r24, 0x02	; 2
     3f6:	91 05       	cpc	r25, r1
     3f8:	81 f1       	breq	.+96     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
	else if(val_rot == 3){al_min12+= increment;}// if rotatiing to the right for right encoder then increment
     3fa:	03 97       	sbiw	r24, 0x03	; 3
     3fc:	81 f0       	breq	.+32     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     3fe:	08 95       	ret
 ********************************************************************/

void update_EN_alarm(int val_rot){
//changes the alarm time without affecting real time
	if(val_rot == 1){ al_hr12 += increment;} //if rotating to the right for left encoder then increment 
	else if(val_rot ==0){al_hr12-= increment;}//if rotating to the left for left encoder then decrement
     400:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <increment>
     404:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <increment+0x1>
     408:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <al_hr12>
     40c:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <al_hr12+0x1>
     410:	82 1b       	sub	r24, r18
     412:	93 0b       	sbc	r25, r19
     414:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <al_hr12+0x1>
     418:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <al_hr12>
     41c:	08 95       	ret
	else if(val_rot == 2){al_min12-= increment;} // if rotating to the left for right encoder then decrement
	else if(val_rot == 3){al_min12+= increment;}// if rotatiing to the right for right encoder then increment
     41e:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <increment>
     422:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <increment+0x1>
     426:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <al_min12>
     42a:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <al_min12+0x1>
     42e:	82 0f       	add	r24, r18
     430:	93 1f       	adc	r25, r19
     432:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <al_min12+0x1>
     436:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <al_min12>
     43a:	08 95       	ret
 *				update_encoder_alarm
 ********************************************************************/

void update_EN_alarm(int val_rot){
//changes the alarm time without affecting real time
	if(val_rot == 1){ al_hr12 += increment;} //if rotating to the right for left encoder then increment 
     43c:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <increment>
     440:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <increment+0x1>
     444:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <al_hr12>
     448:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <al_hr12+0x1>
     44c:	82 0f       	add	r24, r18
     44e:	93 1f       	adc	r25, r19
     450:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <al_hr12+0x1>
     454:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <al_hr12>
     458:	08 95       	ret
	else if(val_rot ==0){al_hr12-= increment;}//if rotating to the left for left encoder then decrement
	else if(val_rot == 2){al_min12-= increment;} // if rotating to the left for right encoder then decrement
     45a:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <increment>
     45e:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <increment+0x1>
     462:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <al_min12>
     466:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <al_min12+0x1>
     46a:	82 1b       	sub	r24, r18
     46c:	93 0b       	sbc	r25, r19
     46e:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <al_min12+0x1>
     472:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <al_min12>
     476:	08 95       	ret

00000478 <update_EN>:
 *				update_encoder
 ********************************************************************/

void update_EN(int val_rot){
//changes the real time without affecting alarm time
	if(val_rot == 1){ hours += increment;} //if rotating to the right for left encoder then increment 
     478:	81 30       	cpi	r24, 0x01	; 1
     47a:	91 05       	cpc	r25, r1
     47c:	31 f1       	breq	.+76     	; 0x4ca <update_EN+0x52>
	else if(val_rot ==0){hours-= increment;}//if rotating to the left for left encoder then decrement
     47e:	00 97       	sbiw	r24, 0x00	; 0
     480:	31 f0       	breq	.+12     	; 0x48e <update_EN+0x16>
	else if(val_rot == 2){minutes-= increment;} // if rotating to the left for right encoder then decrement
     482:	82 30       	cpi	r24, 0x02	; 2
     484:	91 05       	cpc	r25, r1
     486:	81 f1       	breq	.+96     	; 0x4e8 <update_EN+0x70>
	else if(val_rot == 3){minutes+= increment;}// if rotatiing to the right for right encoder then increment
     488:	03 97       	sbiw	r24, 0x03	; 3
     48a:	81 f0       	breq	.+32     	; 0x4ac <update_EN+0x34>
     48c:	08 95       	ret
 ********************************************************************/

void update_EN(int val_rot){
//changes the real time without affecting alarm time
	if(val_rot == 1){ hours += increment;} //if rotating to the right for left encoder then increment 
	else if(val_rot ==0){hours-= increment;}//if rotating to the left for left encoder then decrement
     48e:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <increment>
     492:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <increment+0x1>
     496:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <hours>
     49a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <hours+0x1>
     49e:	82 1b       	sub	r24, r18
     4a0:	93 0b       	sbc	r25, r19
     4a2:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <hours+0x1>
     4a6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <hours>
     4aa:	08 95       	ret
	else if(val_rot == 2){minutes-= increment;} // if rotating to the left for right encoder then decrement
	else if(val_rot == 3){minutes+= increment;}// if rotatiing to the right for right encoder then increment
     4ac:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <increment>
     4b0:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <increment+0x1>
     4b4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <minutes>
     4b8:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <minutes+0x1>
     4bc:	82 0f       	add	r24, r18
     4be:	93 1f       	adc	r25, r19
     4c0:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <minutes+0x1>
     4c4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <minutes>
     4c8:	08 95       	ret
 *				update_encoder
 ********************************************************************/

void update_EN(int val_rot){
//changes the real time without affecting alarm time
	if(val_rot == 1){ hours += increment;} //if rotating to the right for left encoder then increment 
     4ca:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <increment>
     4ce:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <increment+0x1>
     4d2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <hours>
     4d6:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <hours+0x1>
     4da:	82 0f       	add	r24, r18
     4dc:	93 1f       	adc	r25, r19
     4de:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <hours+0x1>
     4e2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <hours>
     4e6:	08 95       	ret
	else if(val_rot ==0){hours-= increment;}//if rotating to the left for left encoder then decrement
	else if(val_rot == 2){minutes-= increment;} // if rotating to the left for right encoder then decrement
     4e8:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <increment>
     4ec:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <increment+0x1>
     4f0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <minutes>
     4f4:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <minutes+0x1>
     4f8:	82 1b       	sub	r24, r18
     4fa:	93 0b       	sbc	r25, r19
     4fc:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <minutes+0x1>
     500:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <minutes>
     504:	08 95       	ret

00000506 <read_SPI>:
 *				read_SPI
 ********************************************************************/
void read_SPI(void){

//shift clock register
PORTE &= ~(1 << PE6);//falling edge
     506:	1e 98       	cbi	0x03, 6	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     508:	8f e9       	ldi	r24, 0x9F	; 159
     50a:	9f e0       	ldi	r25, 0x0F	; 15
     50c:	01 97       	sbiw	r24, 0x01	; 1
     50e:	f1 f7       	brne	.-4      	; 0x50c <read_SPI+0x6>
     510:	00 c0       	rjmp	.+0      	; 0x512 <read_SPI+0xc>
     512:	00 00       	nop
_delay_ms(1); // buffer for push buttons
PORTE |= (1 << PE6); //rising edge
     514:	1e 9a       	sbi	0x03, 6	; 3
SPDR = 0x20; //send junk data to read in from SPI
     516:	80 e2       	ldi	r24, 0x20	; 32
     518:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){} // read data in
     51a:	77 9b       	sbis	0x0e, 7	; 14
     51c:	fe cf       	rjmp	.-4      	; 0x51a <read_SPI+0x14>
raw_encoder_val = SPDR;//save the data
     51e:	8f b1       	in	r24, 0x0f	; 15
     520:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <raw_encoder_val>
     524:	08 95       	ret

00000526 <write_SPI>:
/********************************************************************
 *				write_SPI
 ********************************************************************/
void write_SPI(uint8_t value){

SPDR = value; // take in which mode it is currently on and display it 
     526:	8f b9       	out	0x0f, r24	; 15
	while (bit_is_clear(SPSR,SPIF)) {} //wait till data is sent out
     528:	77 9b       	sbis	0x0e, 7	; 14
     52a:	fe cf       	rjmp	.-4      	; 0x528 <write_SPI+0x2>
PORTD |= (1 << PD2); //SEND data to bargraph, rising edge
     52c:	92 9a       	sbi	0x12, 2	; 18
PORTD &= ~(1<<PD2); // falling edge
     52e:	92 98       	cbi	0x12, 2	; 18
     530:	08 95       	ret

00000532 <chk_buttons>:
// Checks the state of pushbutton S0 It shifts in ones till the button is pushed. 
// Function returns a 1 only once per debounced button push so a debounce and toggle 
// function can be implemented at the same time. Expects active low pushbutton on 
// Port A  bit zero. Debounce time is determined by external loop delay times 12. 
//*******************************************************************************
int chk_buttons(int button) {
     532:	ac 01       	movw	r20, r24
static uint16_t states[8] = {0}; // an array to store the states of all buttons on the button board

// states[0] corresponds to S1 on the board and states[7] corresponds to S8
states[button] = (states[button]<<1 | (! bit_is_clear(PINA, button)) | 0xE000); //first extract the bit that corresponds to the button
     534:	99 b3       	in	r25, 0x19	; 25
     536:	fa 01       	movw	r30, r20
     538:	ee 0f       	add	r30, r30
     53a:	ff 1f       	adc	r31, r31
     53c:	eb 5b       	subi	r30, 0xBB	; 187
     53e:	fe 4f       	sbci	r31, 0xFE	; 254
     540:	20 81       	ld	r18, Z
     542:	31 81       	ldd	r19, Z+1	; 0x01
     544:	22 0f       	add	r18, r18
     546:	33 1f       	adc	r19, r19
     548:	30 6e       	ori	r19, 0xE0	; 224
     54a:	89 2f       	mov	r24, r25
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	02 c0       	rjmp	.+4      	; 0x554 <chk_buttons+0x22>
     550:	95 95       	asr	r25
     552:	87 95       	ror	r24
     554:	4a 95       	dec	r20
     556:	e2 f7       	brpl	.-8      	; 0x550 <chk_buttons+0x1e>
     558:	81 70       	andi	r24, 0x01	; 1
     55a:	99 27       	eor	r25, r25
     55c:	28 2b       	or	r18, r24
     55e:	39 2b       	or	r19, r25
     560:	31 83       	std	Z+1, r19	; 0x01
     562:	20 83       	st	Z, r18
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	21 15       	cp	r18, r1
     56a:	30 4f       	sbci	r19, 0xF0	; 240
     56c:	11 f0       	breq	.+4      	; 0x572 <chk_buttons+0x40>
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	90 e0       	ldi	r25, 0x00	; 0
//Check if button is pressed
if (states[button] == 0xF000) {return TRUE;} 
return FALSE;
}
     572:	08 95       	ret

00000574 <minutes_seg>:
//segment_data will hold hours and minutes.
//indices 3-4 will hold the hours
//indices 0-1 will hold the minutes                      
//**********************************************************************************

void minutes_seg(uint16_t min, uint16_t hr) {
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	ac 01       	movw	r20, r24
     57a:	fb 01       	movw	r30, r22
int minutes_index = 0; // focus on the lower number indices
int temp = 0; //temprary variable
int hours_index = 3; //focus on the higher number indices

//base case starting at 0 minutes and display 0|0
if(min == 0){
     57c:	00 97       	sbiw	r24, 0x00	; 0
     57e:	09 f0       	breq	.+2      	; 0x582 <minutes_seg+0xe>
     580:	44 c0       	rjmp	.+136    	; 0x60a <minutes_seg+0x96>
	segment_data[0] = dec_to_7seg[0];
     582:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     586:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <segment_data>
}
//convert the min value and store into segment_data array 
	while(TRUE){
		temp = min % 10; // isolate to a single digit
	        if(minutes_index == 2){minutes_index++;};
		segment_data[minutes_index] = dec_to_7seg[temp]; //use the digit to store the hexidecimal value to seg array
     58a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <segment_data+0x1>
	}

//convert the hr value and store into segment_data array 
	while(TRUE){
		temp = hr % 10; //isolate to a single digit
		segment_data[hours_index] = dec_to_7seg[temp];//use the digit to store the hexidecimal value to seg array
     58e:	9f 01       	movw	r18, r30
     590:	ad ec       	ldi	r26, 0xCD	; 205
     592:	bc ec       	ldi	r27, 0xCC	; 204
     594:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__umulhisi3>
     598:	ac 01       	movw	r20, r24
     59a:	56 95       	lsr	r21
     59c:	47 95       	ror	r20
     59e:	56 95       	lsr	r21
     5a0:	47 95       	ror	r20
     5a2:	56 95       	lsr	r21
     5a4:	47 95       	ror	r20
     5a6:	9a 01       	movw	r18, r20
     5a8:	22 0f       	add	r18, r18
     5aa:	33 1f       	adc	r19, r19
     5ac:	ca 01       	movw	r24, r20
     5ae:	88 0f       	add	r24, r24
     5b0:	99 1f       	adc	r25, r25
     5b2:	88 0f       	add	r24, r24
     5b4:	99 1f       	adc	r25, r25
     5b6:	88 0f       	add	r24, r24
     5b8:	99 1f       	adc	r25, r25
     5ba:	82 0f       	add	r24, r18
     5bc:	93 1f       	adc	r25, r19
     5be:	e8 1b       	sub	r30, r24
     5c0:	f9 0b       	sbc	r31, r25
     5c2:	e0 50       	subi	r30, 0x00	; 0
     5c4:	ff 4f       	sbci	r31, 0xFF	; 255
     5c6:	80 81       	ld	r24, Z
     5c8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <segment_data+0x3>
     5cc:	9a 01       	movw	r18, r20
     5ce:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__umulhisi3>
     5d2:	96 95       	lsr	r25
     5d4:	87 95       	ror	r24
     5d6:	96 95       	lsr	r25
     5d8:	87 95       	ror	r24
     5da:	96 95       	lsr	r25
     5dc:	87 95       	ror	r24
     5de:	9c 01       	movw	r18, r24
     5e0:	22 0f       	add	r18, r18
     5e2:	33 1f       	adc	r19, r19
     5e4:	88 0f       	add	r24, r24
     5e6:	99 1f       	adc	r25, r25
     5e8:	88 0f       	add	r24, r24
     5ea:	99 1f       	adc	r25, r25
     5ec:	88 0f       	add	r24, r24
     5ee:	99 1f       	adc	r25, r25
     5f0:	82 0f       	add	r24, r18
     5f2:	93 1f       	adc	r25, r19
     5f4:	48 1b       	sub	r20, r24
     5f6:	59 0b       	sbc	r21, r25
     5f8:	fa 01       	movw	r30, r20
     5fa:	e0 50       	subi	r30, 0x00	; 0
     5fc:	ff 4f       	sbci	r31, 0xFF	; 255
     5fe:	80 81       	ld	r24, Z
     600:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <segment_data+0x4>
	segment_data[5] = dec_to_7seg[0];
	}
	else{for(int i = 4; i < 5; i++){segment_data[i] = dec_to_7seg[10];}}
}
*/  
}
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	08 95       	ret
}
//convert the min value and store into segment_data array 
	while(TRUE){
		temp = min % 10; // isolate to a single digit
	        if(minutes_index == 2){minutes_index++;};
		segment_data[minutes_index] = dec_to_7seg[temp]; //use the digit to store the hexidecimal value to seg array
     60a:	9c 01       	movw	r18, r24
     60c:	ad ec       	ldi	r26, 0xCD	; 205
     60e:	bc ec       	ldi	r27, 0xCC	; 204
     610:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__umulhisi3>
     614:	ec 01       	movw	r28, r24
     616:	d6 95       	lsr	r29
     618:	c7 95       	ror	r28
     61a:	d6 95       	lsr	r29
     61c:	c7 95       	ror	r28
     61e:	d6 95       	lsr	r29
     620:	c7 95       	ror	r28
     622:	9e 01       	movw	r18, r28
     624:	22 0f       	add	r18, r18
     626:	33 1f       	adc	r19, r19
     628:	ce 01       	movw	r24, r28
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	88 0f       	add	r24, r24
     630:	99 1f       	adc	r25, r25
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	82 0f       	add	r24, r18
     638:	93 1f       	adc	r25, r19
     63a:	48 1b       	sub	r20, r24
     63c:	59 0b       	sbc	r21, r25
     63e:	da 01       	movw	r26, r20
     640:	a0 50       	subi	r26, 0x00	; 0
     642:	bf 4f       	sbci	r27, 0xFF	; 255
     644:	8c 91       	ld	r24, X
     646:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <segment_data>
     64a:	9e 01       	movw	r18, r28
     64c:	ad ec       	ldi	r26, 0xCD	; 205
     64e:	bc ec       	ldi	r27, 0xCC	; 204
     650:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__umulhisi3>
     654:	96 95       	lsr	r25
     656:	87 95       	ror	r24
     658:	96 95       	lsr	r25
     65a:	87 95       	ror	r24
     65c:	96 95       	lsr	r25
     65e:	87 95       	ror	r24
     660:	9c 01       	movw	r18, r24
     662:	22 0f       	add	r18, r18
     664:	33 1f       	adc	r19, r19
     666:	88 0f       	add	r24, r24
     668:	99 1f       	adc	r25, r25
     66a:	88 0f       	add	r24, r24
     66c:	99 1f       	adc	r25, r25
     66e:	88 0f       	add	r24, r24
     670:	99 1f       	adc	r25, r25
     672:	82 0f       	add	r24, r18
     674:	93 1f       	adc	r25, r19
     676:	c8 1b       	sub	r28, r24
     678:	d9 0b       	sbc	r29, r25
     67a:	c0 50       	subi	r28, 0x00	; 0
     67c:	df 4f       	sbci	r29, 0xFF	; 255
     67e:	88 81       	ld	r24, Y
     680:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <segment_data+0x1>
     684:	84 cf       	rjmp	.-248    	; 0x58e <minutes_seg+0x1a>

00000686 <process_EN>:
 *
 * once the state machine completes all 4 cycles then it means the knob has been shifted once
 * encoder function for the left and right knobs 
 * Handles all cases of any rotation of the encoders
 **********************************************************************/
int process_EN(void){
     686:	cf 93       	push	r28
//Breaking up the raw data from the encoder into a and b pins

uint8_t new_A = ((raw_encoder_val & 0x01) ==0) ? 0:1;
     688:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <raw_encoder_val>
     68c:	91 70       	andi	r25, 0x01	; 1
uint8_t new_B = ((raw_encoder_val & 0x02) ==0) ? 0:1;
     68e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <raw_encoder_val>
     692:	41 e0       	ldi	r20, 0x01	; 1
     694:	c8 2f       	mov	r28, r24
     696:	c2 70       	andi	r28, 0x02	; 2
     698:	81 ff       	sbrs	r24, 1
     69a:	40 e0       	ldi	r20, 0x00	; 0

//process the right encoder
uint8_t new_C = ((raw_encoder_val & 0x04) ==0) ? 0:1;
     69c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <raw_encoder_val>
     6a0:	84 70       	andi	r24, 0x04	; 4
uint8_t new_D = ((raw_encoder_val & 0x08) ==0) ? 0:1;
     6a2:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <raw_encoder_val>
     6a6:	31 e0       	ldi	r19, 0x01	; 1
     6a8:	52 2f       	mov	r21, r18
     6aa:	58 70       	andi	r21, 0x08	; 8
     6ac:	23 ff       	sbrs	r18, 3
     6ae:	30 e0       	ldi	r19, 0x00	; 0
int en_val = 0;

en_val = -1; // default return value , no change

// process the right encoder inputs and determine the position movement
if (( new_C != old_C ) || ( new_D != old_D )){ // if change occurred
     6b0:	e1 e0       	ldi	r30, 0x01	; 1
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	81 11       	cpse	r24, r1
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <process_EN+0x36>
     6b8:	e0 e0       	ldi	r30, 0x00	; 0
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <old_C>
     6c0:	70 91 5e 01 	lds	r23, 0x015E	; 0x80015e <old_C+0x1>
     6c4:	23 2f       	mov	r18, r19
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	e6 17       	cp	r30, r22
     6ca:	f7 07       	cpc	r31, r23
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <process_EN+0x4a>
     6ce:	72 c0       	rjmp	.+228    	; 0x7b4 <process_EN+0x12e>

if (( new_C == 0) && ( new_D == 0)) { // once the state has been moved either right or left from current state
	if ( old_C == 1){ r_counter++;}
     6d0:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <old_C>
     6d4:	70 91 5e 01 	lds	r23, 0x015E	; 0x80015e <old_C+0x1>
en_val = -1; // default return value , no change

// process the right encoder inputs and determine the position movement
if (( new_C != old_C ) || ( new_D != old_D )){ // if change occurred

if (( new_C == 0) && ( new_D == 0)) { // once the state has been moved either right or left from current state
     6d8:	81 11       	cpse	r24, r1
     6da:	11 c0       	rjmp	.+34     	; 0x6fe <process_EN+0x78>
     6dc:	55 23       	and	r21, r21
     6de:	89 f0       	breq	.+34     	; 0x702 <process_EN+0x7c>
	if ( old_C == 1){ r_counter++;}
	else { r_counter--;}
}
else if (( new_C == 0) && ( new_D == 1)) { // update state if it has been moved from position from left to right 
	if ( old_C == 0){ r_counter++;}
     6e0:	67 2b       	or	r22, r23
     6e2:	91 f4       	brne	.+36     	; 0x708 <process_EN+0x82>

// process the right encoder inputs and determine the position movement
if (( new_C != old_C ) || ( new_D != old_D )){ // if change occurred

if (( new_C == 0) && ( new_D == 0)) { // once the state has been moved either right or left from current state
	if ( old_C == 1){ r_counter++;}
     6e4:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <__data_end>
     6e8:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <__data_end+0x1>
     6ec:	6f 5f       	subi	r22, 0xFF	; 255
     6ee:	7f 4f       	sbci	r23, 0xFF	; 255
     6f0:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__data_end+0x1>
     6f4:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__data_end>
uint8_t new_C = ((raw_encoder_val & 0x04) ==0) ? 0:1;
uint8_t new_D = ((raw_encoder_val & 0x08) ==0) ? 0:1;

int en_val = 0;

en_val = -1; // default return value , no change
     6f8:	af ef       	ldi	r26, 0xFF	; 255
     6fa:	bf ef       	ldi	r27, 0xFF	; 255
     6fc:	11 c0       	rjmp	.+34     	; 0x720 <process_EN+0x9a>
else if (( new_C == 0) && ( new_D == 1)) { // update state if it has been moved from position from left to right 
	if ( old_C == 0){ r_counter++;}
	else { r_counter--;}
}

else if (( new_C == 1) && ( new_D == 1)) {// detent position
     6fe:	51 11       	cpse	r21, r1
     700:	71 c0       	rjmp	.+226    	; 0x7e4 <process_EN+0x15e>

// process the right encoder inputs and determine the position movement
if (( new_C != old_C ) || ( new_D != old_D )){ // if change occurred

if (( new_C == 0) && ( new_D == 0)) { // once the state has been moved either right or left from current state
	if ( old_C == 1){ r_counter++;}
     702:	61 30       	cpi	r22, 0x01	; 1
     704:	71 05       	cpc	r23, r1
     706:	71 f3       	breq	.-36     	; 0x6e4 <process_EN+0x5e>
	else { r_counter--;}
     708:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <__data_end>
     70c:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <__data_end+0x1>
     710:	61 50       	subi	r22, 0x01	; 1
     712:	71 09       	sbc	r23, r1
     714:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__data_end+0x1>
     718:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__data_end>
uint8_t new_C = ((raw_encoder_val & 0x04) ==0) ? 0:1;
uint8_t new_D = ((raw_encoder_val & 0x08) ==0) ? 0:1;

int en_val = 0;

en_val = -1; // default return value , no change
     71c:	af ef       	ldi	r26, 0xFF	; 255
     71e:	bf ef       	ldi	r27, 0xFF	; 255
}
else if (( new_C == 1) && ( new_D == 0)) {
	if ( old_C == 1) { r_counter++;}
	else { r_counter--;}
}
	old_C = new_C ; // save what are now old values
     720:	f0 93 5e 01 	sts	0x015E, r31	; 0x80015e <old_C+0x1>
     724:	e0 93 5d 01 	sts	0x015D, r30	; 0x80015d <old_C>
	old_D = new_D ;
     728:	30 93 62 01 	sts	0x0162, r19	; 0x800162 <old_D+0x1>
     72c:	20 93 61 01 	sts	0x0161, r18	; 0x800161 <old_D>

	} // if change occurred


// process the left encoder inputs and determine the position movement
if (( new_A != old_A ) || ( new_B != old_B )){ // if change occurred
     730:	29 2f       	mov	r18, r25
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <old_A>
     738:	70 91 59 01 	lds	r23, 0x0159	; 0x800159 <old_A+0x1>
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	26 17       	cp	r18, r22
     740:	37 07       	cpc	r19, r23
     742:	81 f1       	breq	.+96     	; 0x7a4 <process_EN+0x11e>

if (( new_A == 0) && ( new_B == 0)) { // once the state has been moved either right or left from current state
     744:	99 23       	and	r25, r25
     746:	e1 f0       	breq	.+56     	; 0x780 <process_EN+0xfa>
	else { state_counter--;}
}

else if (( new_A == 1) && ( new_B == 1)) {// detent position
	
	if ( old_A == 0){ if( state_counter == 3){ en_val =0;}} // one direction. Increment 
     748:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <old_A>
     74c:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <old_A+0x1>
else if (( new_A == 0) && ( new_B == 1)) { // update state if it has been moved from position from left to right 
	if ( old_A == 0){ state_counter++;}
	else { state_counter--;}
}

else if (( new_A == 1) && ( new_B == 1)) {// detent position
     750:	c1 11       	cpse	r28, r1
     752:	3b c0       	rjmp	.+118    	; 0x7ca <process_EN+0x144>
	else {if( state_counter == -3){ en_val =1;}} // or the other. Decrement
	
	state_counter = 0; // count is always reset in detent position
}
else if (( new_A == 1) && ( new_B == 0)) {
	if ( old_A == 1) { state_counter++;}
     754:	01 97       	sbiw	r24, 0x01	; 1
     756:	e1 f0       	breq	.+56     	; 0x790 <process_EN+0x10a>
	else { state_counter--;}
     758:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <state_counter>
     75c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <state_counter+0x1>
     760:	01 97       	sbiw	r24, 0x01	; 1
     762:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <state_counter+0x1>
     766:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <state_counter>
}
	old_A = new_A ; // save what are now old values
     76a:	30 93 59 01 	sts	0x0159, r19	; 0x800159 <old_A+0x1>
     76e:	20 93 58 01 	sts	0x0158, r18	; 0x800158 <old_A>
	old_B = new_B ;
     772:	50 93 5b 01 	sts	0x015B, r21	; 0x80015b <old_B+0x1>
     776:	40 93 5a 01 	sts	0x015A, r20	; 0x80015a <old_B>
	} // if change occurred


return ( en_val ); // return encoder state

}
     77a:	cd 01       	movw	r24, r26
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

// process the left encoder inputs and determine the position movement
if (( new_A != old_A ) || ( new_B != old_B )){ // if change occurred

if (( new_A == 0) && ( new_B == 0)) { // once the state has been moved either right or left from current state
	if ( old_A == 1){ state_counter++;}
     780:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <old_A>
     784:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <old_A+0x1>


// process the left encoder inputs and determine the position movement
if (( new_A != old_A ) || ( new_B != old_B )){ // if change occurred

if (( new_A == 0) && ( new_B == 0)) { // once the state has been moved either right or left from current state
     788:	cc 23       	and	r28, r28
     78a:	21 f3       	breq	.-56     	; 0x754 <process_EN+0xce>
	if ( old_A == 1){ state_counter++;}
	else { state_counter--;}
}
else if (( new_A == 0) && ( new_B == 1)) { // update state if it has been moved from position from left to right 
	if ( old_A == 0){ state_counter++;}
     78c:	89 2b       	or	r24, r25
     78e:	21 f7       	brne	.-56     	; 0x758 <process_EN+0xd2>
	else {if( state_counter == -3){ en_val =1;}} // or the other. Decrement
	
	state_counter = 0; // count is always reset in detent position
}
else if (( new_A == 1) && ( new_B == 0)) {
	if ( old_A == 1) { state_counter++;}
     790:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <state_counter>
     794:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <state_counter+0x1>
     798:	01 96       	adiw	r24, 0x01	; 1
     79a:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <state_counter+0x1>
     79e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <state_counter>
     7a2:	e3 cf       	rjmp	.-58     	; 0x76a <process_EN+0xe4>

	} // if change occurred


// process the left encoder inputs and determine the position movement
if (( new_A != old_A ) || ( new_B != old_B )){ // if change occurred
     7a4:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <old_B>
     7a8:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <old_B+0x1>
     7ac:	46 17       	cp	r20, r22
     7ae:	57 07       	cpc	r21, r23
     7b0:	49 f6       	brne	.-110    	; 0x744 <process_EN+0xbe>
     7b2:	e3 cf       	rjmp	.-58     	; 0x77a <process_EN+0xf4>
int en_val = 0;

en_val = -1; // default return value , no change

// process the right encoder inputs and determine the position movement
if (( new_C != old_C ) || ( new_D != old_D )){ // if change occurred
     7b4:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <old_D>
     7b8:	70 91 62 01 	lds	r23, 0x0162	; 0x800162 <old_D+0x1>
     7bc:	26 17       	cp	r18, r22
     7be:	37 07       	cpc	r19, r23
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <process_EN+0x13e>
     7c2:	86 cf       	rjmp	.-244    	; 0x6d0 <process_EN+0x4a>
uint8_t new_C = ((raw_encoder_val & 0x04) ==0) ? 0:1;
uint8_t new_D = ((raw_encoder_val & 0x08) ==0) ? 0:1;

int en_val = 0;

en_val = -1; // default return value , no change
     7c4:	af ef       	ldi	r26, 0xFF	; 255
     7c6:	bf ef       	ldi	r27, 0xFF	; 255
     7c8:	b3 cf       	rjmp	.-154    	; 0x730 <process_EN+0xaa>
	else { state_counter--;}
}

else if (( new_A == 1) && ( new_B == 1)) {// detent position
	
	if ( old_A == 0){ if( state_counter == 3){ en_val =0;}} // one direction. Increment 
     7ca:	89 2b       	or	r24, r25
     7cc:	d9 f4       	brne	.+54     	; 0x804 <process_EN+0x17e>
     7ce:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <state_counter>
     7d2:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <state_counter+0x1>
     7d6:	03 97       	sbiw	r24, 0x03	; 3
     7d8:	41 f1       	breq	.+80     	; 0x82a <process_EN+0x1a4>

	else {if( state_counter == -3){ en_val =1;}} // or the other. Decrement
	
	state_counter = 0; // count is always reset in detent position
     7da:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <state_counter+0x1>
     7de:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <state_counter>
     7e2:	c3 cf       	rjmp	.-122    	; 0x76a <process_EN+0xe4>
	else { r_counter--;}
}

else if (( new_C == 1) && ( new_D == 1)) {// detent position
	
	if ( old_C == 0){ if( r_counter == 3){ en_val =2;}} // one direction. Increment 
     7e4:	67 2b       	or	r22, r23
     7e6:	b9 f4       	brne	.+46     	; 0x816 <process_EN+0x190>
     7e8:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <__data_end>
     7ec:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <__data_end+0x1>
     7f0:	63 30       	cpi	r22, 0x03	; 3
     7f2:	71 05       	cpc	r23, r1
     7f4:	e9 f0       	breq	.+58     	; 0x830 <process_EN+0x1aa>
uint8_t new_C = ((raw_encoder_val & 0x04) ==0) ? 0:1;
uint8_t new_D = ((raw_encoder_val & 0x08) ==0) ? 0:1;

int en_val = 0;

en_val = -1; // default return value , no change
     7f6:	af ef       	ldi	r26, 0xFF	; 255
     7f8:	bf ef       	ldi	r27, 0xFF	; 255
	
	if ( old_C == 0){ if( r_counter == 3){ en_val =2;}} // one direction. Increment 

	else {if( r_counter == -3){ en_val =3;}} // or the other. Decrement
	
	r_counter = 0; // count is always reset in detent position
     7fa:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__data_end+0x1>
     7fe:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
     802:	8e cf       	rjmp	.-228    	; 0x720 <process_EN+0x9a>

else if (( new_A == 1) && ( new_B == 1)) {// detent position
	
	if ( old_A == 0){ if( state_counter == 3){ en_val =0;}} // one direction. Increment 

	else {if( state_counter == -3){ en_val =1;}} // or the other. Decrement
     804:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <state_counter>
     808:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <state_counter+0x1>
     80c:	03 96       	adiw	r24, 0x03	; 3
     80e:	29 f7       	brne	.-54     	; 0x7da <process_EN+0x154>
     810:	a1 e0       	ldi	r26, 0x01	; 1
     812:	b0 e0       	ldi	r27, 0x00	; 0
     814:	e2 cf       	rjmp	.-60     	; 0x7da <process_EN+0x154>

else if (( new_C == 1) && ( new_D == 1)) {// detent position
	
	if ( old_C == 0){ if( r_counter == 3){ en_val =2;}} // one direction. Increment 

	else {if( r_counter == -3){ en_val =3;}} // or the other. Decrement
     816:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <__data_end>
     81a:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <__data_end+0x1>
     81e:	6d 3f       	cpi	r22, 0xFD	; 253
     820:	7f 4f       	sbci	r23, 0xFF	; 255
     822:	49 f7       	brne	.-46     	; 0x7f6 <process_EN+0x170>
     824:	a3 e0       	ldi	r26, 0x03	; 3
     826:	b0 e0       	ldi	r27, 0x00	; 0
     828:	e8 cf       	rjmp	.-48     	; 0x7fa <process_EN+0x174>
	else { state_counter--;}
}

else if (( new_A == 1) && ( new_B == 1)) {// detent position
	
	if ( old_A == 0){ if( state_counter == 3){ en_val =0;}} // one direction. Increment 
     82a:	a0 e0       	ldi	r26, 0x00	; 0
     82c:	b0 e0       	ldi	r27, 0x00	; 0
     82e:	d5 cf       	rjmp	.-86     	; 0x7da <process_EN+0x154>
	else { r_counter--;}
}

else if (( new_C == 1) && ( new_D == 1)) {// detent position
	
	if ( old_C == 0){ if( r_counter == 3){ en_val =2;}} // one direction. Increment 
     830:	a2 e0       	ldi	r26, 0x02	; 2
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	e2 cf       	rjmp	.-60     	; 0x7fa <process_EN+0x174>

00000836 <__vector_15>:
//	else{OCR2 = 200;} // brighten the light otherwise
	OCR2 = adc_data;
}

// TIMER0 overflowIS
ISR( TIMER0_COMP_vect ) {
     836:	1f 92       	push	r1
     838:	0f 92       	push	r0
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	0f 92       	push	r0
     83e:	11 24       	eor	r1, r1
     840:	0b b6       	in	r0, 0x3b	; 59
     842:	0f 92       	push	r0
     844:	ef 92       	push	r14
     846:	ff 92       	push	r15
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	2f 93       	push	r18
     84e:	3f 93       	push	r19
     850:	4f 93       	push	r20
     852:	5f 93       	push	r21
     854:	6f 93       	push	r22
     856:	7f 93       	push	r23
     858:	8f 93       	push	r24
     85a:	9f 93       	push	r25
     85c:	af 93       	push	r26
     85e:	bf 93       	push	r27
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	ef 93       	push	r30
     866:	ff 93       	push	r31

//save the states of PORTA and PORTB
saveA = PORTA;
     868:	8b b3       	in	r24, 0x1b	; 27
     86a:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <saveA>
saveB = PORTB;
     86e:	88 b3       	in	r24, 0x18	; 24
     870:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <saveB>


alarm = FALSE;
     874:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <alarm+0x1>
     878:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <alarm>
static uint8_t timer = 0;  //hold value of count between interrupts
timer++;  //extend counter
     87c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <timer.2327>
     880:	8f 5f       	subi	r24, 0xFF	; 255
     882:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <timer.2327>


if((timer% 64) == 0){ // turn off for half a second 
     886:	98 2f       	mov	r25, r24
     888:	9f 73       	andi	r25, 0x3F	; 63
     88a:	19 f4       	brne	.+6      	; 0x892 <__vector_15+0x5c>
	segment_data[2] = 0x07; //turn off colon
     88c:	97 e0       	ldi	r25, 0x07	; 7
     88e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <segment_data+0x2>
} 

//STOP CLOCK
if( (mode != 0x08) && (mode != 0x40)){//if setting the time stop the clock 
     892:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <mode>
     896:	98 30       	cpi	r25, 0x08	; 8
     898:	c1 f1       	breq	.+112    	; 0x90a <__vector_15+0xd4>
     89a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <mode>
     89e:	90 34       	cpi	r25, 0x40	; 64
     8a0:	a1 f1       	breq	.+104    	; 0x90a <__vector_15+0xd4>
	if((timer% 512) == 0){ //trigger 1 second increments 
		segment_data[2] = 0xC; // turn on colon
 		seconds++; // increment seconds 
	}//512 final
*/
   		if((timer% 512) == 0){
     8a2:	81 11       	cpse	r24, r1
     8a4:	0c c0       	rjmp	.+24     	; 0x8be <__vector_15+0x88>
			segment_data[2] = 0xC;
     8a6:	8c e0       	ldi	r24, 0x0C	; 12
     8a8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <segment_data+0x2>
 	   		seconds++;
     8ac:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <seconds>
     8b0:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <seconds+0x1>
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <seconds+0x1>
     8ba:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <seconds>
		} // test, FASTER

time_tracker_12(seconds, minutes); //keep track of the time in 12 hr format 
     8be:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <minutes>
     8c2:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <minutes+0x1>
     8c6:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <seconds>
     8ca:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <seconds+0x1>
}
/***************************************************************
/				time_tracker_12
****************************************************************/
void time_tracker_12(int sec, int min){
min = minutes;
     8ce:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <minutes>
     8d2:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <minutes+0x1>
	//if 60 seconds has been reached then increase the minutes by one
	if(sec == 60){
     8d6:	2c 33       	cpi	r18, 0x3C	; 60
     8d8:	31 05       	cpc	r19, r1
     8da:	09 f4       	brne	.+2      	; 0x8de <__vector_15+0xa8>
     8dc:	74 c1       	rjmp	.+744    	; 0xbc6 <__vector_15+0x390>
	//		minutes = 0;//reset minutes
	//		if(hours > 12){ hours = 1;} // reset hours
	//	}
	}

	if(min > 59){
     8de:	cc 97       	sbiw	r24, 0x3c	; 60
     8e0:	6c f0       	brlt	.+26     	; 0x8fc <__vector_15+0xc6>
		hours++;
     8e2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <hours>
     8e6:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <hours+0x1>
     8ea:	01 96       	adiw	r24, 0x01	; 1
     8ec:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <hours+0x1>
     8f0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <hours>
		minutes = 0;
     8f4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <minutes+0x1>
     8f8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <minutes>
	}
	if(hours > 12){hours = 1;}
     8fc:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <hours>
     900:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <hours+0x1>
     904:	0d 97       	sbiw	r24, 0x0d	; 13
     906:	0c f0       	brlt	.+2      	; 0x90a <__vector_15+0xd4>
     908:	e0 c0       	rjmp	.+448    	; 0xaca <__vector_15+0x294>
//time_tracker_24(seconds, minutes); // keep track of the time in 24 hr format
}

//SET ALARM

if((mode == 0x40) ){//if setting the time stop the clock 
     90a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <mode>
     90e:	80 34       	cpi	r24, 0x40	; 64
     910:	09 f4       	brne	.+2      	; 0x914 <__vector_15+0xde>
     912:	e6 c0       	rjmp	.+460    	; 0xae0 <__vector_15+0x2aa>
		alarm_set(); //save temp values
	}	



time_bound_12(); // set bounds for changing the time with the encoders 12 hr
     914:	0e 94 64 01 	call	0x2c8	; 0x2c8 <time_bound_12>
//time_bound_24(); // set bounds for changing the time with encoders 24 hr

PORTB = 0x50;  //enable tristate buffer for pushbutton switches
     918:	80 e5       	ldi	r24, 0x50	; 80
     91a:	88 bb       	out	0x18, r24	; 24
     91c:	8f e8       	ldi	r24, 0x8F	; 143
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	01 97       	sbiw	r24, 0x01	; 1
     922:	f1 f7       	brne	.-4      	; 0x920 <__vector_15+0xea>
     924:	00 c0       	rjmp	.+0      	; 0x926 <__vector_15+0xf0>
     926:	00 00       	nop
//PORTB = 0x70;  //enable tristate buffer for pushbutton switches cruz
_delay_ms(.1);//need a delay to active buffer

increment = 0; // initial increment of the encoders would be 0 when timer is running
     928:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <increment+0x1>
     92c:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <increment>
//*******************************************************************************
int chk_buttons(int button) {
static uint16_t states[8] = {0}; // an array to store the states of all buttons on the button board

// states[0] corresponds to S1 on the board and states[7] corresponds to S8
states[button] = (states[button]<<1 | (! bit_is_clear(PINA, button)) | 0xE000); //first extract the bit that corresponds to the button
     930:	99 b3       	in	r25, 0x19	; 25
     932:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <states.2400+0xe>
     936:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <states.2400+0xf>
     93a:	22 0f       	add	r18, r18
     93c:	33 1f       	adc	r19, r19
     93e:	30 6e       	ori	r19, 0xE0	; 224
     940:	89 2f       	mov	r24, r25
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	88 0f       	add	r24, r24
     946:	89 2f       	mov	r24, r25
     948:	88 1f       	adc	r24, r24
     94a:	99 0b       	sbc	r25, r25
     94c:	82 2b       	or	r24, r18
     94e:	93 2b       	or	r25, r19
     950:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <states.2400+0xf>
     954:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <states.2400+0xe>
//Check if button is pressed
if (states[button] == 0xF000) {return TRUE;} 
     958:	81 15       	cp	r24, r1
     95a:	90 4f       	sbci	r25, 0xF0	; 240
     95c:	31 f4       	brne	.+12     	; 0x96a <__vector_15+0x134>
//ALERT; WHEN TRIGGERING ALARM AND TIME IT IS UNDER THE SAME MODE!!!! IT WILL CAUSE AN ERROR SO FIX THAT
//MAYBE LOOK OVER A NEW VARIABLE AND USE THE COMBINATION(ADDITION) OF THEM TO SET A STATEMENT
//SAME WITH THE SNOOZE

//SETS TIME
if(chk_buttons(7)){mode ^= ( 1 << 3);} //toggle mode and LED to light up on bar graph
     95e:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <mode>
     962:	88 e0       	ldi	r24, 0x08	; 8
     964:	89 27       	eor	r24, r25
     966:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <mode>
//*******************************************************************************
int chk_buttons(int button) {
static uint16_t states[8] = {0}; // an array to store the states of all buttons on the button board

// states[0] corresponds to S1 on the board and states[7] corresponds to S8
states[button] = (states[button]<<1 | (! bit_is_clear(PINA, button)) | 0xE000); //first extract the bit that corresponds to the button
     96a:	29 b3       	in	r18, 0x19	; 25
     96c:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <states.2400>
     970:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <states.2400+0x1>
     974:	88 0f       	add	r24, r24
     976:	99 1f       	adc	r25, r25
     978:	90 6e       	ori	r25, 0xE0	; 224
     97a:	20 fb       	bst	r18, 0
     97c:	ee 24       	eor	r14, r14
     97e:	e0 f8       	bld	r14, 0
     980:	f1 2c       	mov	r15, r1
     982:	8e 29       	or	r24, r14
     984:	9f 29       	or	r25, r15
     986:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <states.2400+0x1>
     98a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <states.2400>
//Check if button is pressed
if (states[button] == 0xF000) {return TRUE;} 
     98e:	81 15       	cp	r24, r1
     990:	90 4f       	sbci	r25, 0xF0	; 240
     992:	31 f4       	brne	.+12     	; 0x9a0 <__vector_15+0x16a>
if(chk_buttons(7)){mode ^= ( 1 << 3);} //toggle mode and LED to light up on bar graph
//_delay_ms(.1);


//SETS ALARM
if(chk_buttons(0)){mode ^= (1 << 6);}// toggle mode and LED to light up on the bar graph
     994:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <mode>
     998:	80 e4       	ldi	r24, 0x40	; 64
     99a:	89 27       	eor	r24, r25
     99c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <mode>
//*******************************************************************************
int chk_buttons(int button) {
static uint16_t states[8] = {0}; // an array to store the states of all buttons on the button board

// states[0] corresponds to S1 on the board and states[7] corresponds to S8
states[button] = (states[button]<<1 | (! bit_is_clear(PINA, button)) | 0xE000); //first extract the bit that corresponds to the button
     9a0:	29 b3       	in	r18, 0x19	; 25
     9a2:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <states.2400+0x6>
     9a6:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <states.2400+0x7>
     9aa:	88 0f       	add	r24, r24
     9ac:	99 1f       	adc	r25, r25
     9ae:	90 6e       	ori	r25, 0xE0	; 224
     9b0:	23 fb       	bst	r18, 3
     9b2:	00 27       	eor	r16, r16
     9b4:	00 f9       	bld	r16, 0
     9b6:	10 e0       	ldi	r17, 0x00	; 0
     9b8:	80 2b       	or	r24, r16
     9ba:	91 2b       	or	r25, r17
     9bc:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <states.2400+0x7>
     9c0:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <states.2400+0x6>
//Check if button is pressed
if (states[button] == 0xF000) {return TRUE;} 
     9c4:	81 15       	cp	r24, r1
     9c6:	90 4f       	sbci	r25, 0xF0	; 240
     9c8:	a1 f4       	brne	.+40     	; 0x9f2 <__vector_15+0x1bc>
//SETS ALARM
if(chk_buttons(0)){mode ^= (1 << 6);}// toggle mode and LED to light up on the bar graph
//_delay_ms(.1);

//SNOOZE ALARM
if( chk_buttons(3) ) { mode ^= ( 1 << 2);
     9ca:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <mode>
     9ce:	84 e0       	ldi	r24, 0x04	; 4
     9d0:	89 27       	eor	r24, r25
     9d2:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <mode>
holder = hr_temp; //save the current hour	
     9d6:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <hr_temp>
     9da:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <hr_temp+0x1>
     9de:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <holder+0x1>
     9e2:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <holder>
	hr_temp = -1; // give it a null value
     9e6:	8f ef       	ldi	r24, 0xFF	; 255
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <hr_temp+0x1>
     9ee:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <hr_temp>
} // toggle mode and LED to light up on bar graph

if(mode == 0x04){
     9f2:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <mode>
     9f6:	84 30       	cpi	r24, 0x04	; 4
     9f8:	09 f4       	brne	.+2      	; 0x9fc <__vector_15+0x1c6>
     9fa:	d1 c0       	rjmp	.+418    	; 0xb9e <__vector_15+0x368>
//*******************************************************************************
int chk_buttons(int button) {
static uint16_t states[8] = {0}; // an array to store the states of all buttons on the button board

// states[0] corresponds to S1 on the board and states[7] corresponds to S8
states[button] = (states[button]<<1 | (! bit_is_clear(PINA, button)) | 0xE000); //first extract the bit that corresponds to the button
     9fc:	29 b3       	in	r18, 0x19	; 25
     9fe:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <states.2400+0x4>
     a02:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <states.2400+0x5>
     a06:	88 0f       	add	r24, r24
     a08:	99 1f       	adc	r25, r25
     a0a:	90 6e       	ori	r25, 0xE0	; 224
     a0c:	22 fb       	bst	r18, 2
     a0e:	22 27       	eor	r18, r18
     a10:	20 f9       	bld	r18, 0
     a12:	c2 2f       	mov	r28, r18
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	d2 2f       	mov	r29, r18
     a18:	8c 2b       	or	r24, r28
     a1a:	9d 2b       	or	r25, r29
     a1c:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <states.2400+0x5>
     a20:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <states.2400+0x4>
//Check if button is pressed
if (states[button] == 0xF000) {return TRUE;} 
     a24:	81 15       	cp	r24, r1
     a26:	90 4f       	sbci	r25, 0xF0	; 240
     a28:	09 f4       	brne	.+2      	; 0xa2c <__vector_15+0x1f6>
     a2a:	a0 c0       	rjmp	.+320    	; 0xb6c <__vector_15+0x336>
	//change the tccr? stop the tone
	DDRE &= ~(1 << PE3);
       //change  tccr? to stop the volume	
}// check to disable the alarm

PORTB = 0x70;//disable tristate
     a2c:	80 e7       	ldi	r24, 0x70	; 112
     a2e:	88 bb       	out	0x18, r24	; 24
//PORTB = 0x50;//disable tristate

if(mode == 0x08){
     a30:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <mode>
     a34:	88 30       	cpi	r24, 0x08	; 8
     a36:	09 f4       	brne	.+2      	; 0xa3a <__vector_15+0x204>
     a38:	92 c0       	rjmp	.+292    	; 0xb5e <__vector_15+0x328>
	increment = 1; // increment by 1 when timer is not running for the encoders
}

if(mode == 0x40){
     a3a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <mode>
     a3e:	80 34       	cpi	r24, 0x40	; 64
     a40:	09 f4       	brne	.+2      	; 0xa44 <__vector_15+0x20e>
     a42:	86 c0       	rjmp	.+268    	; 0xb50 <__vector_15+0x31a>
 *				read_SPI
 ********************************************************************/
void read_SPI(void){

//shift clock register
PORTE &= ~(1 << PE6);//falling edge
     a44:	1e 98       	cbi	0x03, 6	; 3
     a46:	8f e9       	ldi	r24, 0x9F	; 159
     a48:	9f e0       	ldi	r25, 0x0F	; 15
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	f1 f7       	brne	.-4      	; 0xa4a <__vector_15+0x214>
     a4e:	00 c0       	rjmp	.+0      	; 0xa50 <__vector_15+0x21a>
     a50:	00 00       	nop
_delay_ms(1); // buffer for push buttons
PORTE |= (1 << PE6); //rising edge
     a52:	1e 9a       	sbi	0x03, 6	; 3
SPDR = 0x20; //send junk data to read in from SPI
     a54:	80 e2       	ldi	r24, 0x20	; 32
     a56:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){} // read data in
     a58:	77 9b       	sbis	0x0e, 7	; 14
     a5a:	fe cf       	rjmp	.-4      	; 0xa58 <__vector_15+0x222>
raw_encoder_val = SPDR;//save the data
     a5c:	8f b1       	in	r24, 0x0f	; 15
     a5e:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <raw_encoder_val>
if(mode == 0x40){
	increment = 1; //increment by 1 when setting the alarm
}

read_SPI();//read in from the SPI
read = process_EN(); // decrypt the data from the SPI and determine the encoder movement
     a62:	0e 94 43 03 	call	0x686	; 0x686 <process_EN>
     a66:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <read+0x1>
     a6a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <read>
update_EN(read);// increase the count regarding the modes
     a6e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <read>
     a72:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <read+0x1>
     a76:	0e 94 3c 02 	call	0x478	; 0x478 <update_EN>
write_SPI(mode); // write to the bar graph
     a7a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <mode>
/********************************************************************
 *				write_SPI
 ********************************************************************/
void write_SPI(uint8_t value){

SPDR = value; // take in which mode it is currently on and display it 
     a7e:	8f b9       	out	0x0f, r24	; 15
	while (bit_is_clear(SPSR,SPIF)) {} //wait till data is sent out
     a80:	77 9b       	sbis	0x0e, 7	; 14
     a82:	fe cf       	rjmp	.-4      	; 0xa80 <__vector_15+0x24a>
PORTD |= (1 << PD2); //SEND data to bargraph, rising edge
     a84:	92 9a       	sbi	0x12, 2	; 18
PORTD &= ~(1<<PD2); // falling edge
     a86:	92 98       	cbi	0x12, 2	; 18
read = process_EN(); // decrypt the data from the SPI and determine the encoder movement
update_EN(read);// increase the count regarding the modes
write_SPI(mode); // write to the bar graph

//restore the state when leaving the ISR
PORTA = saveA;
     a88:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <saveA>
     a8c:	8b bb       	out	0x1b, r24	; 27
PORTB = saveB;
     a8e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <saveB>
     a92:	88 bb       	out	0x18, r24	; 24

DDRA = 0xFF; //set PORTA to all outputs
     a94:	8f ef       	ldi	r24, 0xFF	; 255
     a96:	8a bb       	out	0x1a, r24	; 26


}//end of ISR Timer0
     a98:	ff 91       	pop	r31
     a9a:	ef 91       	pop	r30
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	bf 91       	pop	r27
     aa2:	af 91       	pop	r26
     aa4:	9f 91       	pop	r25
     aa6:	8f 91       	pop	r24
     aa8:	7f 91       	pop	r23
     aaa:	6f 91       	pop	r22
     aac:	5f 91       	pop	r21
     aae:	4f 91       	pop	r20
     ab0:	3f 91       	pop	r19
     ab2:	2f 91       	pop	r18
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	ff 90       	pop	r15
     aba:	ef 90       	pop	r14
     abc:	0f 90       	pop	r0
     abe:	0b be       	out	0x3b, r0	; 59
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti

	if(min > 59){
		hours++;
		minutes = 0;
	}
	if(hours > 12){hours = 1;}
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <hours+0x1>
     ad2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <hours>
//time_tracker_24(seconds, minutes); // keep track of the time in 24 hr format
}

//SET ALARM

if((mode == 0x40) ){//if setting the time stop the clock 
     ad6:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <mode>
     ada:	80 34       	cpi	r24, 0x40	; 64
     adc:	09 f0       	breq	.+2      	; 0xae0 <__vector_15+0x2aa>
     ade:	1a cf       	rjmp	.-460    	; 0x914 <__vector_15+0xde>
		alarm = TRUE;
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <alarm+0x1>
     ae8:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <alarm>
		dp = TRUE;
     aec:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <dp+0x1>
     af0:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <dp>
 *				read_SPI
 ********************************************************************/
void read_SPI(void){

//shift clock register
PORTE &= ~(1 << PE6);//falling edge
     af4:	1e 98       	cbi	0x03, 6	; 3
     af6:	8f e9       	ldi	r24, 0x9F	; 159
     af8:	9f e0       	ldi	r25, 0x0F	; 15
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <__vector_15+0x2c4>
     afe:	00 c0       	rjmp	.+0      	; 0xb00 <__vector_15+0x2ca>
     b00:	00 00       	nop
_delay_ms(1); // buffer for push buttons
PORTE |= (1 << PE6); //rising edge
     b02:	1e 9a       	sbi	0x03, 6	; 3
SPDR = 0x20; //send junk data to read in from SPI
     b04:	80 e2       	ldi	r24, 0x20	; 32
     b06:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){} // read data in
     b08:	77 9b       	sbis	0x0e, 7	; 14
     b0a:	fe cf       	rjmp	.-4      	; 0xb08 <__vector_15+0x2d2>
raw_encoder_val = SPDR;//save the data
     b0c:	8f b1       	in	r24, 0x0f	; 15
     b0e:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <raw_encoder_val>
if((mode == 0x40) ){//if setting the time stop the clock 
		alarm = TRUE;
		dp = TRUE;
	
		read_SPI();//read in from the SPI
		read = process_EN(); // decrypt the data from the SPI and determine the encoder movement
     b12:	0e 94 43 03 	call	0x686	; 0x686 <process_EN>
     b16:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <read+0x1>
     b1a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <read>
		update_EN_alarm(read);// increase the count regarding the modes
     b1e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <read>
     b22:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <read+0x1>
     b26:	0e 94 f5 01 	call	0x3ea	; 0x3ea <update_EN_alarm>

//you can set an if statement to change the bounds whether setting == true or false
		alarm_bound_12(); //bound the time for 12hr mark
     b2a:	0e 94 04 01 	call	0x208	; 0x208 <alarm_bound_12>
/********************************************************************
 *				alarm_set
 *******************************************************************/
void alarm_set(void){
//save the alarm time that the user chooses
hr_temp = al_hr12;
     b2e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <al_hr12>
     b32:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <al_hr12+0x1>
     b36:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <hr_temp+0x1>
     b3a:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <hr_temp>
min_temp = al_min12;
     b3e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <al_min12>
     b42:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <al_min12+0x1>
     b46:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <min_temp+0x1>
     b4a:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <min_temp>
     b4e:	e2 ce       	rjmp	.-572    	; 0x914 <__vector_15+0xde>
if(mode == 0x08){
	increment = 1; // increment by 1 when timer is not running for the encoders
}

if(mode == 0x40){
	increment = 1; //increment by 1 when setting the alarm
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <increment+0x1>
     b58:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <increment>
     b5c:	73 cf       	rjmp	.-282    	; 0xa44 <__vector_15+0x20e>

PORTB = 0x70;//disable tristate
//PORTB = 0x50;//disable tristate

if(mode == 0x08){
	increment = 1; // increment by 1 when timer is not running for the encoders
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <increment+0x1>
     b66:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <increment>
     b6a:	67 cf       	rjmp	.-306    	; 0xa3a <__vector_15+0x204>
	if( (seconds % 10) == 0){hr_temp = holder;} //after 10 seconds has passed then trigger alarm
}


//DISABLE ALARM
if( (chk_buttons(2) == TRUE) ){setting ^= (1 << 5); // turn off the alarm permanently and dont display on bar graph.
     b6c:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <setting>
     b70:	80 e2       	ldi	r24, 0x20	; 32
     b72:	89 27       	eor	r24, r25
     b74:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <setting>
	alarm = FALSE;	
     b78:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <alarm+0x1>
     b7c:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <alarm>
	dp = FALSE;	
     b80:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <dp+0x1>
     b84:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <dp>
	clear_display();
     b88:	0e 94 98 08 	call	0x1130	; 0x1130 <clear_display>
	hr_temp = -1;
     b8c:	8f ef       	ldi	r24, 0xFF	; 255
     b8e:	9f ef       	ldi	r25, 0xFF	; 255
     b90:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <hr_temp+0x1>
     b94:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <hr_temp>
	PORTC &= ~(1 << PC0);
     b98:	a8 98       	cbi	0x15, 0	; 21
	//change the tccr? stop the tone
	DDRE &= ~(1 << PE3);
     b9a:	13 98       	cbi	0x02, 3	; 2
     b9c:	47 cf       	rjmp	.-370    	; 0xa2c <__vector_15+0x1f6>
holder = hr_temp; //save the current hour	
	hr_temp = -1; // give it a null value
} // toggle mode and LED to light up on bar graph

if(mode == 0x04){
	if( (seconds % 10) == 0){hr_temp = holder;} //after 10 seconds has passed then trigger alarm
     b9e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <seconds>
     ba2:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <seconds+0x1>
     ba6:	6a e0       	ldi	r22, 0x0A	; 10
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	0e 94 3f 0c 	call	0x187e	; 0x187e <__divmodhi4>
     bae:	89 2b       	or	r24, r25
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <__vector_15+0x37e>
     bb2:	24 cf       	rjmp	.-440    	; 0x9fc <__vector_15+0x1c6>
     bb4:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <holder>
     bb8:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <holder+0x1>
     bbc:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <hr_temp+0x1>
     bc0:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <hr_temp>
     bc4:	1b cf       	rjmp	.-458    	; 0x9fc <__vector_15+0x1c6>
****************************************************************/
void time_tracker_12(int sec, int min){
min = minutes;
	//if 60 seconds has been reached then increase the minutes by one
	if(sec == 60){
		minutes++; // increment minutes 
     bc6:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <minutes>
     bca:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <minutes+0x1>
     bce:	2f 5f       	subi	r18, 0xFF	; 255
     bd0:	3f 4f       	sbci	r19, 0xFF	; 255
     bd2:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <minutes+0x1>
     bd6:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <minutes>
	//	min = minutes; 
		seconds = 0; // reset seconds
     bda:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <seconds+0x1>
     bde:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <seconds>
	//		minutes = 0;//reset minutes
	//		if(hours > 12){ hours = 1;} // reset hours
	//	}
	}

	if(min > 59){
     be2:	cc 97       	sbiw	r24, 0x3c	; 60
     be4:	0c f4       	brge	.+2      	; 0xbe8 <__vector_15+0x3b2>
     be6:	8a ce       	rjmp	.-748    	; 0x8fc <__vector_15+0xc6>
     be8:	7c ce       	rjmp	.-776    	; 0x8e2 <__vector_15+0xac>

00000bea <segsum>:
//                                   segment_sum                                    
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
//**********************************************************************************
void segsum(uint16_t sum) {
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	ac 01       	movw	r20, r24
//initialzing the local variables of the function
int digit_index = 0;
int temp = 0;
int i;

if(sum == 0){segment_data[digit_index] = dec_to_7seg[0];};
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	b9 f4       	brne	.+46     	; 0xc22 <segsum+0x38>
     bf4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     bf8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <segment_data>
                if(digit_index == 2){digit_index++;};
                segment_data[digit_index] = dec_to_7seg[temp]; //use the digit to store the hexidecimal value to seg array
                sum = sum/10; // continue to the next digit
                digit_index++; // increase the digit index
        }
        segment_data[2] = dec_to_7seg[11]; //replace the colon with a blank colon
     bfc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
     c00:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <segment_data+0x2>
     c04:	e0 e0       	ldi	r30, 0x00	; 0
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__DATA_REGION_ORIGIN__+0xa>
     c0c:	a3 e1       	ldi	r26, 0x13	; 19
     c0e:	b1 e0       	ldi	r27, 0x01	; 1
     c10:	e2 5f       	subi	r30, 0xF2	; 242
     c12:	fe 4f       	sbci	r31, 0xFE	; 254

//need to turn off the rest of the digits
        for(i = 5; i > digit_index; i--){
                segment_data[i] = dec_to_7seg[10];
     c14:	8e 93       	st	-X, r24
                digit_index++; // increase the digit index
        }
        segment_data[2] = dec_to_7seg[11]; //replace the colon with a blank colon

//need to turn off the rest of the digits
        for(i = 5; i > digit_index; i--){
     c16:	ae 17       	cp	r26, r30
     c18:	bf 07       	cpc	r27, r31
     c1a:	e1 f7       	brne	.-8      	; 0xc14 <segsum+0x2a>
                segment_data[i] = dec_to_7seg[10];
        }

}
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	08 95       	ret
int i;

if(sum == 0){segment_data[digit_index] = dec_to_7seg[0];};

        while(sum > 0){
                temp = sum % 10; // isolate to a single digit
     c22:	9c 01       	movw	r18, r24
     c24:	ad ec       	ldi	r26, 0xCD	; 205
     c26:	bc ec       	ldi	r27, 0xCC	; 204
     c28:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__umulhisi3>
     c2c:	96 95       	lsr	r25
     c2e:	87 95       	ror	r24
     c30:	96 95       	lsr	r25
     c32:	87 95       	ror	r24
     c34:	96 95       	lsr	r25
     c36:	87 95       	ror	r24
     c38:	9c 01       	movw	r18, r24
     c3a:	22 0f       	add	r18, r18
     c3c:	33 1f       	adc	r19, r19
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	88 0f       	add	r24, r24
     c48:	99 1f       	adc	r25, r25
     c4a:	82 0f       	add	r24, r18
     c4c:	93 1f       	adc	r25, r19
     c4e:	9a 01       	movw	r18, r20
     c50:	28 1b       	sub	r18, r24
     c52:	39 0b       	sbc	r19, r25
     c54:	c9 01       	movw	r24, r18
     c56:	e0 e0       	ldi	r30, 0x00	; 0
     c58:	f0 e0       	ldi	r31, 0x00	; 0
                if(digit_index == 2){digit_index++;};
                segment_data[digit_index] = dec_to_7seg[temp]; //use the digit to store the hexidecimal value to seg array
     c5a:	df 01       	movw	r26, r30
     c5c:	a3 5f       	subi	r26, 0xF3	; 243
     c5e:	be 4f       	sbci	r27, 0xFE	; 254
     c60:	ec 01       	movw	r28, r24
     c62:	c0 50       	subi	r28, 0x00	; 0
     c64:	df 4f       	sbci	r29, 0xFF	; 255
     c66:	88 81       	ld	r24, Y
     c68:	8c 93       	st	X, r24
                sum = sum/10; // continue to the next digit
     c6a:	9a 01       	movw	r18, r20
     c6c:	ad ec       	ldi	r26, 0xCD	; 205
     c6e:	bc ec       	ldi	r27, 0xCC	; 204
     c70:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__umulhisi3>
     c74:	ac 01       	movw	r20, r24
     c76:	56 95       	lsr	r21
     c78:	47 95       	ror	r20
     c7a:	56 95       	lsr	r21
     c7c:	47 95       	ror	r20
     c7e:	56 95       	lsr	r21
     c80:	47 95       	ror	r20
                digit_index++; // increase the digit index
     c82:	31 96       	adiw	r30, 0x01	; 1
int temp = 0;
int i;

if(sum == 0){segment_data[digit_index] = dec_to_7seg[0];};

        while(sum > 0){
     c84:	41 15       	cp	r20, r1
     c86:	51 05       	cpc	r21, r1
     c88:	01 f1       	breq	.+64     	; 0xcca <segsum+0xe0>
                temp = sum % 10; // isolate to a single digit
     c8a:	9a 01       	movw	r18, r20
     c8c:	ad ec       	ldi	r26, 0xCD	; 205
     c8e:	bc ec       	ldi	r27, 0xCC	; 204
     c90:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__umulhisi3>
     c94:	96 95       	lsr	r25
     c96:	87 95       	ror	r24
     c98:	96 95       	lsr	r25
     c9a:	87 95       	ror	r24
     c9c:	96 95       	lsr	r25
     c9e:	87 95       	ror	r24
     ca0:	9c 01       	movw	r18, r24
     ca2:	22 0f       	add	r18, r18
     ca4:	33 1f       	adc	r19, r19
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	82 0f       	add	r24, r18
     cb4:	93 1f       	adc	r25, r19
     cb6:	9a 01       	movw	r18, r20
     cb8:	28 1b       	sub	r18, r24
     cba:	39 0b       	sbc	r19, r25
     cbc:	c9 01       	movw	r24, r18
                if(digit_index == 2){digit_index++;};
     cbe:	e2 30       	cpi	r30, 0x02	; 2
     cc0:	f1 05       	cpc	r31, r1
     cc2:	59 f6       	brne	.-106    	; 0xc5a <segsum+0x70>
     cc4:	e3 e0       	ldi	r30, 0x03	; 3
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	c8 cf       	rjmp	.-112    	; 0xc5a <segsum+0x70>
                segment_data[digit_index] = dec_to_7seg[temp]; //use the digit to store the hexidecimal value to seg array
                sum = sum/10; // continue to the next digit
                digit_index++; // increase the digit index
        }
        segment_data[2] = dec_to_7seg[11]; //replace the colon with a blank colon
     cca:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__DATA_REGION_ORIGIN__+0xb>
     cce:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <segment_data+0x2>

//need to turn off the rest of the digits
        for(i = 5; i > digit_index; i--){
     cd2:	e5 30       	cpi	r30, 0x05	; 5
     cd4:	f1 05       	cpc	r31, r1
     cd6:	0c f4       	brge	.+2      	; 0xcda <segsum+0xf0>
     cd8:	97 cf       	rjmp	.-210    	; 0xc08 <segsum+0x1e>
                segment_data[i] = dec_to_7seg[10];
        }

}
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	08 95       	ret

00000ce0 <spi_init>:

/**********************************************************************
 *				spi_init
 **********************************************************************/
void spi_init(void){
DDRB |= ( (1 << PB2) | ( 1<< PB1) | (1<<PB0) ); //mosi and serial clock
     ce0:	87 b3       	in	r24, 0x17	; 23
     ce2:	87 60       	ori	r24, 0x07	; 7
     ce4:	87 bb       	out	0x17, r24	; 23
SPCR |= ( (1 << MSTR) | (1 << SPE) ); //master mode, SPI enabled, clk low on idle, leading edge sample
     ce6:	8d b1       	in	r24, 0x0d	; 13
     ce8:	80 65       	ori	r24, 0x50	; 80
     cea:	8d b9       	out	0x0d, r24	; 13

//SPSR |= 1 << SPI2X; // sclk is twice as fast so 8Mhz f/2 
DDRB |= 0xF0; // set PORTB 4-7 bits as outputs
     cec:	87 b3       	in	r24, 0x17	; 23
     cee:	80 6f       	ori	r24, 0xF0	; 240
     cf0:	87 bb       	out	0x17, r24	; 23
DDRA = 0x03; // set PORTA 6-7 bits as inputs
     cf2:	83 e0       	ldi	r24, 0x03	; 3
     cf4:	8a bb       	out	0x1a, r24	; 26
DDRD = (1 << PD2); // set PD2 as output
     cf6:	84 e0       	ldi	r24, 0x04	; 4
     cf8:	81 bb       	out	0x11, r24	; 17
DDRE = 0xFF;// set PORTE to all outputs
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
     cfc:	82 b9       	out	0x02, r24	; 2
     cfe:	08 95       	ret

00000d00 <volume_init>:
/**********************************************************************
 *				volume_init
 **********************************************************************/
void volume_init(void){
//DDRE = 0xFF; //Set PORTE as outputs
TCCR3A = (1 << COM3A1 | (1 << WGM31) ); //normal operation w/ OC3A is disconnected
     d00:	82 e8       	ldi	r24, 0x82	; 130
     d02:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
TCCR3B |= (  (1 << CS30) | ( 1 << WGM32) | (1 << WGM33) ); //fast pwm 
     d06:	ea e8       	ldi	r30, 0x8A	; 138
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	89 61       	ori	r24, 0x19	; 25
     d0e:	80 83       	st	Z, r24
ICR3 = 10; // Set overflow top 
     d10:	8a e0       	ldi	r24, 0x0A	; 10
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     d18:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
OCR3A = 5; // set compare match
     d1c:	85 e0       	ldi	r24, 0x05	; 5
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     d24:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     d28:	08 95       	ret

00000d2a <tone_init>:

/**********************************************************************
 *				tone_init
 **********************************************************************/
void tone_init(void){
DDRC = 0xFF; // set all of PORTC as outputs
     d2a:	8f ef       	ldi	r24, 0xFF	; 255
     d2c:	84 bb       	out	0x14, r24	; 20
TCCR1A = 0x00; // normal operation w/ OC1A is disconnected
     d2e:	1f bc       	out	0x2f, r1	; 47
TIMSK |= 1 << OCIE1A; //output compare enable for timercounter1A
     d30:	87 b7       	in	r24, 0x37	; 55
     d32:	80 61       	ori	r24, 0x10	; 16
     d34:	87 bf       	out	0x37, r24	; 55
OCR1A = 3999; // 4kHz and triggers ISR
     d36:	8f e9       	ldi	r24, 0x9F	; 159
     d38:	9f e0       	ldi	r25, 0x0F	; 15
     d3a:	9b bd       	out	0x2b, r25	; 43
     d3c:	8a bd       	out	0x2a, r24	; 42
TCCR1B |= (1<<WGM12 | 1<<CS10); // CTC mode, clear with OCR and no prescaling
     d3e:	8e b5       	in	r24, 0x2e	; 46
     d40:	89 60       	ori	r24, 0x09	; 9
     d42:	8e bd       	out	0x2e, r24	; 46
     d44:	08 95       	ret

00000d46 <clock_init>:

/**********************************************************************
 *				clock_init
 **********************************************************************/
void clock_init(void){
ASSR   |=  1<<AS0; //ext osc TOSC in 32kHz 
     d46:	80 b7       	in	r24, 0x30	; 48
     d48:	88 60       	ori	r24, 0x08	; 8
     d4a:	80 bf       	out	0x30, r24	; 48
TIMSK |= 1 << OCIE0; //interrupt flag on compare register 0
     d4c:	87 b7       	in	r24, 0x37	; 55
     d4e:	82 60       	ori	r24, 0x02	; 2
     d50:	87 bf       	out	0x37, r24	; 55
TCCR0 |= ((1 << WGM01) | (1 << CS00)); //CTC mode, with clk/no pre-scaling
     d52:	83 b7       	in	r24, 0x33	; 51
     d54:	89 60       	ori	r24, 0x09	; 9
     d56:	83 bf       	out	0x33, r24	; 51
OCR0 = 127; // Set top 
     d58:	8f e7       	ldi	r24, 0x7F	; 127
     d5a:	81 bf       	out	0x31, r24	; 49
     d5c:	08 95       	ret

00000d5e <dimming_init>:

/**********************************************************************
 *				dimming_init
 **********************************************************************/
void dimming_init(void){
TCCR2 |= (1 << WGM21) | ( 1 << WGM20) | (1 << COM21) | ( 1 << CS20); // no prescale, clear on OC2 match, fast pwm mode
     d5e:	85 b5       	in	r24, 0x25	; 37
     d60:	89 66       	ori	r24, 0x69	; 105
     d62:	85 bd       	out	0x25, r24	; 37
TIMSK |= (1 << OCIE2); // Compare match interrupt enable timer/counter0
     d64:	87 b7       	in	r24, 0x37	; 55
     d66:	80 68       	ori	r24, 0x80	; 128
     d68:	87 bf       	out	0x37, r24	; 55
TCNT2 = 0; //set count at 0
     d6a:	14 bc       	out	0x24, r1	; 36
     d6c:	08 95       	ret

00000d6e <ADC_init>:

/**********************************************************************
 *				ADC_init
 **********************************************************************/
void ADC_init(void){
DDRF  &= ~(_BV(DDF7)); //make port F bit 7 the ADC input  
     d6e:	e1 e6       	ldi	r30, 0x61	; 97
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	8f 77       	andi	r24, 0x7F	; 127
     d76:	80 83       	st	Z, r24
PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
     d78:	e2 e6       	ldi	r30, 0x62	; 98
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	8f 77       	andi	r24, 0x7F	; 127
     d80:	80 83       	st	Z, r24
	
ADMUX = (1 << REFS0) | (1 << ADLAR) | 0x07; // reference to AVCC(5v), left adjusted (only reading  8bit), and channel 7
     d82:	87 e6       	ldi	r24, 0x67	; 103
     d84:	87 b9       	out	0x07, r24	; 7
//ADC enabled, single conversion, division factor is 128
ADCSRA = (1 << ADEN) | (1 << ADPS2) | ( 1 << ADPS1) | ( 1 << ADPS0) ; 
     d86:	87 e8       	ldi	r24, 0x87	; 135
     d88:	86 b9       	out	0x06, r24	; 6
     d8a:	08 95       	ret

00000d8c <send_lcd>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d8c:	91 e0       	ldi	r25, 0x01	; 1
     d8e:	81 11       	cpse	r24, r1
     d90:	01 c0       	rjmp	.+2      	; 0xd94 <send_lcd+0x8>
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d96:	77 9b       	sbis	0x0e, 7	; 14
     d98:	fe cf       	rjmp	.-4      	; 0xd96 <send_lcd+0xa>
  SPDR = byte;                        //send payload
     d9a:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d9c:	77 9b       	sbis	0x0e, 7	; 14
     d9e:	fe cf       	rjmp	.-4      	; 0xd9c <send_lcd+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     da0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     da4:	88 60       	ori	r24, 0x08	; 8
     da6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     daa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dae:	87 7f       	andi	r24, 0xF7	; 247
     db0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     db4:	8f e9       	ldi	r24, 0x9F	; 159
     db6:	9f e0       	ldi	r25, 0x0F	; 15
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <send_lcd+0x2c>
     dbc:	00 c0       	rjmp	.+0      	; 0xdbe <send_lcd+0x32>
     dbe:	00 00       	nop
     dc0:	08 95       	ret

00000dc2 <refresh_lcd>:

void refresh_lcd(char lcd_string_array[]) {

    static uint8_t index=0;           // index into string array 

    SPDR = 0x01; //set SR for data
     dc2:	21 e0       	ldi	r18, 0x01	; 1
     dc4:	2f b9       	out	0x0f, r18	; 15
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
     dc6:	77 9b       	sbis	0x0e, 7	; 14
     dc8:	fe cf       	rjmp	.-4      	; 0xdc6 <refresh_lcd+0x4>
    SPDR = lcd_string_array[index];
     dca:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <index.2091>
     dce:	fc 01       	movw	r30, r24
     dd0:	e2 0f       	add	r30, r18
     dd2:	f1 1d       	adc	r31, r1
     dd4:	80 81       	ld	r24, Z
     dd6:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
     dd8:	77 9b       	sbis	0x0e, 7	; 14
     dda:	fe cf       	rjmp	.-4      	; 0xdd8 <refresh_lcd+0x16>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ddc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     de0:	88 60       	ori	r24, 0x08	; 8
     de2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     de6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dea:	87 7f       	andi	r24, 0xF7	; 247
     dec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    SPDR = 0x01; //set SR for data
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    SPDR = lcd_string_array[index];
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    strobe_lcd();                   //write into LCD
    index++;                        //increment to next character
     df0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <index.2091>
     df4:	8f 5f       	subi	r24, 0xFF	; 255
     df6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <index.2091>
    if(index == 16) {_delay_us(40); home_line2();}           //on to 2nd line, 1st position 
     dfa:	80 31       	cpi	r24, 0x10	; 16
     dfc:	09 f1       	breq	.+66     	; 0xe40 <refresh_lcd+0x7e>
    if(index == 32) {_delay_us(40); cursor_home(); index=0;} //back to 1st line, 1st position
     dfe:	80 32       	cpi	r24, 0x20	; 32
     e00:	09 f0       	breq	.+2      	; 0xe04 <refresh_lcd+0x42>
     e02:	08 95       	ret
     e04:	95 ed       	ldi	r25, 0xD5	; 213
     e06:	9a 95       	dec	r25
     e08:	f1 f7       	brne	.-4      	; 0xe06 <refresh_lcd+0x44>
     e0a:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e0c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e0e:	77 9b       	sbis	0x0e, 7	; 14
     e10:	fe cf       	rjmp	.-4      	; 0xe0e <refresh_lcd+0x4c>
  SPDR = byte;                        //send payload
     e12:	82 e0       	ldi	r24, 0x02	; 2
     e14:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e16:	77 9b       	sbis	0x0e, 7	; 14
     e18:	fe cf       	rjmp	.-4      	; 0xe16 <refresh_lcd+0x54>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e1a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e1e:	88 60       	ori	r24, 0x08	; 8
     e20:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e24:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e28:	87 7f       	andi	r24, 0xF7	; 247
     e2a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e2e:	8f e9       	ldi	r24, 0x9F	; 159
     e30:	9f e0       	ldi	r25, 0x0F	; 15
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <refresh_lcd+0x70>
     e36:	00 c0       	rjmp	.+0      	; 0xe38 <refresh_lcd+0x76>
     e38:	00 00       	nop
    SPDR = lcd_string_array[index];
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    strobe_lcd();                   //write into LCD
    index++;                        //increment to next character
    if(index == 16) {_delay_us(40); home_line2();}           //on to 2nd line, 1st position 
    if(index == 32) {_delay_us(40); cursor_home(); index=0;} //back to 1st line, 1st position
     e3a:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <index.2091>
     e3e:	08 95       	ret
     e40:	85 ed       	ldi	r24, 0xD5	; 213
     e42:	8a 95       	dec	r24
     e44:	f1 f7       	brne	.-4      	; 0xe42 <refresh_lcd+0x80>
     e46:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e48:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e4a:	77 9b       	sbis	0x0e, 7	; 14
     e4c:	fe cf       	rjmp	.-4      	; 0xe4a <refresh_lcd+0x88>
  SPDR = byte;                        //send payload
     e4e:	80 ec       	ldi	r24, 0xC0	; 192
     e50:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e52:	77 9b       	sbis	0x0e, 7	; 14
     e54:	fe cf       	rjmp	.-4      	; 0xe52 <refresh_lcd+0x90>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e56:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e5a:	88 60       	ori	r24, 0x08	; 8
     e5c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e60:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e64:	87 7f       	andi	r24, 0xF7	; 247
     e66:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e6a:	8f e9       	ldi	r24, 0x9F	; 159
     e6c:	9f e0       	ldi	r25, 0x0F	; 15
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	f1 f7       	brne	.-4      	; 0xe6e <refresh_lcd+0xac>
     e72:	00 c0       	rjmp	.+0      	; 0xe74 <refresh_lcd+0xb2>
     e74:	00 00       	nop
     e76:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <index.2091>
     e7a:	c1 cf       	rjmp	.-126    	; 0xdfe <refresh_lcd+0x3c>

00000e7c <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
     e7c:	66 0f       	add	r22, r22
     e7e:	66 0f       	add	r22, r22
     e80:	66 0f       	add	r22, r22
     e82:	60 5c       	subi	r22, 0xC0	; 192
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e84:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e86:	77 9b       	sbis	0x0e, 7	; 14
     e88:	fe cf       	rjmp	.-4      	; 0xe86 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
     e8a:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e8c:	77 9b       	sbis	0x0e, 7	; 14
     e8e:	fe cf       	rjmp	.-4      	; 0xe8c <set_custom_character+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e90:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e94:	28 60       	ori	r18, 0x08	; 8
     e96:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e9a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e9e:	27 7f       	andi	r18, 0xF7	; 247
     ea0:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ea4:	af e9       	ldi	r26, 0x9F	; 159
     ea6:	bf e0       	ldi	r27, 0x0F	; 15
     ea8:	11 97       	sbiw	r26, 0x01	; 1
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <set_custom_character+0x2c>
     eac:	00 c0       	rjmp	.+0      	; 0xeae <set_custom_character+0x32>
     eae:	00 00       	nop
     eb0:	fc 01       	movw	r30, r24
     eb2:	9c 01       	movw	r18, r24
     eb4:	28 5f       	subi	r18, 0xF8	; 248
     eb6:	3f 4f       	sbci	r19, 0xFF	; 255
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     eb8:	91 e0       	ldi	r25, 0x01	; 1
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
    for(i=0; i<8; i++){send_lcd(CHAR_BYTE, data[i], 100);}
     eba:	81 91       	ld	r24, Z+
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ebc:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ebe:	77 9b       	sbis	0x0e, 7	; 14
     ec0:	fe cf       	rjmp	.-4      	; 0xebe <set_custom_character+0x42>
  SPDR = byte;                        //send payload
     ec2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ec4:	77 9b       	sbis	0x0e, 7	; 14
     ec6:	fe cf       	rjmp	.-4      	; 0xec4 <set_custom_character+0x48>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ec8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ecc:	88 60       	ori	r24, 0x08	; 8
     ece:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ed2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ed6:	87 7f       	andi	r24, 0xF7	; 247
     ed8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     edc:	af e9       	ldi	r26, 0x9F	; 159
     ede:	bf e0       	ldi	r27, 0x0F	; 15
     ee0:	11 97       	sbiw	r26, 0x01	; 1
     ee2:	f1 f7       	brne	.-4      	; 0xee0 <set_custom_character+0x64>
     ee4:	00 c0       	rjmp	.+0      	; 0xee6 <set_custom_character+0x6a>
     ee6:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
    for(i=0; i<8; i++){send_lcd(CHAR_BYTE, data[i], 100);}
     ee8:	e2 17       	cp	r30, r18
     eea:	f3 07       	cpc	r31, r19
     eec:	31 f7       	brne	.-52     	; 0xeba <set_custom_character+0x3e>
}
     eee:	08 95       	ret

00000ef0 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40), 1000);
     ef0:	90 e4       	ldi	r25, 0x40	; 64
     ef2:	89 9f       	mul	r24, r25
     ef4:	60 0d       	add	r22, r0
     ef6:	11 24       	eor	r1, r1
     ef8:	60 5c       	subi	r22, 0xC0	; 192
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     efa:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     efc:	77 9b       	sbis	0x0e, 7	; 14
     efe:	fe cf       	rjmp	.-4      	; 0xefc <set_cursor+0xc>
  SPDR = byte;                        //send payload
     f00:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f02:	77 9b       	sbis	0x0e, 7	; 14
     f04:	fe cf       	rjmp	.-4      	; 0xf02 <set_cursor+0x12>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f06:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f0a:	88 60       	ori	r24, 0x08	; 8
     f0c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f10:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f14:	87 7f       	andi	r24, 0xF7	; 247
     f16:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f1a:	8f e9       	ldi	r24, 0x9F	; 159
     f1c:	9f e0       	ldi	r25, 0x0F	; 15
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	f1 f7       	brne	.-4      	; 0xf1e <set_cursor+0x2e>
     f22:	00 c0       	rjmp	.+0      	; 0xf24 <set_cursor+0x34>
     f24:	00 00       	nop
     f26:	08 95       	ret

00000f28 <uint2lcd>:
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
     f28:	81 11       	cpse	r24, r1
     f2a:	19 c0       	rjmp	.+50     	; 0xf5e <uint2lcd+0x36>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f30:	77 9b       	sbis	0x0e, 7	; 14
     f32:	fe cf       	rjmp	.-4      	; 0xf30 <uint2lcd+0x8>
  SPDR = byte;                        //send payload
     f34:	80 e3       	ldi	r24, 0x30	; 48
     f36:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f38:	77 9b       	sbis	0x0e, 7	; 14
     f3a:	fe cf       	rjmp	.-4      	; 0xf38 <uint2lcd+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f3c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f40:	88 60       	ori	r24, 0x08	; 8
     f42:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f46:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f4a:	87 7f       	andi	r24, 0xF7	; 247
     f4c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f50:	8f e9       	ldi	r24, 0x9F	; 159
     f52:	9f e0       	ldi	r25, 0x0F	; 15
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <uint2lcd+0x2c>
     f58:	00 c0       	rjmp	.+0      	; 0xf5a <uint2lcd+0x32>
     f5a:	00 00       	nop
     f5c:	08 95       	ret
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
     f5e:	84 36       	cpi	r24, 0x64	; 100
     f60:	b0 f4       	brcc	.+44     	; 0xf8e <uint2lcd+0x66>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
     f62:	8a 30       	cpi	r24, 0x0A	; 10
     f64:	90 f5       	brcc	.+100    	; 0xfca <uint2lcd+0xa2>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f66:	91 e0       	ldi	r25, 0x01	; 1
     f68:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f6a:	77 9b       	sbis	0x0e, 7	; 14
     f6c:	fe cf       	rjmp	.-4      	; 0xf6a <uint2lcd+0x42>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    , 100); }
     f6e:	9d ec       	ldi	r25, 0xCD	; 205
     f70:	89 9f       	mul	r24, r25
     f72:	91 2d       	mov	r25, r1
     f74:	11 24       	eor	r1, r1
     f76:	96 95       	lsr	r25
     f78:	96 95       	lsr	r25
     f7a:	96 95       	lsr	r25
     f7c:	fa e0       	ldi	r31, 0x0A	; 10
     f7e:	9f 9f       	mul	r25, r31
     f80:	80 19       	sub	r24, r0
     f82:	11 24       	eor	r1, r1
     f84:	80 5d       	subi	r24, 0xD0	; 208


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     f86:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f88:	77 9b       	sbis	0x0e, 7	; 14
     f8a:	fe cf       	rjmp	.-4      	; 0xf88 <uint2lcd+0x60>
     f8c:	d7 cf       	rjmp	.-82     	; 0xf3c <uint2lcd+0x14>
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
     f8e:	99 e2       	ldi	r25, 0x29	; 41
     f90:	89 9f       	mul	r24, r25
     f92:	91 2d       	mov	r25, r1
     f94:	11 24       	eor	r1, r1
     f96:	92 95       	swap	r25
     f98:	9f 70       	andi	r25, 0x0F	; 15
     f9a:	90 5d       	subi	r25, 0xD0	; 208
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f9c:	21 e0       	ldi	r18, 0x01	; 1
     f9e:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     fa0:	77 9b       	sbis	0x0e, 7	; 14
     fa2:	fe cf       	rjmp	.-4      	; 0xfa0 <uint2lcd+0x78>
  SPDR = byte;                        //send payload
     fa4:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     fa6:	77 9b       	sbis	0x0e, 7	; 14
     fa8:	fe cf       	rjmp	.-4      	; 0xfa6 <uint2lcd+0x7e>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     faa:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fae:	98 60       	ori	r25, 0x08	; 8
     fb0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fb4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fb8:	97 7f       	andi	r25, 0xF7	; 247
     fba:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fbe:	ef e9       	ldi	r30, 0x9F	; 159
     fc0:	ff e0       	ldi	r31, 0x0F	; 15
     fc2:	31 97       	sbiw	r30, 0x01	; 1
     fc4:	f1 f7       	brne	.-4      	; 0xfc2 <uint2lcd+0x9a>
     fc6:	00 c0       	rjmp	.+0      	; 0xfc8 <uint2lcd+0xa0>
     fc8:	00 00       	nop
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
     fca:	99 e2       	ldi	r25, 0x29	; 41
     fcc:	89 9f       	mul	r24, r25
     fce:	91 2d       	mov	r25, r1
     fd0:	11 24       	eor	r1, r1
     fd2:	92 95       	swap	r25
     fd4:	9f 70       	andi	r25, 0x0F	; 15
     fd6:	28 2f       	mov	r18, r24
     fd8:	f4 e6       	ldi	r31, 0x64	; 100
     fda:	9f 9f       	mul	r25, r31
     fdc:	20 19       	sub	r18, r0
     fde:	11 24       	eor	r1, r1
     fe0:	92 2f       	mov	r25, r18
     fe2:	2d ec       	ldi	r18, 0xCD	; 205
     fe4:	92 9f       	mul	r25, r18
     fe6:	91 2d       	mov	r25, r1
     fe8:	11 24       	eor	r1, r1
     fea:	96 95       	lsr	r25
     fec:	96 95       	lsr	r25
     fee:	96 95       	lsr	r25
     ff0:	90 5d       	subi	r25, 0xD0	; 208
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ff2:	21 e0       	ldi	r18, 0x01	; 1
     ff4:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ff6:	77 9b       	sbis	0x0e, 7	; 14
     ff8:	fe cf       	rjmp	.-4      	; 0xff6 <uint2lcd+0xce>
  SPDR = byte;                        //send payload
     ffa:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ffc:	77 9b       	sbis	0x0e, 7	; 14
     ffe:	fe cf       	rjmp	.-4      	; 0xffc <uint2lcd+0xd4>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1000:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1004:	98 60       	ori	r25, 0x08	; 8
    1006:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    100a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    100e:	97 7f       	andi	r25, 0xF7	; 247
    1010:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1014:	ef e9       	ldi	r30, 0x9F	; 159
    1016:	ff e0       	ldi	r31, 0x0F	; 15
    1018:	31 97       	sbiw	r30, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <uint2lcd+0xf0>
    101c:	00 c0       	rjmp	.+0      	; 0x101e <uint2lcd+0xf6>
    101e:	00 00       	nop
    1020:	a2 cf       	rjmp	.-188    	; 0xf66 <uint2lcd+0x3e>

00001022 <int2lcd>:
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    if(number < 0){send_lcd(CHAR_BYTE, '-', 100); uint2lcd(~number+1);}    //take 2's complement of number and display
    1022:	87 ff       	sbrs	r24, 7
    else                                    {uint2lcd(number);}
    1024:	0c 94 94 07 	jmp	0xf28	; 0xf28 <uint2lcd>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1028:	91 e0       	ldi	r25, 0x01	; 1
    102a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    102c:	77 9b       	sbis	0x0e, 7	; 14
    102e:	fe cf       	rjmp	.-4      	; 0x102c <int2lcd+0xa>
  SPDR = byte;                        //send payload
    1030:	9d e2       	ldi	r25, 0x2D	; 45
    1032:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1034:	77 9b       	sbis	0x0e, 7	; 14
    1036:	fe cf       	rjmp	.-4      	; 0x1034 <int2lcd+0x12>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1038:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    103c:	98 60       	ori	r25, 0x08	; 8
    103e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1042:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1046:	97 7f       	andi	r25, 0xF7	; 247
    1048:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    104c:	ef e9       	ldi	r30, 0x9F	; 159
    104e:	ff e0       	ldi	r31, 0x0F	; 15
    1050:	31 97       	sbiw	r30, 0x01	; 1
    1052:	f1 f7       	brne	.-4      	; 0x1050 <int2lcd+0x2e>
    1054:	00 c0       	rjmp	.+0      	; 0x1056 <int2lcd+0x34>
    1056:	00 00       	nop
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    if(number < 0){send_lcd(CHAR_BYTE, '-', 100); uint2lcd(~number+1);}    //take 2's complement of number and display
    1058:	81 95       	neg	r24
    105a:	0c 94 94 07 	jmp	0xf28	; 0xf28 <uint2lcd>

0000105e <cursor_on>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    105e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1060:	77 9b       	sbis	0x0e, 7	; 14
    1062:	fe cf       	rjmp	.-4      	; 0x1060 <cursor_on+0x2>
  SPDR = byte;                        //send payload
    1064:	8e e0       	ldi	r24, 0x0E	; 14
    1066:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1068:	77 9b       	sbis	0x0e, 7	; 14
    106a:	fe cf       	rjmp	.-4      	; 0x1068 <cursor_on+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    106c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1070:	88 60       	ori	r24, 0x08	; 8
    1072:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1076:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    107a:	87 7f       	andi	r24, 0xF7	; 247
    107c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1080:	8f e9       	ldi	r24, 0x9F	; 159
    1082:	9f e0       	ldi	r25, 0x0F	; 15
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	f1 f7       	brne	.-4      	; 0x1084 <cursor_on+0x26>
    1088:	00 c0       	rjmp	.+0      	; 0x108a <cursor_on+0x2c>
    108a:	00 00       	nop
    108c:	08 95       	ret

0000108e <cursor_off>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    108e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1090:	77 9b       	sbis	0x0e, 7	; 14
    1092:	fe cf       	rjmp	.-4      	; 0x1090 <cursor_off+0x2>
  SPDR = byte;                        //send payload
    1094:	8c e0       	ldi	r24, 0x0C	; 12
    1096:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1098:	77 9b       	sbis	0x0e, 7	; 14
    109a:	fe cf       	rjmp	.-4      	; 0x1098 <cursor_off+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    109c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10a0:	88 60       	ori	r24, 0x08	; 8
    10a2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10aa:	87 7f       	andi	r24, 0xF7	; 247
    10ac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10b0:	8f e9       	ldi	r24, 0x9F	; 159
    10b2:	9f e0       	ldi	r25, 0x0F	; 15
    10b4:	01 97       	sbiw	r24, 0x01	; 1
    10b6:	f1 f7       	brne	.-4      	; 0x10b4 <cursor_off+0x26>
    10b8:	00 c0       	rjmp	.+0      	; 0x10ba <cursor_off+0x2c>
    10ba:	00 00       	nop
    10bc:	08 95       	ret

000010be <shift_right>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    10be:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10c0:	77 9b       	sbis	0x0e, 7	; 14
    10c2:	fe cf       	rjmp	.-4      	; 0x10c0 <shift_right+0x2>
  SPDR = byte;                        //send payload
    10c4:	8e e1       	ldi	r24, 0x1E	; 30
    10c6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10c8:	77 9b       	sbis	0x0e, 7	; 14
    10ca:	fe cf       	rjmp	.-4      	; 0x10c8 <shift_right+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    10cc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10d0:	88 60       	ori	r24, 0x08	; 8
    10d2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10d6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10da:	87 7f       	andi	r24, 0xF7	; 247
    10dc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10e0:	8f e9       	ldi	r24, 0x9F	; 159
    10e2:	9f e0       	ldi	r25, 0x0F	; 15
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	f1 f7       	brne	.-4      	; 0x10e4 <shift_right+0x26>
    10e8:	00 c0       	rjmp	.+0      	; 0x10ea <shift_right+0x2c>
    10ea:	00 00       	nop
    10ec:	08 95       	ret

000010ee <shift_left>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    10ee:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10f0:	77 9b       	sbis	0x0e, 7	; 14
    10f2:	fe cf       	rjmp	.-4      	; 0x10f0 <shift_left+0x2>
  SPDR = byte;                        //send payload
    10f4:	88 e1       	ldi	r24, 0x18	; 24
    10f6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10f8:	77 9b       	sbis	0x0e, 7	; 14
    10fa:	fe cf       	rjmp	.-4      	; 0x10f8 <shift_left+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    10fc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1100:	88 60       	ori	r24, 0x08	; 8
    1102:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1106:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    110a:	87 7f       	andi	r24, 0xF7	; 247
    110c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1110:	8f e9       	ldi	r24, 0x9F	; 159
    1112:	9f e0       	ldi	r25, 0x0F	; 15
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	f1 f7       	brne	.-4      	; 0x1114 <__stack+0x15>
    1118:	00 c0       	rjmp	.+0      	; 0x111a <__stack+0x1b>
    111a:	00 00       	nop
    111c:	08 95       	ret

0000111e <strobe_lcd>:
    111e:	e2 e6       	ldi	r30, 0x62	; 98
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	88 60       	ori	r24, 0x08	; 8
    1126:	80 83       	st	Z, r24
    1128:	80 81       	ld	r24, Z
    112a:	87 7f       	andi	r24, 0xF7	; 247
    112c:	80 83       	st	Z, r24
    112e:	08 95       	ret

00001130 <clear_display>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1130:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1132:	77 9b       	sbis	0x0e, 7	; 14
    1134:	fe cf       	rjmp	.-4      	; 0x1132 <clear_display+0x2>
  SPDR = byte;                        //send payload
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    113a:	77 9b       	sbis	0x0e, 7	; 14
    113c:	fe cf       	rjmp	.-4      	; 0x113a <clear_display+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    113e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1142:	88 60       	ori	r24, 0x08	; 8
    1144:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1148:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    114c:	87 7f       	andi	r24, 0xF7	; 247
    114e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1152:	8f e9       	ldi	r24, 0x9F	; 159
    1154:	9f e0       	ldi	r25, 0x0F	; 15
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <clear_display+0x26>
    115a:	00 c0       	rjmp	.+0      	; 0x115c <clear_display+0x2c>
    115c:	00 00       	nop
    115e:	08 95       	ret

00001160 <cursor_home>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1160:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1162:	77 9b       	sbis	0x0e, 7	; 14
    1164:	fe cf       	rjmp	.-4      	; 0x1162 <cursor_home+0x2>
  SPDR = byte;                        //send payload
    1166:	82 e0       	ldi	r24, 0x02	; 2
    1168:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    116a:	77 9b       	sbis	0x0e, 7	; 14
    116c:	fe cf       	rjmp	.-4      	; 0x116a <cursor_home+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    116e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1172:	88 60       	ori	r24, 0x08	; 8
    1174:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1178:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    117c:	87 7f       	andi	r24, 0xF7	; 247
    117e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1182:	8f e9       	ldi	r24, 0x9F	; 159
    1184:	9f e0       	ldi	r25, 0x0F	; 15
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	f1 f7       	brne	.-4      	; 0x1186 <cursor_home+0x26>
    118a:	00 c0       	rjmp	.+0      	; 0x118c <cursor_home+0x2c>
    118c:	00 00       	nop
    118e:	08 95       	ret

00001190 <home_line2>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1190:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1192:	77 9b       	sbis	0x0e, 7	; 14
    1194:	fe cf       	rjmp	.-4      	; 0x1192 <home_line2+0x2>
  SPDR = byte;                        //send payload
    1196:	80 ec       	ldi	r24, 0xC0	; 192
    1198:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    119a:	77 9b       	sbis	0x0e, 7	; 14
    119c:	fe cf       	rjmp	.-4      	; 0x119a <home_line2+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    119e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11a2:	88 60       	ori	r24, 0x08	; 8
    11a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11ac:	87 7f       	andi	r24, 0xF7	; 247
    11ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11b2:	8f e9       	ldi	r24, 0x9F	; 159
    11b4:	9f e0       	ldi	r25, 0x0F	; 15
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <home_line2+0x26>
    11ba:	00 c0       	rjmp	.+0      	; 0x11bc <home_line2+0x2c>
    11bc:	00 00       	nop
    11be:	08 95       	ret

000011c0 <fill_spaces>:
 
//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
    11c0:	90 e1       	ldi	r25, 0x10	; 16
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    11c2:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
    11c4:	20 e2       	ldi	r18, 0x20	; 32
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    11c6:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11c8:	77 9b       	sbis	0x0e, 7	; 14
    11ca:	fe cf       	rjmp	.-4      	; 0x11c8 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
    11cc:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11ce:	77 9b       	sbis	0x0e, 7	; 14
    11d0:	fe cf       	rjmp	.-4      	; 0x11ce <fill_spaces+0xe>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    11d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11d6:	88 60       	ori	r24, 0x08	; 8
    11d8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11e0:	87 7f       	andi	r24, 0xF7	; 247
    11e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11e6:	ef e9       	ldi	r30, 0x9F	; 159
    11e8:	ff e0       	ldi	r31, 0x0F	; 15
    11ea:	31 97       	sbiw	r30, 0x01	; 1
    11ec:	f1 f7       	brne	.-4      	; 0x11ea <fill_spaces+0x2a>
    11ee:	00 c0       	rjmp	.+0      	; 0x11f0 <fill_spaces+0x30>
    11f0:	00 00       	nop
    11f2:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
    11f4:	41 f7       	brne	.-48     	; 0x11c6 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ',100); //100us wait between characters
	}
}  
    11f6:	08 95       	ret

000011f8 <char2lcd>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    11f8:	91 e0       	ldi	r25, 0x01	; 1
    11fa:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11fc:	77 9b       	sbis	0x0e, 7	; 14
    11fe:	fe cf       	rjmp	.-4      	; 0x11fc <char2lcd+0x4>
  SPDR = byte;                        //send payload
    1200:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1202:	77 9b       	sbis	0x0e, 7	; 14
    1204:	fe cf       	rjmp	.-4      	; 0x1202 <char2lcd+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1206:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    120a:	88 60       	ori	r24, 0x08	; 8
    120c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1210:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1214:	87 7f       	andi	r24, 0xF7	; 247
    1216:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    121a:	8f e9       	ldi	r24, 0x9F	; 159
    121c:	9f e0       	ldi	r25, 0x0F	; 15
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	f1 f7       	brne	.-4      	; 0x121e <char2lcd+0x26>
    1222:	00 c0       	rjmp	.+0      	; 0x1224 <char2lcd+0x2c>
    1224:	00 00       	nop
    1226:	08 95       	ret

00001228 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
    1228:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}                  
    122a:	40 e0       	ldi	r20, 0x00	; 0
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	60 e0       	ldi	r22, 0x00	; 0
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1230:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}                  
    1232:	df 01       	movw	r26, r30
    1234:	a4 0f       	add	r26, r20
    1236:	b5 1f       	adc	r27, r21
    1238:	8c 91       	ld	r24, X
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    123a:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    123c:	77 9b       	sbis	0x0e, 7	; 14
    123e:	fe cf       	rjmp	.-4      	; 0x123c <string2lcd+0x14>
  SPDR = byte;                        //send payload
    1240:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1242:	77 9b       	sbis	0x0e, 7	; 14
    1244:	fe cf       	rjmp	.-4      	; 0x1242 <string2lcd+0x1a>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1246:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    124a:	98 60       	ori	r25, 0x08	; 8
    124c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1250:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1254:	97 7f       	andi	r25, 0xF7	; 247
    1256:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    125a:	8f e9       	ldi	r24, 0x9F	; 159
    125c:	9f e0       	ldi	r25, 0x0F	; 15
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	f1 f7       	brne	.-4      	; 0x125e <string2lcd+0x36>
    1262:	00 c0       	rjmp	.+0      	; 0x1264 <string2lcd+0x3c>
    1264:	00 00       	nop
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}                  
    1266:	6f 5f       	subi	r22, 0xFF	; 255
    1268:	46 2f       	mov	r20, r22
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	df 01       	movw	r26, r30
    126e:	0d 90       	ld	r0, X+
    1270:	00 20       	and	r0, r0
    1272:	e9 f7       	brne	.-6      	; 0x126e <string2lcd+0x46>
    1274:	9d 01       	movw	r18, r26
    1276:	2e 1b       	sub	r18, r30
    1278:	3f 0b       	sbc	r19, r31
    127a:	22 50       	subi	r18, 0x02	; 2
    127c:	31 09       	sbc	r19, r1
    127e:	24 17       	cp	r18, r20
    1280:	35 07       	cpc	r19, r21
    1282:	b8 f6       	brcc	.-82     	; 0x1232 <string2lcd+0xa>
} 
    1284:	08 95       	ret

00001286 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1286:	8f ef       	ldi	r24, 0xFF	; 255
    1288:	99 ef       	ldi	r25, 0xF9	; 249
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <lcd_init+0x4>
    128e:	00 c0       	rjmp	.+0      	; 0x1290 <lcd_init+0xa>
    1290:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! should not be here.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
    1292:	88 e0       	ldi	r24, 0x08	; 8
    1294:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1298:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    129a:	77 9b       	sbis	0x0e, 7	; 14
    129c:	fe cf       	rjmp	.-4      	; 0x129a <lcd_init+0x14>
  SPDR = byte;                        //send payload
    129e:	80 e3       	ldi	r24, 0x30	; 48
    12a0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12a2:	77 9b       	sbis	0x0e, 7	; 14
    12a4:	fe cf       	rjmp	.-4      	; 0x12a2 <lcd_init+0x1c>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    12a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12aa:	88 60       	ori	r24, 0x08	; 8
    12ac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12b4:	87 7f       	andi	r24, 0xF7	; 247
    12b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12ba:	8f e9       	ldi	r24, 0x9F	; 159
    12bc:	9f e0       	ldi	r25, 0x0F	; 15
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <lcd_init+0x38>
    12c2:	00 c0       	rjmp	.+0      	; 0x12c4 <lcd_init+0x3e>
    12c4:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    12c6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12c8:	77 9b       	sbis	0x0e, 7	; 14
    12ca:	fe cf       	rjmp	.-4      	; 0x12c8 <lcd_init+0x42>
  SPDR = byte;                        //send payload
    12cc:	80 e3       	ldi	r24, 0x30	; 48
    12ce:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12d0:	77 9b       	sbis	0x0e, 7	; 14
    12d2:	fe cf       	rjmp	.-4      	; 0x12d0 <lcd_init+0x4a>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    12d4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12d8:	88 60       	ori	r24, 0x08	; 8
    12da:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12e2:	87 7f       	andi	r24, 0xF7	; 247
    12e4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12e8:	8f e9       	ldi	r24, 0x9F	; 159
    12ea:	9f e0       	ldi	r25, 0x0F	; 15
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	f1 f7       	brne	.-4      	; 0x12ec <lcd_init+0x66>
    12f0:	00 c0       	rjmp	.+0      	; 0x12f2 <lcd_init+0x6c>
    12f2:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    12f4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12f6:	77 9b       	sbis	0x0e, 7	; 14
    12f8:	fe cf       	rjmp	.-4      	; 0x12f6 <lcd_init+0x70>
  SPDR = byte;                        //send payload
    12fa:	80 e3       	ldi	r24, 0x30	; 48
    12fc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12fe:	77 9b       	sbis	0x0e, 7	; 14
    1300:	fe cf       	rjmp	.-4      	; 0x12fe <lcd_init+0x78>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1302:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1306:	88 60       	ori	r24, 0x08	; 8
    1308:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    130c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1310:	87 7f       	andi	r24, 0xF7	; 247
    1312:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1316:	8f e9       	ldi	r24, 0x9F	; 159
    1318:	9f e0       	ldi	r25, 0x0F	; 15
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	f1 f7       	brne	.-4      	; 0x131a <lcd_init+0x94>
    131e:	00 c0       	rjmp	.+0      	; 0x1320 <lcd_init+0x9a>
    1320:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1322:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1324:	77 9b       	sbis	0x0e, 7	; 14
    1326:	fe cf       	rjmp	.-4      	; 0x1324 <lcd_init+0x9e>
  SPDR = byte;                        //send payload
    1328:	88 e3       	ldi	r24, 0x38	; 56
    132a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    132c:	77 9b       	sbis	0x0e, 7	; 14
    132e:	fe cf       	rjmp	.-4      	; 0x132c <lcd_init+0xa6>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1330:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1334:	88 60       	ori	r24, 0x08	; 8
    1336:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    133a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    133e:	87 7f       	andi	r24, 0xF7	; 247
    1340:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1344:	8f e9       	ldi	r24, 0x9F	; 159
    1346:	9f e0       	ldi	r25, 0x0F	; 15
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	f1 f7       	brne	.-4      	; 0x1348 <lcd_init+0xc2>
    134c:	00 c0       	rjmp	.+0      	; 0x134e <lcd_init+0xc8>
    134e:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1350:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1352:	77 9b       	sbis	0x0e, 7	; 14
    1354:	fe cf       	rjmp	.-4      	; 0x1352 <lcd_init+0xcc>
  SPDR = byte;                        //send payload
    1356:	88 e0       	ldi	r24, 0x08	; 8
    1358:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    135a:	77 9b       	sbis	0x0e, 7	; 14
    135c:	fe cf       	rjmp	.-4      	; 0x135a <lcd_init+0xd4>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    135e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1362:	88 60       	ori	r24, 0x08	; 8
    1364:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1368:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    136c:	87 7f       	andi	r24, 0xF7	; 247
    136e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1372:	8f e9       	ldi	r24, 0x9F	; 159
    1374:	9f e0       	ldi	r25, 0x0F	; 15
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	f1 f7       	brne	.-4      	; 0x1376 <lcd_init+0xf0>
    137a:	00 c0       	rjmp	.+0      	; 0x137c <lcd_init+0xf6>
    137c:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    137e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1380:	77 9b       	sbis	0x0e, 7	; 14
    1382:	fe cf       	rjmp	.-4      	; 0x1380 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1388:	77 9b       	sbis	0x0e, 7	; 14
    138a:	fe cf       	rjmp	.-4      	; 0x1388 <lcd_init+0x102>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    138c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1390:	88 60       	ori	r24, 0x08	; 8
    1392:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1396:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    139a:	87 7f       	andi	r24, 0xF7	; 247
    139c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13a0:	8f e9       	ldi	r24, 0x9F	; 159
    13a2:	9f e0       	ldi	r25, 0x0F	; 15
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <lcd_init+0x11e>
    13a8:	00 c0       	rjmp	.+0      	; 0x13aa <lcd_init+0x124>
    13aa:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    13ac:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    13ae:	77 9b       	sbis	0x0e, 7	; 14
    13b0:	fe cf       	rjmp	.-4      	; 0x13ae <lcd_init+0x128>
  SPDR = byte;                        //send payload
    13b2:	86 e0       	ldi	r24, 0x06	; 6
    13b4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    13b6:	77 9b       	sbis	0x0e, 7	; 14
    13b8:	fe cf       	rjmp	.-4      	; 0x13b6 <lcd_init+0x130>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    13ba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13be:	88 60       	ori	r24, 0x08	; 8
    13c0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13c8:	87 7f       	andi	r24, 0xF7	; 247
    13ca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13ce:	8f e9       	ldi	r24, 0x9F	; 159
    13d0:	9f e0       	ldi	r25, 0x0F	; 15
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <lcd_init+0x14c>
    13d6:	00 c0       	rjmp	.+0      	; 0x13d8 <lcd_init+0x152>
    13d8:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    13da:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    13dc:	77 9b       	sbis	0x0e, 7	; 14
    13de:	fe cf       	rjmp	.-4      	; 0x13dc <lcd_init+0x156>
  SPDR = byte;                        //send payload
    13e0:	8c e0       	ldi	r24, 0x0C	; 12
    13e2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    13e4:	77 9b       	sbis	0x0e, 7	; 14
    13e6:	fe cf       	rjmp	.-4      	; 0x13e4 <lcd_init+0x15e>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    13e8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13ec:	88 60       	ori	r24, 0x08	; 8
    13ee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13f2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13f6:	87 7f       	andi	r24, 0xF7	; 247
    13f8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13fc:	8f e9       	ldi	r24, 0x9F	; 159
    13fe:	9f e0       	ldi	r25, 0x0F	; 15
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	f1 f7       	brne	.-4      	; 0x1400 <lcd_init+0x17a>
    1404:	00 c0       	rjmp	.+0      	; 0x1406 <lcd_init+0x180>
    1406:	00 00       	nop
    1408:	08 95       	ret

0000140a <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    140a:	4f 92       	push	r4
    140c:	5f 92       	push	r5
    140e:	6f 92       	push	r6
    1410:	7f 92       	push	r7
    1412:	8f 92       	push	r8
    1414:	9f 92       	push	r9
    1416:	af 92       	push	r10
    1418:	bf 92       	push	r11
    141a:	cf 92       	push	r12
    141c:	df 92       	push	r13
    141e:	ef 92       	push	r14
    1420:	ff 92       	push	r15
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	69 97       	sbiw	r28, 0x19	; 25
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	cd bf       	out	0x3d, r28	; 61
    143a:	14 2f       	mov	r17, r20
    143c:	42 2e       	mov	r4, r18
    143e:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
    1440:	00 23       	and	r16, r16
    1442:	79 f0       	breq	.+30     	; 0x1462 <lcd_int32+0x58>
        bSigned = (qr.quot<0);
    1444:	6b 01       	movw	r12, r22
    1446:	7c 01       	movw	r14, r24
    1448:	cc 24       	eor	r12, r12
    144a:	f7 fc       	sbrc	r15, 7
    144c:	c3 94       	inc	r12
    144e:	dd 24       	eor	r13, r13
    1450:	ee 24       	eor	r14, r14
    1452:	ff 24       	eor	r15, r15
    1454:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
    1456:	6b 01       	movw	r12, r22
    1458:	7c 01       	movw	r14, r24
    145a:	97 fd       	sbrc	r25, 7
    145c:	a5 c0       	rjmp	.+330    	; 0x15a8 <lcd_int32+0x19e>
    145e:	c7 01       	movw	r24, r14
    1460:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
    1462:	44 20       	and	r4, r4
    1464:	09 f4       	brne	.+2      	; 0x1468 <lcd_int32+0x5e>
    1466:	98 c0       	rjmp	.+304    	; 0x1598 <lcd_int32+0x18e>
    1468:	9e 01       	movw	r18, r28
    146a:	2f 5f       	subi	r18, 0xFF	; 255
    146c:	3f 4f       	sbci	r19, 0xFF	; 255
    146e:	59 01       	movw	r10, r18
    1470:	49 01       	movw	r8, r18
    1472:	66 24       	eor	r6, r6
    1474:	6a 94       	dec	r6
    1476:	64 0c       	add	r6, r4
    1478:	71 2c       	mov	r7, r1
    147a:	3f ef       	ldi	r19, 0xFF	; 255
    147c:	63 1a       	sub	r6, r19
    147e:	73 0a       	sbc	r7, r19
    1480:	6a 0c       	add	r6, r10
    1482:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    1484:	2a e0       	ldi	r18, 0x0A	; 10
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	40 e0       	ldi	r20, 0x00	; 0
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__divmodsi4>
    1490:	e6 2f       	mov	r30, r22
    1492:	2a 8b       	std	Y+18, r18	; 0x12
    1494:	3b 8b       	std	Y+19, r19	; 0x13
    1496:	4c 8b       	std	Y+20, r20	; 0x14
    1498:	5d 8b       	std	Y+21, r21	; 0x15
    149a:	6a 89       	ldd	r22, Y+18	; 0x12
    149c:	7b 89       	ldd	r23, Y+19	; 0x13
    149e:	8c 89       	ldd	r24, Y+20	; 0x14
    14a0:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    14a2:	20 e3       	ldi	r18, 0x30	; 48
    14a4:	2e 0f       	add	r18, r30
    14a6:	f4 01       	movw	r30, r8
    14a8:	21 93       	st	Z+, r18
    14aa:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
    14ac:	6e 16       	cp	r6, r30
    14ae:	7f 06       	cpc	r7, r31
    14b0:	49 f7       	brne	.-46     	; 0x1484 <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    14b2:	99 24       	eor	r9, r9
    14b4:	93 94       	inc	r9
    14b6:	94 0c       	add	r9, r4
    14b8:	f5 01       	movw	r30, r10
    14ba:	e4 0d       	add	r30, r4
    14bc:	f1 1d       	adc	r31, r1
    14be:	2e e2       	ldi	r18, 0x2E	; 46
    14c0:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
    14c2:	2a e0       	ldi	r18, 0x0A	; 10
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 e0       	ldi	r20, 0x00	; 0
    14c8:	50 e0       	ldi	r21, 0x00	; 0
    14ca:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__divmodsi4>
    14ce:	e6 2f       	mov	r30, r22
    14d0:	2a 8b       	std	Y+18, r18	; 0x12
    14d2:	3b 8b       	std	Y+19, r19	; 0x13
    14d4:	4c 8b       	std	Y+20, r20	; 0x14
    14d6:	5d 8b       	std	Y+21, r21	; 0x15
    14d8:	6e 8b       	std	Y+22, r22	; 0x16
    14da:	7f 8b       	std	Y+23, r23	; 0x17
    14dc:	88 8f       	std	Y+24, r24	; 0x18
    14de:	99 8f       	std	Y+25, r25	; 0x19
    14e0:	6a 89       	ldd	r22, Y+18	; 0x12
    14e2:	7b 89       	ldd	r23, Y+19	; 0x13
    14e4:	8c 89       	ldd	r24, Y+20	; 0x14
    14e6:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    14e8:	31 e0       	ldi	r19, 0x01	; 1
    14ea:	39 0d       	add	r19, r9
    14ec:	d5 01       	movw	r26, r10
    14ee:	a9 0d       	add	r26, r9
    14f0:	b1 1d       	adc	r27, r1
    14f2:	e0 5d       	subi	r30, 0xD0	; 208
    14f4:	ec 93       	st	X, r30
    14f6:	93 2e       	mov	r9, r19
        }while(qr.quot);
    14f8:	61 15       	cp	r22, r1
    14fa:	71 05       	cpc	r23, r1
    14fc:	81 05       	cpc	r24, r1
    14fe:	91 05       	cpc	r25, r1
    1500:	01 f7       	brne	.-64     	; 0x14c2 <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
    1502:	11 23       	and	r17, r17
    1504:	61 f0       	breq	.+24     	; 0x151e <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1506:	51 10       	cpse	r5, r1
    1508:	4d c0       	rjmp	.+154    	; 0x15a4 <lcd_int32+0x19a>
    150a:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    150c:	31 17       	cp	r19, r17
    150e:	38 f4       	brcc	.+14     	; 0x151e <lcd_int32+0x114>
    1510:	f5 01       	movw	r30, r10
    1512:	e3 0f       	add	r30, r19
    1514:	f1 1d       	adc	r31, r1
    1516:	90 83       	st	Z, r25
    1518:	3f 5f       	subi	r19, 0xFF	; 255
    151a:	13 13       	cpse	r17, r19
    151c:	f9 cf       	rjmp	.-14     	; 0x1510 <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    151e:	00 23       	and	r16, r16
    1520:	31 f0       	breq	.+12     	; 0x152e <lcd_int32+0x124>
    1522:	f5 01       	movw	r30, r10
    1524:	e3 0f       	add	r30, r19
    1526:	f1 1d       	adc	r31, r1
    1528:	9d e2       	ldi	r25, 0x2D	; 45
    152a:	90 83       	st	Z, r25
    152c:	3f 5f       	subi	r19, 0xFF	; 255
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    152e:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
    1530:	31 50       	subi	r19, 0x01	; 1
    1532:	f5 01       	movw	r30, r10
    1534:	e3 0f       	add	r30, r19
    1536:	f1 1d       	adc	r31, r1
    1538:	90 81       	ld	r25, Z
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    153a:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    153c:	77 9b       	sbis	0x0e, 7	; 14
    153e:	fe cf       	rjmp	.-4      	; 0x153c <lcd_int32+0x132>
  SPDR = byte;                        //send payload
    1540:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1542:	77 9b       	sbis	0x0e, 7	; 14
    1544:	fe cf       	rjmp	.-4      	; 0x1542 <lcd_int32+0x138>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1546:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    154a:	98 60       	ori	r25, 0x08	; 8
    154c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1550:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1554:	97 7f       	andi	r25, 0xF7	; 247
    1556:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    155a:	8f e9       	ldi	r24, 0x9F	; 159
    155c:	9f e0       	ldi	r25, 0x0F	; 15
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	f1 f7       	brne	.-4      	; 0x155e <lcd_int32+0x154>
    1562:	00 c0       	rjmp	.+0      	; 0x1564 <lcd_int32+0x15a>
    1564:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
    1566:	31 11       	cpse	r19, r1
    1568:	e3 cf       	rjmp	.-58     	; 0x1530 <lcd_int32+0x126>

}
    156a:	69 96       	adiw	r28, 0x19	; 25
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	ff 90       	pop	r15
    1580:	ef 90       	pop	r14
    1582:	df 90       	pop	r13
    1584:	cf 90       	pop	r12
    1586:	bf 90       	pop	r11
    1588:	af 90       	pop	r10
    158a:	9f 90       	pop	r9
    158c:	8f 90       	pop	r8
    158e:	7f 90       	pop	r7
    1590:	6f 90       	pop	r6
    1592:	5f 90       	pop	r5
    1594:	4f 90       	pop	r4
    1596:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    1598:	91 2c       	mov	r9, r1
    159a:	9e 01       	movw	r18, r28
    159c:	2f 5f       	subi	r18, 0xFF	; 255
    159e:	3f 4f       	sbci	r19, 0xFF	; 255
    15a0:	59 01       	movw	r10, r18
    15a2:	8f cf       	rjmp	.-226    	; 0x14c2 <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    15a4:	90 e3       	ldi	r25, 0x30	; 48
    15a6:	b2 cf       	rjmp	.-156    	; 0x150c <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    15a8:	f0 94       	com	r15
    15aa:	e0 94       	com	r14
    15ac:	d0 94       	com	r13
    15ae:	c0 94       	com	r12
    15b0:	c1 1c       	adc	r12, r1
    15b2:	d1 1c       	adc	r13, r1
    15b4:	e1 1c       	adc	r14, r1
    15b6:	f1 1c       	adc	r15, r1
    15b8:	52 cf       	rjmp	.-348    	; 0x145e <lcd_int32+0x54>

000015ba <lcd_int16>:
    15ba:	5f 92       	push	r5
    15bc:	6f 92       	push	r6
    15be:	7f 92       	push	r7
    15c0:	8f 92       	push	r8
    15c2:	9f 92       	push	r9
    15c4:	af 92       	push	r10
    15c6:	bf 92       	push	r11
    15c8:	cf 92       	push	r12
    15ca:	df 92       	push	r13
    15cc:	ef 92       	push	r14
    15ce:	ff 92       	push	r15
    15d0:	0f 93       	push	r16
    15d2:	1f 93       	push	r17
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	61 97       	sbiw	r28, 0x11	; 17
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	de bf       	out	0x3e, r29	; 62
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	cd bf       	out	0x3d, r28	; 61
    15e8:	5c 01       	movw	r10, r24
    15ea:	96 2e       	mov	r9, r22
    15ec:	54 2e       	mov	r5, r20
    15ee:	62 2e       	mov	r6, r18
    15f0:	8b 2c       	mov	r8, r11
    15f2:	88 1c       	adc	r8, r8
    15f4:	88 24       	eor	r8, r8
    15f6:	88 1c       	adc	r8, r8
    15f8:	78 2c       	mov	r7, r8
    15fa:	9c 01       	movw	r18, r24
    15fc:	97 fd       	sbrc	r25, 7
    15fe:	9f c0       	rjmp	.+318    	; 0x173e <lcd_int16+0x184>
    1600:	55 20       	and	r5, r5
    1602:	09 f4       	brne	.+2      	; 0x1606 <lcd_int16+0x4c>
    1604:	90 c0       	rjmp	.+288    	; 0x1726 <lcd_int16+0x16c>
    1606:	8e 01       	movw	r16, r28
    1608:	0f 5f       	subi	r16, 0xFF	; 255
    160a:	1f 4f       	sbci	r17, 0xFF	; 255
    160c:	78 01       	movw	r14, r16
    160e:	cc 24       	eor	r12, r12
    1610:	ca 94       	dec	r12
    1612:	c5 0c       	add	r12, r5
    1614:	d1 2c       	mov	r13, r1
    1616:	8f ef       	ldi	r24, 0xFF	; 255
    1618:	c8 1a       	sub	r12, r24
    161a:	d8 0a       	sbc	r13, r24
    161c:	c0 0e       	add	r12, r16
    161e:	d1 1e       	adc	r13, r17
    1620:	6a e0       	ldi	r22, 0x0A	; 10
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	c9 01       	movw	r24, r18
    1626:	0e 94 3f 0c 	call	0x187e	; 0x187e <__divmodhi4>
    162a:	46 2f       	mov	r20, r22
    162c:	24 2f       	mov	r18, r20
    162e:	37 2f       	mov	r19, r23
    1630:	80 5d       	subi	r24, 0xD0	; 208
    1632:	f7 01       	movw	r30, r14
    1634:	81 93       	st	Z+, r24
    1636:	7f 01       	movw	r14, r30
    1638:	ec 15       	cp	r30, r12
    163a:	fd 05       	cpc	r31, r13
    163c:	89 f7       	brne	.-30     	; 0x1620 <lcd_int16+0x66>
    163e:	ff 24       	eor	r15, r15
    1640:	f3 94       	inc	r15
    1642:	f5 0c       	add	r15, r5
    1644:	f8 01       	movw	r30, r16
    1646:	e5 0d       	add	r30, r5
    1648:	f1 1d       	adc	r31, r1
    164a:	8e e2       	ldi	r24, 0x2E	; 46
    164c:	80 83       	st	Z, r24
    164e:	01 c0       	rjmp	.+2      	; 0x1652 <lcd_int16+0x98>
    1650:	f9 2e       	mov	r15, r25
    1652:	6a e0       	ldi	r22, 0x0A	; 10
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	c9 01       	movw	r24, r18
    1658:	0e 94 3f 0c 	call	0x187e	; 0x187e <__divmodhi4>
    165c:	46 2f       	mov	r20, r22
    165e:	24 2f       	mov	r18, r20
    1660:	37 2f       	mov	r19, r23
    1662:	91 e0       	ldi	r25, 0x01	; 1
    1664:	9f 0d       	add	r25, r15
    1666:	f8 01       	movw	r30, r16
    1668:	ef 0d       	add	r30, r15
    166a:	f1 1d       	adc	r31, r1
    166c:	80 5d       	subi	r24, 0xD0	; 208
    166e:	80 83       	st	Z, r24
    1670:	21 15       	cp	r18, r1
    1672:	31 05       	cpc	r19, r1
    1674:	69 f7       	brne	.-38     	; 0x1650 <lcd_int16+0x96>
    1676:	61 10       	cpse	r6, r1
    1678:	5b c0       	rjmp	.+182    	; 0x1730 <lcd_int16+0x176>
    167a:	b7 fc       	sbrc	r11, 7
    167c:	65 c0       	rjmp	.+202    	; 0x1748 <lcd_int16+0x18e>
    167e:	99 20       	and	r9, r9
    1680:	b1 f0       	breq	.+44     	; 0x16ae <lcd_int16+0xf4>
    1682:	68 2d       	mov	r22, r8
    1684:	70 e0       	ldi	r23, 0x00	; 0
    1686:	80 e2       	ldi	r24, 0x20	; 32
    1688:	29 2f       	mov	r18, r25
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	49 2d       	mov	r20, r9
    168e:	50 e0       	ldi	r21, 0x00	; 0
    1690:	46 1b       	sub	r20, r22
    1692:	57 0b       	sbc	r21, r23
    1694:	24 17       	cp	r18, r20
    1696:	35 07       	cpc	r19, r21
    1698:	54 f4       	brge	.+20     	; 0x16ae <lcd_int16+0xf4>
    169a:	9f 5f       	subi	r25, 0xFF	; 255
    169c:	f8 01       	movw	r30, r16
    169e:	e2 0f       	add	r30, r18
    16a0:	f3 1f       	adc	r31, r19
    16a2:	80 83       	st	Z, r24
    16a4:	29 2f       	mov	r18, r25
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	24 17       	cp	r18, r20
    16aa:	35 07       	cpc	r19, r21
    16ac:	b4 f3       	brlt	.-20     	; 0x169a <lcd_int16+0xe0>
    16ae:	77 20       	and	r7, r7
    16b0:	31 f0       	breq	.+12     	; 0x16be <lcd_int16+0x104>
    16b2:	f8 01       	movw	r30, r16
    16b4:	e9 0f       	add	r30, r25
    16b6:	f1 1d       	adc	r31, r1
    16b8:	8d e2       	ldi	r24, 0x2D	; 45
    16ba:	80 83       	st	Z, r24
    16bc:	9f 5f       	subi	r25, 0xFF	; 255
    16be:	21 e0       	ldi	r18, 0x01	; 1
    16c0:	91 50       	subi	r25, 0x01	; 1
    16c2:	f8 01       	movw	r30, r16
    16c4:	e9 0f       	add	r30, r25
    16c6:	f1 1d       	adc	r31, r1
    16c8:	80 81       	ld	r24, Z
    16ca:	2f b9       	out	0x0f, r18	; 15
    16cc:	77 9b       	sbis	0x0e, 7	; 14
    16ce:	fe cf       	rjmp	.-4      	; 0x16cc <lcd_int16+0x112>
    16d0:	8f b9       	out	0x0f, r24	; 15
    16d2:	77 9b       	sbis	0x0e, 7	; 14
    16d4:	fe cf       	rjmp	.-4      	; 0x16d2 <lcd_int16+0x118>
    16d6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16da:	88 60       	ori	r24, 0x08	; 8
    16dc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16e4:	87 7f       	andi	r24, 0xF7	; 247
    16e6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16ea:	ef e9       	ldi	r30, 0x9F	; 159
    16ec:	ff e0       	ldi	r31, 0x0F	; 15
    16ee:	31 97       	sbiw	r30, 0x01	; 1
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <lcd_int16+0x134>
    16f2:	00 c0       	rjmp	.+0      	; 0x16f4 <lcd_int16+0x13a>
    16f4:	00 00       	nop
    16f6:	91 11       	cpse	r25, r1
    16f8:	e3 cf       	rjmp	.-58     	; 0x16c0 <lcd_int16+0x106>
    16fa:	61 96       	adiw	r28, 0x11	; 17
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	bf 90       	pop	r11
    1718:	af 90       	pop	r10
    171a:	9f 90       	pop	r9
    171c:	8f 90       	pop	r8
    171e:	7f 90       	pop	r7
    1720:	6f 90       	pop	r6
    1722:	5f 90       	pop	r5
    1724:	08 95       	ret
    1726:	f1 2c       	mov	r15, r1
    1728:	8e 01       	movw	r16, r28
    172a:	0f 5f       	subi	r16, 0xFF	; 255
    172c:	1f 4f       	sbci	r17, 0xFF	; 255
    172e:	91 cf       	rjmp	.-222    	; 0x1652 <lcd_int16+0x98>
    1730:	99 20       	and	r9, r9
    1732:	09 f4       	brne	.+2      	; 0x1736 <lcd_int16+0x17c>
    1734:	bc cf       	rjmp	.-136    	; 0x16ae <lcd_int16+0xf4>
    1736:	68 2d       	mov	r22, r8
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	80 e3       	ldi	r24, 0x30	; 48
    173c:	a5 cf       	rjmp	.-182    	; 0x1688 <lcd_int16+0xce>
    173e:	22 27       	eor	r18, r18
    1740:	33 27       	eor	r19, r19
    1742:	28 1b       	sub	r18, r24
    1744:	39 0b       	sbc	r19, r25
    1746:	5c cf       	rjmp	.-328    	; 0x1600 <lcd_int16+0x46>
    1748:	f3 94       	inc	r15
    174a:	f3 94       	inc	r15
    174c:	f8 01       	movw	r30, r16
    174e:	e9 0f       	add	r30, r25
    1750:	f1 1d       	adc	r31, r1
    1752:	8d e2       	ldi	r24, 0x2D	; 45
    1754:	80 83       	st	Z, r24
    1756:	99 20       	and	r9, r9
    1758:	59 f0       	breq	.+22     	; 0x1770 <lcd_int16+0x1b6>
    175a:	2f 2d       	mov	r18, r15
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	49 2d       	mov	r20, r9
    1760:	50 e0       	ldi	r21, 0x00	; 0
    1762:	24 17       	cp	r18, r20
    1764:	35 07       	cpc	r19, r21
    1766:	24 f4       	brge	.+8      	; 0x1770 <lcd_int16+0x1b6>
    1768:	9f 2d       	mov	r25, r15
    176a:	71 2c       	mov	r7, r1
    176c:	80 e2       	ldi	r24, 0x20	; 32
    176e:	95 cf       	rjmp	.-214    	; 0x169a <lcd_int16+0xe0>
    1770:	9f 2d       	mov	r25, r15
    1772:	a5 cf       	rjmp	.-182    	; 0x16be <lcd_int16+0x104>

00001774 <main>:


//***********************************************************************************
int main()
{
DDRE &= ~(1 << PE3);
    1774:	13 98       	cbi	0x02, 3	; 2

/**********************************************************************
 *				spi_init
 **********************************************************************/
void spi_init(void){
DDRB |= ( (1 << PB2) | ( 1<< PB1) | (1<<PB0) ); //mosi and serial clock
    1776:	87 b3       	in	r24, 0x17	; 23
    1778:	87 60       	ori	r24, 0x07	; 7
    177a:	87 bb       	out	0x17, r24	; 23
SPCR |= ( (1 << MSTR) | (1 << SPE) ); //master mode, SPI enabled, clk low on idle, leading edge sample
    177c:	8d b1       	in	r24, 0x0d	; 13
    177e:	80 65       	ori	r24, 0x50	; 80
    1780:	8d b9       	out	0x0d, r24	; 13

//SPSR |= 1 << SPI2X; // sclk is twice as fast so 8Mhz f/2 
DDRB |= 0xF0; // set PORTB 4-7 bits as outputs
    1782:	87 b3       	in	r24, 0x17	; 23
    1784:	80 6f       	ori	r24, 0xF0	; 240
    1786:	87 bb       	out	0x17, r24	; 23
DDRA = 0x03; // set PORTA 6-7 bits as inputs
    1788:	83 e0       	ldi	r24, 0x03	; 3
    178a:	8a bb       	out	0x1a, r24	; 26
DDRD = (1 << PD2); // set PD2 as output
    178c:	84 e0       	ldi	r24, 0x04	; 4
    178e:	81 bb       	out	0x11, r24	; 17
DDRE = 0xFF;// set PORTE to all outputs
    1790:	cf ef       	ldi	r28, 0xFF	; 255
    1792:	c2 b9       	out	0x02, r28	; 2
//***********************************************************************************
int main()
{
DDRE &= ~(1 << PE3);
spi_init();	//initialize SPI and port configurations
lcd_init();	//initialize LCD display
    1794:	0e 94 43 09 	call	0x1286	; 0x1286 <lcd_init>
clear_display(); //Clean LCD display
    1798:	0e 94 98 08 	call	0x1130	; 0x1130 <clear_display>

/**********************************************************************
 *				ADC_init
 **********************************************************************/
void ADC_init(void){
DDRF  &= ~(_BV(DDF7)); //make port F bit 7 the ADC input  
    179c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    17a0:	8f 77       	andi	r24, 0x7F	; 127
    17a2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
    17a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    17aa:	8f 77       	andi	r24, 0x7F	; 127
    17ac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	
ADMUX = (1 << REFS0) | (1 << ADLAR) | 0x07; // reference to AVCC(5v), left adjusted (only reading  8bit), and channel 7
    17b0:	87 e6       	ldi	r24, 0x67	; 103
    17b2:	87 b9       	out	0x07, r24	; 7
//ADC enabled, single conversion, division factor is 128
ADCSRA = (1 << ADEN) | (1 << ADPS2) | ( 1 << ADPS1) | ( 1 << ADPS0) ; 
    17b4:	87 e8       	ldi	r24, 0x87	; 135
    17b6:	86 b9       	out	0x06, r24	; 6

/**********************************************************************
 *				dimming_init
 **********************************************************************/
void dimming_init(void){
TCCR2 |= (1 << WGM21) | ( 1 << WGM20) | (1 << COM21) | ( 1 << CS20); // no prescale, clear on OC2 match, fast pwm mode
    17b8:	85 b5       	in	r24, 0x25	; 37
    17ba:	89 66       	ori	r24, 0x69	; 105
    17bc:	85 bd       	out	0x25, r24	; 37
TIMSK |= (1 << OCIE2); // Compare match interrupt enable timer/counter0
    17be:	87 b7       	in	r24, 0x37	; 55
    17c0:	80 68       	ori	r24, 0x80	; 128
    17c2:	87 bf       	out	0x37, r24	; 55
TCNT2 = 0; //set count at 0
    17c4:	14 bc       	out	0x24, r1	; 36

/**********************************************************************
 *				tone_init
 **********************************************************************/
void tone_init(void){
DDRC = 0xFF; // set all of PORTC as outputs
    17c6:	c4 bb       	out	0x14, r28	; 20
TCCR1A = 0x00; // normal operation w/ OC1A is disconnected
    17c8:	1f bc       	out	0x2f, r1	; 47
TIMSK |= 1 << OCIE1A; //output compare enable for timercounter1A
    17ca:	87 b7       	in	r24, 0x37	; 55
    17cc:	80 61       	ori	r24, 0x10	; 16
    17ce:	87 bf       	out	0x37, r24	; 55
OCR1A = 3999; // 4kHz and triggers ISR
    17d0:	8f e9       	ldi	r24, 0x9F	; 159
    17d2:	9f e0       	ldi	r25, 0x0F	; 15
    17d4:	9b bd       	out	0x2b, r25	; 43
    17d6:	8a bd       	out	0x2a, r24	; 42
TCCR1B |= (1<<WGM12 | 1<<CS10); // CTC mode, clear with OCR and no prescaling
    17d8:	8e b5       	in	r24, 0x2e	; 46
    17da:	89 60       	ori	r24, 0x09	; 9
    17dc:	8e bd       	out	0x2e, r24	; 46

/**********************************************************************
 *				clock_init
 **********************************************************************/
void clock_init(void){
ASSR   |=  1<<AS0; //ext osc TOSC in 32kHz 
    17de:	80 b7       	in	r24, 0x30	; 48
    17e0:	88 60       	ori	r24, 0x08	; 8
    17e2:	80 bf       	out	0x30, r24	; 48
TIMSK |= 1 << OCIE0; //interrupt flag on compare register 0
    17e4:	87 b7       	in	r24, 0x37	; 55
    17e6:	82 60       	ori	r24, 0x02	; 2
    17e8:	87 bf       	out	0x37, r24	; 55
TCCR0 |= ((1 << WGM01) | (1 << CS00)); //CTC mode, with clk/no pre-scaling
    17ea:	83 b7       	in	r24, 0x33	; 51
    17ec:	89 60       	ori	r24, 0x09	; 9
    17ee:	83 bf       	out	0x33, r24	; 51
OCR0 = 127; // Set top 
    17f0:	8f e7       	ldi	r24, 0x7F	; 127
    17f2:	81 bf       	out	0x31, r24	; 49
/**********************************************************************
 *				volume_init
 **********************************************************************/
void volume_init(void){
//DDRE = 0xFF; //Set PORTE as outputs
TCCR3A = (1 << COM3A1 | (1 << WGM31) ); //normal operation w/ OC3A is disconnected
    17f4:	82 e8       	ldi	r24, 0x82	; 130
    17f6:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
TCCR3B |= (  (1 << CS30) | ( 1 << WGM32) | (1 << WGM33) ); //fast pwm 
    17fa:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    17fe:	89 61       	ori	r24, 0x19	; 25
    1800:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
ICR3 = 10; // Set overflow top 
    1804:	8a e0       	ldi	r24, 0x0A	; 10
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    180c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
OCR3A = 5; // set compare match
    1810:	85 e0       	ldi	r24, 0x05	; 5
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1818:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
}

	//handles decimal point display when alarm is triggered
	if(dp == TRUE){
		PORTB = 0; // digit 0
		PORTA = 0x7F; // turn on decimal point
    181c:	df e7       	ldi	r29, 0x7F	; 127



while(1){ // main loop

ADCSR |= (1<<ADSC); //start writing 
    181e:	36 9a       	sbi	0x06, 6	; 6
	while(bit_is_clear(ADCSRA, ADIF)){};
    1820:	34 9b       	sbis	0x06, 4	; 6
    1822:	fe cf       	rjmp	.-4      	; 0x1820 <main+0xac>

ADCSR |= (1 << ADIF);//clear flag by writing one
    1824:	34 9a       	sbi	0x06, 4	; 6
adc_data = ADCH; // store ADC values
    1826:	85 b1       	in	r24, 0x05	; 5
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <adc_data+0x1>
    182e:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <adc_data>
	

PORTA = 0xFF;  //make PORTA an input port with pullups 	
    1832:	cb bb       	out	0x1b, r28	; 27
*/

//minutes_seg(minutes, hours);
//segsum(minutes);

segsum(hours);
    1834:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <hours>
    1838:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <hours+0x1>
    183c:	0e 94 f5 05 	call	0xbea	; 0xbea <segsum>
//DIGIT SHIFTS
//bound a counter (0-4) to keep track of digit to display ;
PORTB = 0x00;
    1840:	18 ba       	out	0x18, r1	; 24
    1842:	ed e0       	ldi	r30, 0x0D	; 13
    1844:	f1 e0       	ldi	r31, 0x01	; 1
    1846:	80 e0       	ldi	r24, 0x00	; 0

	for(int index = 0; index < 5; index++){
		PORTB = index << 4; // within 4 digits for the hex value
    1848:	98 2f       	mov	r25, r24
    184a:	92 95       	swap	r25
    184c:	90 7f       	andi	r25, 0xF0	; 240
    184e:	98 bb       	out	0x18, r25	; 24
		PORTA = segment_data[index]; //send 7 segment code to LED segments
    1850:	91 91       	ld	r25, Z+
    1852:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1854:	af e9       	ldi	r26, 0x9F	; 159
    1856:	bf e0       	ldi	r27, 0x0F	; 15
    1858:	11 97       	sbiw	r26, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <main+0xe4>
    185c:	00 c0       	rjmp	.+0      	; 0x185e <main+0xea>
    185e:	00 00       	nop
    1860:	8f 5f       	subi	r24, 0xFF	; 255
segsum(hours);
//DIGIT SHIFTS
//bound a counter (0-4) to keep track of digit to display ;
PORTB = 0x00;

	for(int index = 0; index < 5; index++){
    1862:	85 30       	cpi	r24, 0x05	; 5
    1864:	89 f7       	brne	.-30     	; 0x1848 <main+0xd4>
		PORTA = segment_data[index]; //send 7 segment code to LED segments
		_delay_ms(1); // add delay	
}

	//handles decimal point display when alarm is triggered
	if(dp == TRUE){
    1866:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <dp>
    186a:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <dp+0x1>
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	19 f0       	breq	.+6      	; 0x1878 <main+0x104>
		PORTB = 0; // digit 0
		PORTA = 0x7F; // turn on decimal point
	}
	
DDRA = 0xFF;  //make PORTA an output
    1872:	ca bb       	out	0x1a, r28	; 26
sei(); // ISR will return here
    1874:	78 94       	sei

}//while
    1876:	d3 cf       	rjmp	.-90     	; 0x181e <main+0xaa>
		_delay_ms(1); // add delay	
}

	//handles decimal point display when alarm is triggered
	if(dp == TRUE){
		PORTB = 0; // digit 0
    1878:	18 ba       	out	0x18, r1	; 24
		PORTA = 0x7F; // turn on decimal point
    187a:	db bb       	out	0x1b, r29	; 27
    187c:	fa cf       	rjmp	.-12     	; 0x1872 <main+0xfe>

0000187e <__divmodhi4>:
    187e:	97 fb       	bst	r25, 7
    1880:	07 2e       	mov	r0, r23
    1882:	16 f4       	brtc	.+4      	; 0x1888 <__divmodhi4+0xa>
    1884:	00 94       	com	r0
    1886:	07 d0       	rcall	.+14     	; 0x1896 <__divmodhi4_neg1>
    1888:	77 fd       	sbrc	r23, 7
    188a:	09 d0       	rcall	.+18     	; 0x189e <__divmodhi4_neg2>
    188c:	0e 94 81 0c 	call	0x1902	; 0x1902 <__udivmodhi4>
    1890:	07 fc       	sbrc	r0, 7
    1892:	05 d0       	rcall	.+10     	; 0x189e <__divmodhi4_neg2>
    1894:	3e f4       	brtc	.+14     	; 0x18a4 <__divmodhi4_exit>

00001896 <__divmodhi4_neg1>:
    1896:	90 95       	com	r25
    1898:	81 95       	neg	r24
    189a:	9f 4f       	sbci	r25, 0xFF	; 255
    189c:	08 95       	ret

0000189e <__divmodhi4_neg2>:
    189e:	70 95       	com	r23
    18a0:	61 95       	neg	r22
    18a2:	7f 4f       	sbci	r23, 0xFF	; 255

000018a4 <__divmodhi4_exit>:
    18a4:	08 95       	ret

000018a6 <__divmodsi4>:
    18a6:	05 2e       	mov	r0, r21
    18a8:	97 fb       	bst	r25, 7
    18aa:	1e f4       	brtc	.+6      	; 0x18b2 <__divmodsi4+0xc>
    18ac:	00 94       	com	r0
    18ae:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__negsi2>
    18b2:	57 fd       	sbrc	r21, 7
    18b4:	07 d0       	rcall	.+14     	; 0x18c4 <__divmodsi4_neg2>
    18b6:	0e 94 95 0c 	call	0x192a	; 0x192a <__udivmodsi4>
    18ba:	07 fc       	sbrc	r0, 7
    18bc:	03 d0       	rcall	.+6      	; 0x18c4 <__divmodsi4_neg2>
    18be:	4e f4       	brtc	.+18     	; 0x18d2 <__divmodsi4_exit>
    18c0:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <__negsi2>

000018c4 <__divmodsi4_neg2>:
    18c4:	50 95       	com	r21
    18c6:	40 95       	com	r20
    18c8:	30 95       	com	r19
    18ca:	21 95       	neg	r18
    18cc:	3f 4f       	sbci	r19, 0xFF	; 255
    18ce:	4f 4f       	sbci	r20, 0xFF	; 255
    18d0:	5f 4f       	sbci	r21, 0xFF	; 255

000018d2 <__divmodsi4_exit>:
    18d2:	08 95       	ret

000018d4 <__negsi2>:
    18d4:	90 95       	com	r25
    18d6:	80 95       	com	r24
    18d8:	70 95       	com	r23
    18da:	61 95       	neg	r22
    18dc:	7f 4f       	sbci	r23, 0xFF	; 255
    18de:	8f 4f       	sbci	r24, 0xFF	; 255
    18e0:	9f 4f       	sbci	r25, 0xFF	; 255
    18e2:	08 95       	ret

000018e4 <__umulhisi3>:
    18e4:	a2 9f       	mul	r26, r18
    18e6:	b0 01       	movw	r22, r0
    18e8:	b3 9f       	mul	r27, r19
    18ea:	c0 01       	movw	r24, r0
    18ec:	a3 9f       	mul	r26, r19
    18ee:	70 0d       	add	r23, r0
    18f0:	81 1d       	adc	r24, r1
    18f2:	11 24       	eor	r1, r1
    18f4:	91 1d       	adc	r25, r1
    18f6:	b2 9f       	mul	r27, r18
    18f8:	70 0d       	add	r23, r0
    18fa:	81 1d       	adc	r24, r1
    18fc:	11 24       	eor	r1, r1
    18fe:	91 1d       	adc	r25, r1
    1900:	08 95       	ret

00001902 <__udivmodhi4>:
    1902:	aa 1b       	sub	r26, r26
    1904:	bb 1b       	sub	r27, r27
    1906:	51 e1       	ldi	r21, 0x11	; 17
    1908:	07 c0       	rjmp	.+14     	; 0x1918 <__udivmodhi4_ep>

0000190a <__udivmodhi4_loop>:
    190a:	aa 1f       	adc	r26, r26
    190c:	bb 1f       	adc	r27, r27
    190e:	a6 17       	cp	r26, r22
    1910:	b7 07       	cpc	r27, r23
    1912:	10 f0       	brcs	.+4      	; 0x1918 <__udivmodhi4_ep>
    1914:	a6 1b       	sub	r26, r22
    1916:	b7 0b       	sbc	r27, r23

00001918 <__udivmodhi4_ep>:
    1918:	88 1f       	adc	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	5a 95       	dec	r21
    191e:	a9 f7       	brne	.-22     	; 0x190a <__udivmodhi4_loop>
    1920:	80 95       	com	r24
    1922:	90 95       	com	r25
    1924:	bc 01       	movw	r22, r24
    1926:	cd 01       	movw	r24, r26
    1928:	08 95       	ret

0000192a <__udivmodsi4>:
    192a:	a1 e2       	ldi	r26, 0x21	; 33
    192c:	1a 2e       	mov	r1, r26
    192e:	aa 1b       	sub	r26, r26
    1930:	bb 1b       	sub	r27, r27
    1932:	fd 01       	movw	r30, r26
    1934:	0d c0       	rjmp	.+26     	; 0x1950 <__udivmodsi4_ep>

00001936 <__udivmodsi4_loop>:
    1936:	aa 1f       	adc	r26, r26
    1938:	bb 1f       	adc	r27, r27
    193a:	ee 1f       	adc	r30, r30
    193c:	ff 1f       	adc	r31, r31
    193e:	a2 17       	cp	r26, r18
    1940:	b3 07       	cpc	r27, r19
    1942:	e4 07       	cpc	r30, r20
    1944:	f5 07       	cpc	r31, r21
    1946:	20 f0       	brcs	.+8      	; 0x1950 <__udivmodsi4_ep>
    1948:	a2 1b       	sub	r26, r18
    194a:	b3 0b       	sbc	r27, r19
    194c:	e4 0b       	sbc	r30, r20
    194e:	f5 0b       	sbc	r31, r21

00001950 <__udivmodsi4_ep>:
    1950:	66 1f       	adc	r22, r22
    1952:	77 1f       	adc	r23, r23
    1954:	88 1f       	adc	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	1a 94       	dec	r1
    195a:	69 f7       	brne	.-38     	; 0x1936 <__udivmodsi4_loop>
    195c:	60 95       	com	r22
    195e:	70 95       	com	r23
    1960:	80 95       	com	r24
    1962:	90 95       	com	r25
    1964:	9b 01       	movw	r18, r22
    1966:	ac 01       	movw	r20, r24
    1968:	bd 01       	movw	r22, r26
    196a:	cf 01       	movw	r24, r30
    196c:	08 95       	ret

0000196e <_exit>:
    196e:	f8 94       	cli

00001970 <__stop_program>:
    1970:	ff cf       	rjmp	.-2      	; 0x1970 <__stop_program>
