
Main_lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001814  000018a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001814  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000056  00800128  00800128  000018d0  2**0
                  ALLOC
  3 .stab         0000357c  00000000  00000000  000018d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001667  00000000  00000000  00004e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000064b3  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000064c4  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00006500  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00006c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00007398  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  000073b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__vector_9>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 c1 01 	jmp	0x382	; 0x382 <__vector_12>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 8d 03 	jmp	0x71a	; 0x71a <__vector_15>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e1       	ldi	r30, 0x14	; 20
      a0:	f8 e1       	ldi	r31, 0x18	; 24
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 32       	cpi	r26, 0x28	; 40
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a8 e2       	ldi	r26, 0x28	; 40
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 37       	cpi	r26, 0x7E	; 126
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 5f 0a 	call	0x14be	; 0x14be <main>
      c6:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <chk_buttons>:
// Checks the state of pushbutton S0 It shifts in ones till the button is pushed. 
// Function returns a 1 only once per debounced button push so a debounce and toggle 
// function can be implemented at the same time. Expects active low pushbutton on 
// Port A  bit zero. Debounce time is determined by external loop delay times 12. 
//*******************************************************************************
uint8_t chk_buttons(int button) {
      ce:	ac 01       	movw	r20, r24
static uint16_t states[8] = {0}; // an array to store the states of all buttons on the button board

// states[0] corresponds to S1 on the board and states[7] corresponds to S8
states[button] = (states[button]<<1 | (! bit_is_clear(PINA, button)) | 0xE000); //first extract the bit that corresponds to the button
      d0:	99 b3       	in	r25, 0x19	; 25
      d2:	fa 01       	movw	r30, r20
      d4:	ee 0f       	add	r30, r30
      d6:	ff 1f       	adc	r31, r31
      d8:	e9 5b       	subi	r30, 0xB9	; 185
      da:	fe 4f       	sbci	r31, 0xFE	; 254
      dc:	20 81       	ld	r18, Z
      de:	31 81       	ldd	r19, Z+1	; 0x01
      e0:	22 0f       	add	r18, r18
      e2:	33 1f       	adc	r19, r19
      e4:	30 6e       	ori	r19, 0xE0	; 224
      e6:	89 2f       	mov	r24, r25
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <chk_buttons+0x22>
      ec:	95 95       	asr	r25
      ee:	87 95       	ror	r24
      f0:	4a 95       	dec	r20
      f2:	e2 f7       	brpl	.-8      	; 0xec <chk_buttons+0x1e>
      f4:	81 70       	andi	r24, 0x01	; 1
      f6:	99 27       	eor	r25, r25
      f8:	28 2b       	or	r18, r24
      fa:	39 2b       	or	r19, r25
      fc:	31 83       	std	Z+1, r19	; 0x01
      fe:	20 83       	st	Z, r18
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	21 15       	cp	r18, r1
     104:	30 4f       	sbci	r19, 0xF0	; 240
     106:	09 f0       	breq	.+2      	; 0x10a <chk_buttons+0x3c>
     108:	80 e0       	ldi	r24, 0x00	; 0
//Check if button is pressed
if (states[button] == 0xF000) {return TRUE;} 
return FALSE;
}
     10a:	08 95       	ret

0000010c <process_EN>:
 *
 * once the state machine completes all 4 cycles then it means the knob has been shifted once
 * encoder function for the left and right knobs 
 * Handles all cases of any rotation of the encoders
 **********************************************************************/
int process_EN(void){
     10c:	cf 93       	push	r28
//Breaking up the raw data from the encoder into a and b pins

uint8_t new_A = ((raw_encoder_val & 0x01) ==0) ? 0:1;
     10e:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <raw_encoder_val>
     112:	91 70       	andi	r25, 0x01	; 1
uint8_t new_B = ((raw_encoder_val & 0x02) ==0) ? 0:1;
     114:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <raw_encoder_val>
     118:	41 e0       	ldi	r20, 0x01	; 1
     11a:	c8 2f       	mov	r28, r24
     11c:	c2 70       	andi	r28, 0x02	; 2
     11e:	81 ff       	sbrs	r24, 1
     120:	40 e0       	ldi	r20, 0x00	; 0

//process the right encoder
uint8_t new_C = ((raw_encoder_val & 0x04) ==0) ? 0:1;
     122:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <raw_encoder_val>
     126:	84 70       	andi	r24, 0x04	; 4
uint8_t new_D = ((raw_encoder_val & 0x08) ==0) ? 0:1;
     128:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <raw_encoder_val>
     12c:	31 e0       	ldi	r19, 0x01	; 1
     12e:	52 2f       	mov	r21, r18
     130:	58 70       	andi	r21, 0x08	; 8
     132:	23 ff       	sbrs	r18, 3
     134:	30 e0       	ldi	r19, 0x00	; 0
int en_val = 0;

en_val = -1; // default return value , no change

// process the right encoder inputs and determine the position movement
if (( new_C != old_C ) || ( new_D != old_D )){ // if change occurred
     136:	e1 e0       	ldi	r30, 0x01	; 1
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	81 11       	cpse	r24, r1
     13c:	02 c0       	rjmp	.+4      	; 0x142 <process_EN+0x36>
     13e:	e0 e0       	ldi	r30, 0x00	; 0
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <old_C>
     146:	70 91 5f 01 	lds	r23, 0x015F	; 0x80015f <old_C+0x1>
     14a:	23 2f       	mov	r18, r19
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	e6 17       	cp	r30, r22
     150:	f7 07       	cpc	r31, r23
     152:	09 f4       	brne	.+2      	; 0x156 <process_EN+0x4a>
     154:	72 c0       	rjmp	.+228    	; 0x23a <process_EN+0x12e>

if (( new_C == 0) && ( new_D == 0)) { // once the state has been moved either right or left from current state
	if ( old_C == 1){ r_counter++;}
     156:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <old_C>
     15a:	70 91 5f 01 	lds	r23, 0x015F	; 0x80015f <old_C+0x1>
en_val = -1; // default return value , no change

// process the right encoder inputs and determine the position movement
if (( new_C != old_C ) || ( new_D != old_D )){ // if change occurred

if (( new_C == 0) && ( new_D == 0)) { // once the state has been moved either right or left from current state
     15e:	81 11       	cpse	r24, r1
     160:	11 c0       	rjmp	.+34     	; 0x184 <process_EN+0x78>
     162:	55 23       	and	r21, r21
     164:	89 f0       	breq	.+34     	; 0x188 <process_EN+0x7c>
	if ( old_C == 1){ r_counter++;}
	else { r_counter--;}
}
else if (( new_C == 0) && ( new_D == 1)) { // update state if it has been moved from position from left to right 
	if ( old_C == 0){ r_counter++;}
     166:	67 2b       	or	r22, r23
     168:	91 f4       	brne	.+36     	; 0x18e <process_EN+0x82>

// process the right encoder inputs and determine the position movement
if (( new_C != old_C ) || ( new_D != old_D )){ // if change occurred

if (( new_C == 0) && ( new_D == 0)) { // once the state has been moved either right or left from current state
	if ( old_C == 1){ r_counter++;}
     16a:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <__data_end>
     16e:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <__data_end+0x1>
     172:	6f 5f       	subi	r22, 0xFF	; 255
     174:	7f 4f       	sbci	r23, 0xFF	; 255
     176:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__data_end+0x1>
     17a:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__data_end>
uint8_t new_C = ((raw_encoder_val & 0x04) ==0) ? 0:1;
uint8_t new_D = ((raw_encoder_val & 0x08) ==0) ? 0:1;

int en_val = 0;

en_val = -1; // default return value , no change
     17e:	af ef       	ldi	r26, 0xFF	; 255
     180:	bf ef       	ldi	r27, 0xFF	; 255
     182:	11 c0       	rjmp	.+34     	; 0x1a6 <process_EN+0x9a>
else if (( new_C == 0) && ( new_D == 1)) { // update state if it has been moved from position from left to right 
	if ( old_C == 0){ r_counter++;}
	else { r_counter--;}
}

else if (( new_C == 1) && ( new_D == 1)) {// detent position
     184:	51 11       	cpse	r21, r1
     186:	71 c0       	rjmp	.+226    	; 0x26a <process_EN+0x15e>

// process the right encoder inputs and determine the position movement
if (( new_C != old_C ) || ( new_D != old_D )){ // if change occurred

if (( new_C == 0) && ( new_D == 0)) { // once the state has been moved either right or left from current state
	if ( old_C == 1){ r_counter++;}
     188:	61 30       	cpi	r22, 0x01	; 1
     18a:	71 05       	cpc	r23, r1
     18c:	71 f3       	breq	.-36     	; 0x16a <process_EN+0x5e>
	else { r_counter--;}
     18e:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <__data_end>
     192:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <__data_end+0x1>
     196:	61 50       	subi	r22, 0x01	; 1
     198:	71 09       	sbc	r23, r1
     19a:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__data_end+0x1>
     19e:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__data_end>
uint8_t new_C = ((raw_encoder_val & 0x04) ==0) ? 0:1;
uint8_t new_D = ((raw_encoder_val & 0x08) ==0) ? 0:1;

int en_val = 0;

en_val = -1; // default return value , no change
     1a2:	af ef       	ldi	r26, 0xFF	; 255
     1a4:	bf ef       	ldi	r27, 0xFF	; 255
}
else if (( new_C == 1) && ( new_D == 0)) {
	if ( old_C == 1) { r_counter++;}
	else { r_counter--;}
}
	old_C = new_C ; // save what are now old values
     1a6:	f0 93 5f 01 	sts	0x015F, r31	; 0x80015f <old_C+0x1>
     1aa:	e0 93 5e 01 	sts	0x015E, r30	; 0x80015e <old_C>
	old_D = new_D ;
     1ae:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <old_D+0x1>
     1b2:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <old_D>

	} // if change occurred


// process the left encoder inputs and determine the position movement
if (( new_A != old_A ) || ( new_B != old_B )){ // if change occurred
     1b6:	29 2f       	mov	r18, r25
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <old_A>
     1be:	70 91 5a 01 	lds	r23, 0x015A	; 0x80015a <old_A+0x1>
     1c2:	50 e0       	ldi	r21, 0x00	; 0
     1c4:	26 17       	cp	r18, r22
     1c6:	37 07       	cpc	r19, r23
     1c8:	81 f1       	breq	.+96     	; 0x22a <process_EN+0x11e>

if (( new_A == 0) && ( new_B == 0)) { // once the state has been moved either right or left from current state
     1ca:	99 23       	and	r25, r25
     1cc:	e1 f0       	breq	.+56     	; 0x206 <process_EN+0xfa>
	else { state_counter--;}
}

else if (( new_A == 1) && ( new_B == 1)) {// detent position
	
	if ( old_A == 0){ if( state_counter == 3){ en_val =0;}} // one direction. Increment 
     1ce:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <old_A>
     1d2:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <old_A+0x1>
else if (( new_A == 0) && ( new_B == 1)) { // update state if it has been moved from position from left to right 
	if ( old_A == 0){ state_counter++;}
	else { state_counter--;}
}

else if (( new_A == 1) && ( new_B == 1)) {// detent position
     1d6:	c1 11       	cpse	r28, r1
     1d8:	3b c0       	rjmp	.+118    	; 0x250 <process_EN+0x144>
	else {if( state_counter == -3){ en_val =1;}} // or the other. Decrement
	
	state_counter = 0; // count is always reset in detent position
}
else if (( new_A == 1) && ( new_B == 0)) {
	if ( old_A == 1) { state_counter++;}
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	e1 f0       	breq	.+56     	; 0x216 <process_EN+0x10a>
	else { state_counter--;}
     1de:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <state_counter>
     1e2:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <state_counter+0x1>
     1e6:	01 97       	sbiw	r24, 0x01	; 1
     1e8:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state_counter+0x1>
     1ec:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state_counter>
}
	old_A = new_A ; // save what are now old values
     1f0:	30 93 5a 01 	sts	0x015A, r19	; 0x80015a <old_A+0x1>
     1f4:	20 93 59 01 	sts	0x0159, r18	; 0x800159 <old_A>
	old_B = new_B ;
     1f8:	50 93 5c 01 	sts	0x015C, r21	; 0x80015c <old_B+0x1>
     1fc:	40 93 5b 01 	sts	0x015B, r20	; 0x80015b <old_B>
	} // if change occurred


return ( en_val ); // return encoder state

}
     200:	cd 01       	movw	r24, r26
     202:	cf 91       	pop	r28
     204:	08 95       	ret

// process the left encoder inputs and determine the position movement
if (( new_A != old_A ) || ( new_B != old_B )){ // if change occurred

if (( new_A == 0) && ( new_B == 0)) { // once the state has been moved either right or left from current state
	if ( old_A == 1){ state_counter++;}
     206:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <old_A>
     20a:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <old_A+0x1>


// process the left encoder inputs and determine the position movement
if (( new_A != old_A ) || ( new_B != old_B )){ // if change occurred

if (( new_A == 0) && ( new_B == 0)) { // once the state has been moved either right or left from current state
     20e:	cc 23       	and	r28, r28
     210:	21 f3       	breq	.-56     	; 0x1da <process_EN+0xce>
	if ( old_A == 1){ state_counter++;}
	else { state_counter--;}
}
else if (( new_A == 0) && ( new_B == 1)) { // update state if it has been moved from position from left to right 
	if ( old_A == 0){ state_counter++;}
     212:	89 2b       	or	r24, r25
     214:	21 f7       	brne	.-56     	; 0x1de <process_EN+0xd2>
	else {if( state_counter == -3){ en_val =1;}} // or the other. Decrement
	
	state_counter = 0; // count is always reset in detent position
}
else if (( new_A == 1) && ( new_B == 0)) {
	if ( old_A == 1) { state_counter++;}
     216:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <state_counter>
     21a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <state_counter+0x1>
     21e:	01 96       	adiw	r24, 0x01	; 1
     220:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <state_counter+0x1>
     224:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state_counter>
     228:	e3 cf       	rjmp	.-58     	; 0x1f0 <process_EN+0xe4>

	} // if change occurred


// process the left encoder inputs and determine the position movement
if (( new_A != old_A ) || ( new_B != old_B )){ // if change occurred
     22a:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <old_B>
     22e:	70 91 5c 01 	lds	r23, 0x015C	; 0x80015c <old_B+0x1>
     232:	46 17       	cp	r20, r22
     234:	57 07       	cpc	r21, r23
     236:	49 f6       	brne	.-110    	; 0x1ca <process_EN+0xbe>
     238:	e3 cf       	rjmp	.-58     	; 0x200 <process_EN+0xf4>
int en_val = 0;

en_val = -1; // default return value , no change

// process the right encoder inputs and determine the position movement
if (( new_C != old_C ) || ( new_D != old_D )){ // if change occurred
     23a:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <old_D>
     23e:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <old_D+0x1>
     242:	26 17       	cp	r18, r22
     244:	37 07       	cpc	r19, r23
     246:	09 f0       	breq	.+2      	; 0x24a <process_EN+0x13e>
     248:	86 cf       	rjmp	.-244    	; 0x156 <process_EN+0x4a>
uint8_t new_C = ((raw_encoder_val & 0x04) ==0) ? 0:1;
uint8_t new_D = ((raw_encoder_val & 0x08) ==0) ? 0:1;

int en_val = 0;

en_val = -1; // default return value , no change
     24a:	af ef       	ldi	r26, 0xFF	; 255
     24c:	bf ef       	ldi	r27, 0xFF	; 255
     24e:	b3 cf       	rjmp	.-154    	; 0x1b6 <process_EN+0xaa>
	else { state_counter--;}
}

else if (( new_A == 1) && ( new_B == 1)) {// detent position
	
	if ( old_A == 0){ if( state_counter == 3){ en_val =0;}} // one direction. Increment 
     250:	89 2b       	or	r24, r25
     252:	d9 f4       	brne	.+54     	; 0x28a <process_EN+0x17e>
     254:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <state_counter>
     258:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <state_counter+0x1>
     25c:	03 97       	sbiw	r24, 0x03	; 3
     25e:	41 f1       	breq	.+80     	; 0x2b0 <process_EN+0x1a4>

	else {if( state_counter == -3){ en_val =1;}} // or the other. Decrement
	
	state_counter = 0; // count is always reset in detent position
     260:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <state_counter+0x1>
     264:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <state_counter>
     268:	c3 cf       	rjmp	.-122    	; 0x1f0 <process_EN+0xe4>
	else { r_counter--;}
}

else if (( new_C == 1) && ( new_D == 1)) {// detent position
	
	if ( old_C == 0){ if( r_counter == 3){ en_val =2;}} // one direction. Increment 
     26a:	67 2b       	or	r22, r23
     26c:	b9 f4       	brne	.+46     	; 0x29c <process_EN+0x190>
     26e:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <__data_end>
     272:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <__data_end+0x1>
     276:	63 30       	cpi	r22, 0x03	; 3
     278:	71 05       	cpc	r23, r1
     27a:	e9 f0       	breq	.+58     	; 0x2b6 <process_EN+0x1aa>
uint8_t new_C = ((raw_encoder_val & 0x04) ==0) ? 0:1;
uint8_t new_D = ((raw_encoder_val & 0x08) ==0) ? 0:1;

int en_val = 0;

en_val = -1; // default return value , no change
     27c:	af ef       	ldi	r26, 0xFF	; 255
     27e:	bf ef       	ldi	r27, 0xFF	; 255
	
	if ( old_C == 0){ if( r_counter == 3){ en_val =2;}} // one direction. Increment 

	else {if( r_counter == -3){ en_val =3;}} // or the other. Decrement
	
	r_counter = 0; // count is always reset in detent position
     280:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__data_end+0x1>
     284:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
     288:	8e cf       	rjmp	.-228    	; 0x1a6 <process_EN+0x9a>

else if (( new_A == 1) && ( new_B == 1)) {// detent position
	
	if ( old_A == 0){ if( state_counter == 3){ en_val =0;}} // one direction. Increment 

	else {if( state_counter == -3){ en_val =1;}} // or the other. Decrement
     28a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <state_counter>
     28e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <state_counter+0x1>
     292:	03 96       	adiw	r24, 0x03	; 3
     294:	29 f7       	brne	.-54     	; 0x260 <process_EN+0x154>
     296:	a1 e0       	ldi	r26, 0x01	; 1
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	e2 cf       	rjmp	.-60     	; 0x260 <process_EN+0x154>

else if (( new_C == 1) && ( new_D == 1)) {// detent position
	
	if ( old_C == 0){ if( r_counter == 3){ en_val =2;}} // one direction. Increment 

	else {if( r_counter == -3){ en_val =3;}} // or the other. Decrement
     29c:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <__data_end>
     2a0:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <__data_end+0x1>
     2a4:	6d 3f       	cpi	r22, 0xFD	; 253
     2a6:	7f 4f       	sbci	r23, 0xFF	; 255
     2a8:	49 f7       	brne	.-46     	; 0x27c <process_EN+0x170>
     2aa:	a3 e0       	ldi	r26, 0x03	; 3
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	e8 cf       	rjmp	.-48     	; 0x280 <process_EN+0x174>
	else { state_counter--;}
}

else if (( new_A == 1) && ( new_B == 1)) {// detent position
	
	if ( old_A == 0){ if( state_counter == 3){ en_val =0;}} // one direction. Increment 
     2b0:	a0 e0       	ldi	r26, 0x00	; 0
     2b2:	b0 e0       	ldi	r27, 0x00	; 0
     2b4:	d5 cf       	rjmp	.-86     	; 0x260 <process_EN+0x154>
	else { r_counter--;}
}

else if (( new_C == 1) && ( new_D == 1)) {// detent position
	
	if ( old_C == 0){ if( r_counter == 3){ en_val =2;}} // one direction. Increment 
     2b6:	a2 e0       	ldi	r26, 0x02	; 2
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	e2 cf       	rjmp	.-60     	; 0x280 <process_EN+0x174>

000002bc <update_EN>:
 *				update_encoder
 ********************************************************************/

void update_EN(int val_rot){
//changes the real time without affecting alarm time
	if(val_rot == 1){ time += (100*incr_time);} //if rotating to the right for left encoder then increment 
     2bc:	81 30       	cpi	r24, 0x01	; 1
     2be:	91 05       	cpc	r25, r1
     2c0:	61 f1       	breq	.+88     	; 0x31a <update_EN+0x5e>
	else if(val_rot ==0){time -= (100*incr_time);}//if rotating to the left for left encoder then decrement
     2c2:	00 97       	sbiw	r24, 0x00	; 0
     2c4:	31 f0       	breq	.+12     	; 0x2d2 <update_EN+0x16>
	else if(val_rot == 2){time -= incr_time;} // if rotating to the left for right encoder then decrement
     2c6:	82 30       	cpi	r24, 0x02	; 2
     2c8:	91 05       	cpc	r25, r1
     2ca:	e1 f1       	breq	.+120    	; 0x344 <update_EN+0x88>
	else if(val_rot == 3){time += incr_time;}// if rotatiing to the right for right encoder then increment
     2cc:	03 97       	sbiw	r24, 0x03	; 3
     2ce:	b1 f0       	breq	.+44     	; 0x2fc <update_EN+0x40>
     2d0:	08 95       	ret
 ********************************************************************/

void update_EN(int val_rot){
//changes the real time without affecting alarm time
	if(val_rot == 1){ time += (100*incr_time);} //if rotating to the right for left encoder then increment 
	else if(val_rot ==0){time -= (100*incr_time);}//if rotating to the left for left encoder then decrement
     2d2:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <incr_time>
     2d6:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <incr_time+0x1>
     2da:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     2de:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     2e2:	64 e6       	ldi	r22, 0x64	; 100
     2e4:	64 9f       	mul	r22, r20
     2e6:	90 01       	movw	r18, r0
     2e8:	65 9f       	mul	r22, r21
     2ea:	30 0d       	add	r19, r0
     2ec:	11 24       	eor	r1, r1
     2ee:	82 1b       	sub	r24, r18
     2f0:	93 0b       	sbc	r25, r19
     2f2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     2f6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
     2fa:	08 95       	ret
	else if(val_rot == 2){time -= incr_time;} // if rotating to the left for right encoder then decrement
	else if(val_rot == 3){time += incr_time;}// if rotatiing to the right for right encoder then increment
     2fc:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <incr_time>
     300:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <incr_time+0x1>
     304:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     308:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     30c:	82 0f       	add	r24, r18
     30e:	93 1f       	adc	r25, r19
     310:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     314:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
     318:	08 95       	ret
 *				update_encoder
 ********************************************************************/

void update_EN(int val_rot){
//changes the real time without affecting alarm time
	if(val_rot == 1){ time += (100*incr_time);} //if rotating to the right for left encoder then increment 
     31a:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <incr_time>
     31e:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <incr_time+0x1>
     322:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     326:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     32a:	64 e6       	ldi	r22, 0x64	; 100
     32c:	64 9f       	mul	r22, r20
     32e:	90 01       	movw	r18, r0
     330:	65 9f       	mul	r22, r21
     332:	30 0d       	add	r19, r0
     334:	11 24       	eor	r1, r1
     336:	82 0f       	add	r24, r18
     338:	93 1f       	adc	r25, r19
     33a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     33e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
     342:	08 95       	ret
	else if(val_rot ==0){time -= (100*incr_time);}//if rotating to the left for left encoder then decrement
	else if(val_rot == 2){time -= incr_time;} // if rotating to the left for right encoder then decrement
     344:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <incr_time>
     348:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <incr_time+0x1>
     34c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     350:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     354:	82 1b       	sub	r24, r18
     356:	93 0b       	sbc	r25, r19
     358:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     35c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
     360:	08 95       	ret

00000362 <read_SPI>:
 *				read_SPI
 ********************************************************************/
void read_SPI(void){

//shift clock register
PORTE &= ~(1 << PE6);//falling edge
     362:	1e 98       	cbi	0x03, 6	; 3
PORTE |= (1 << PE6); //rising edge
     364:	1e 9a       	sbi	0x03, 6	; 3
SPDR = 0x20; //send junk data to read in from SPI
     366:	80 e2       	ldi	r24, 0x20	; 32
     368:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){} // read data in
     36a:	77 9b       	sbis	0x0e, 7	; 14
     36c:	fe cf       	rjmp	.-4      	; 0x36a <read_SPI+0x8>
raw_encoder_val = SPDR;//save the data
     36e:	8f b1       	in	r24, 0x0f	; 15
     370:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <raw_encoder_val>
     374:	08 95       	ret

00000376 <write_SPI>:
/********************************************************************
 *				write_SPI
 ********************************************************************/
void write_SPI(uint8_t value){

SPDR = value; // take in which mode it is currently on and display it 
     376:	8f b9       	out	0x0f, r24	; 15
	while (bit_is_clear(SPSR,SPIF)) {} //wait till data is sent out
     378:	77 9b       	sbis	0x0e, 7	; 14
     37a:	fe cf       	rjmp	.-4      	; 0x378 <write_SPI+0x2>
PORTD |= (1 << PD2); //SEND data to bargraph, rising edge
     37c:	92 9a       	sbi	0x12, 2	; 18
PORTD &= ~(1<<PD2); // falling edge
     37e:	92 98       	cbi	0x12, 2	; 18
     380:	08 95       	ret

00000382 <__vector_12>:
}


//oscilator tone
ISR(TIMER1_COMPA_vect){
     382:	1f 92       	push	r1
     384:	0f 92       	push	r0
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	0f 92       	push	r0
     38a:	11 24       	eor	r1, r1
     38c:	8f 93       	push	r24
     38e:	9f 93       	push	r25


	DDRE |= 1 << PE3; // PE1 will output for volume
     390:	13 9a       	sbi	0x02, 3	; 2
	PORTC ^= 1 << PC0; // PC0 will toggle tone
     392:	95 b3       	in	r25, 0x15	; 21
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	89 27       	eor	r24, r25
     398:	85 bb       	out	0x15, r24	; 21
}
     39a:	9f 91       	pop	r25
     39c:	8f 91       	pop	r24
     39e:	0f 90       	pop	r0
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	0f 90       	pop	r0
     3a4:	1f 90       	pop	r1
     3a6:	18 95       	reti

000003a8 <__vector_9>:


//dimming for LED display 
ISR( TIMER2_COMP_vect){
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
     3b2:	8f 93       	push	r24
	
//	if(adc_data > 70){OCR2 = 10;} // dim the light if it is bright
//	else{OCR2 = 200;} // brighten the light otherwise
	OCR2 = adc_data;
     3b4:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <adc_data>
     3b8:	83 bd       	out	0x23, r24	; 35
}
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <alarm_compare>:

/********************************************************************
 *				alarm_compare
 *******************************************************************/
void alarm_compare(void){
	if(( mode != 0x08 && mode != 0x40)){
     3c6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <mode>
     3ca:	88 30       	cpi	r24, 0x08	; 8
     3cc:	79 f0       	breq	.+30     	; 0x3ec <alarm_compare+0x26>
     3ce:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <mode>
     3d2:	80 34       	cpi	r24, 0x40	; 64
     3d4:	59 f0       	breq	.+22     	; 0x3ec <alarm_compare+0x26>
		
		if((alarm_time == time) && (tone == TRUE)){
     3d6:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <alarm_time>
     3da:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <alarm_time+0x1>
     3de:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     3e2:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     3e6:	28 17       	cp	r18, r24
     3e8:	39 07       	cpc	r19, r25
     3ea:	09 f0       	breq	.+2      	; 0x3ee <alarm_compare+0x28>
     3ec:	08 95       	ret
     3ee:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <tone>
     3f2:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <tone+0x1>
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	c9 f7       	brne	.-14     	; 0x3ec <alarm_compare+0x26>
		OCR3A = 5;
     3fa:	85 e0       	ldi	r24, 0x05	; 5
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     402:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		TCCR1B |= 1 << CS10;
     406:	8e b5       	in	r24, 0x2e	; 46
     408:	81 60       	ori	r24, 0x01	; 1
     40a:	8e bd       	out	0x2e, r24	; 46
     40c:	08 95       	ret

0000040e <alarm_bound_24>:
     40e:	08 95       	ret

00000410 <alarm_bound_12>:
 *				alarm_bound_12
 * used to bound the alarm with respect to the time setting when setting
 * the alarm with the encoders.
 ********************************************************************/
void alarm_bound_12(void){
int hours = alarm_time/100;  // convert integer time into hours
     410:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <alarm_time>
     414:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <alarm_time+0x1>
     418:	64 e6       	ldi	r22, 0x64	; 100
     41a:	70 e0       	ldi	r23, 0x00	; 0
     41c:	0e 94 90 0b 	call	0x1720	; 0x1720 <__divmodhi4>
int minutes = alarm_time - (hours*100); // convert the integer time into minutes
     420:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <alarm_time>
     424:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <alarm_time+0x1>
     428:	4c e9       	ldi	r20, 0x9C	; 156
     42a:	46 03       	mulsu	r20, r22
     42c:	90 01       	movw	r18, r0
     42e:	47 9f       	mul	r20, r23
     430:	30 0d       	add	r19, r0
     432:	11 24       	eor	r1, r1
     434:	82 0f       	add	r24, r18
     436:	93 1f       	adc	r25, r19

if(minutes == 99){alarm_time -= 40;alarm_time+=100;} // decrement hours; ex (200 -> 159)
     438:	83 36       	cpi	r24, 0x63	; 99
     43a:	91 05       	cpc	r25, r1
     43c:	09 f4       	brne	.+2      	; 0x440 <alarm_bound_12+0x30>
     43e:	40 c0       	rjmp	.+128    	; 0x4c0 <alarm_bound_12+0xb0>

//bound the minutes from 0 to 60
if (minutes == 60){
     440:	8c 33       	cpi	r24, 0x3C	; 60
     442:	91 05       	cpc	r25, r1
     444:	41 f1       	breq	.+80     	; 0x496 <alarm_bound_12+0x86>
}


// bound the minutes from 60 to 0
//bound the hours from 12 to 1 and 1 to 12
if(hours > 12){alarm_time = 100;alarm_time += minutes;}
     446:	6d 30       	cpi	r22, 0x0D	; 13
     448:	71 05       	cpc	r23, r1
     44a:	8c f0       	brlt	.+34     	; 0x46e <alarm_bound_12+0x5e>
     44c:	24 e6       	ldi	r18, 0x64	; 100
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <alarm_time+0x1>
     454:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <alarm_time>
     458:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <alarm_time>
     45c:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <alarm_time+0x1>
     460:	82 0f       	add	r24, r18
     462:	93 1f       	adc	r25, r19
     464:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <alarm_time+0x1>
     468:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <alarm_time>
     46c:	08 95       	ret
if(hours < 1){alarm_time = 1200;alarm_time += minutes;}
     46e:	16 16       	cp	r1, r22
     470:	17 06       	cpc	r1, r23
     472:	84 f0       	brlt	.+32     	; 0x494 <alarm_bound_12+0x84>
     474:	20 eb       	ldi	r18, 0xB0	; 176
     476:	34 e0       	ldi	r19, 0x04	; 4
     478:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <alarm_time+0x1>
     47c:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <alarm_time>
     480:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <alarm_time>
     484:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <alarm_time+0x1>
     488:	82 0f       	add	r24, r18
     48a:	93 1f       	adc	r25, r19
     48c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <alarm_time+0x1>
     490:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <alarm_time>
     494:	08 95       	ret

if(minutes == 99){alarm_time -= 40;alarm_time+=100;} // decrement hours; ex (200 -> 159)

//bound the minutes from 0 to 60
if (minutes == 60){
	  alarm_time += 40;
     496:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <alarm_time>
     49a:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <alarm_time+0x1>
     49e:	28 5d       	subi	r18, 0xD8	; 216
     4a0:	3f 4f       	sbci	r19, 0xFF	; 255
     4a2:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <alarm_time+0x1>
     4a6:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <alarm_time>
	  alarm_time -= 100;
     4aa:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <alarm_time>
     4ae:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <alarm_time+0x1>
     4b2:	24 56       	subi	r18, 0x64	; 100
     4b4:	31 09       	sbc	r19, r1
     4b6:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <alarm_time+0x1>
     4ba:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <alarm_time>
     4be:	c3 cf       	rjmp	.-122    	; 0x446 <alarm_bound_12+0x36>
 ********************************************************************/
void alarm_bound_12(void){
int hours = alarm_time/100;  // convert integer time into hours
int minutes = alarm_time - (hours*100); // convert the integer time into minutes

if(minutes == 99){alarm_time -= 40;alarm_time+=100;} // decrement hours; ex (200 -> 159)
     4c0:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <alarm_time>
     4c4:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <alarm_time+0x1>
     4c8:	28 52       	subi	r18, 0x28	; 40
     4ca:	31 09       	sbc	r19, r1
     4cc:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <alarm_time+0x1>
     4d0:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <alarm_time>
     4d4:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <alarm_time>
     4d8:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <alarm_time+0x1>
     4dc:	2c 59       	subi	r18, 0x9C	; 156
     4de:	3f 4f       	sbci	r19, 0xFF	; 255
     4e0:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <alarm_time+0x1>
     4e4:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <alarm_time>
     4e8:	ae cf       	rjmp	.-164    	; 0x446 <alarm_bound_12+0x36>

000004ea <time_bound_24>:
/********************************************************************
 *				time_bound_24
 * used to bound the correct time when wanting to change the real time 
 * with encoders
 ********************************************************************/
void time_bound_24(void){
     4ea:	08 95       	ret

000004ec <time_bound_12>:
 *				time_bound_12
 * used to bound the correct time when wanting to change the real time 
 * with encoders
 ********************************************************************/
void time_bound_12(void){
int hours = time/100;  // convert integer time into hours
     4ec:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     4f0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     4f4:	64 e6       	ldi	r22, 0x64	; 100
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	0e 94 90 0b 	call	0x1720	; 0x1720 <__divmodhi4>
int minutes = time - (hours*100); // convert the integer time into minutes
     4fc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     500:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     504:	4c e9       	ldi	r20, 0x9C	; 156
     506:	46 03       	mulsu	r20, r22
     508:	90 01       	movw	r18, r0
     50a:	47 9f       	mul	r20, r23
     50c:	30 0d       	add	r19, r0
     50e:	11 24       	eor	r1, r1
     510:	82 0f       	add	r24, r18
     512:	93 1f       	adc	r25, r19

if(minutes == 99){
     514:	83 36       	cpi	r24, 0x63	; 99
     516:	91 05       	cpc	r25, r1
     518:	09 f4       	brne	.+2      	; 0x51c <time_bound_12+0x30>
     51a:	40 c0       	rjmp	.+128    	; 0x59c <time_bound_12+0xb0>
	time -= 40;
	if(time == 59){time +=1200;} //FIX THE 100 TO 1259 BUG
	else{time+=100;}
} // decrement hours; ex (200 -> 159)
//bound the minutes from 0 to 60
if (minutes == 60){
     51c:	8c 33       	cpi	r24, 0x3C	; 60
     51e:	91 05       	cpc	r25, r1
     520:	41 f1       	breq	.+80     	; 0x572 <time_bound_12+0x86>

// bound the minutes from 60 to 0

//bound the hours from 12 to 1 and 1 to 12

if(hours > 12){time = 100;time += minutes;}
     522:	6d 30       	cpi	r22, 0x0D	; 13
     524:	71 05       	cpc	r23, r1
     526:	8c f0       	brlt	.+34     	; 0x54a <time_bound_12+0x5e>
     528:	24 e6       	ldi	r18, 0x64	; 100
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <time+0x1>
     530:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <time>
     534:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     538:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     53c:	82 0f       	add	r24, r18
     53e:	93 1f       	adc	r25, r19
     540:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     544:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
     548:	08 95       	ret
if(hours < 1){time = 1200;time += minutes;}
     54a:	16 16       	cp	r1, r22
     54c:	17 06       	cpc	r1, r23
     54e:	84 f0       	brlt	.+32     	; 0x570 <time_bound_12+0x84>
     550:	20 eb       	ldi	r18, 0xB0	; 176
     552:	34 e0       	ldi	r19, 0x04	; 4
     554:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <time+0x1>
     558:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <time>
     55c:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     560:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     564:	82 0f       	add	r24, r18
     566:	93 1f       	adc	r25, r19
     568:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     56c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
     570:	08 95       	ret
	if(time == 59){time +=1200;} //FIX THE 100 TO 1259 BUG
	else{time+=100;}
} // decrement hours; ex (200 -> 159)
//bound the minutes from 0 to 60
if (minutes == 60){
	  time += 40;
     572:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     576:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     57a:	28 5d       	subi	r18, 0xD8	; 216
     57c:	3f 4f       	sbci	r19, 0xFF	; 255
     57e:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <time+0x1>
     582:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <time>
	  time -= 100;
     586:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     58a:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     58e:	24 56       	subi	r18, 0x64	; 100
     590:	31 09       	sbc	r19, r1
     592:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <time+0x1>
     596:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <time>
     59a:	c3 cf       	rjmp	.-122    	; 0x522 <time_bound_12+0x36>
void time_bound_12(void){
int hours = time/100;  // convert integer time into hours
int minutes = time - (hours*100); // convert the integer time into minutes

if(minutes == 99){
	time -= 40;
     59c:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     5a0:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     5a4:	28 52       	subi	r18, 0x28	; 40
     5a6:	31 09       	sbc	r19, r1
     5a8:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <time+0x1>
     5ac:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <time>
	if(time == 59){time +=1200;} //FIX THE 100 TO 1259 BUG
     5b0:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     5b4:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     5b8:	2b 33       	cpi	r18, 0x3B	; 59
     5ba:	31 05       	cpc	r19, r1
     5bc:	59 f0       	breq	.+22     	; 0x5d4 <time_bound_12+0xe8>
	else{time+=100;}
     5be:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     5c2:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     5c6:	2c 59       	subi	r18, 0x9C	; 156
     5c8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ca:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <time+0x1>
     5ce:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <time>
     5d2:	a7 cf       	rjmp	.-178    	; 0x522 <time_bound_12+0x36>
int hours = time/100;  // convert integer time into hours
int minutes = time - (hours*100); // convert the integer time into minutes

if(minutes == 99){
	time -= 40;
	if(time == 59){time +=1200;} //FIX THE 100 TO 1259 BUG
     5d4:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     5d8:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     5dc:	20 55       	subi	r18, 0x50	; 80
     5de:	3b 4f       	sbci	r19, 0xFB	; 251
     5e0:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <time+0x1>
     5e4:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <time>
     5e8:	9c cf       	rjmp	.-200    	; 0x522 <time_bound_12+0x36>

000005ea <time_tracker_12>:
if(hours < 1){time = 1200;time += minutes;}
}
/***************************************************************
/				time_tracker_12
****************************************************************/
void time_tracker_12(void){
     5ea:	1f 93       	push	r17
int hours = time/100;
     5ec:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     5f0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     5f4:	64 e6       	ldi	r22, 0x64	; 100
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	0e 94 90 0b 	call	0x1720	; 0x1720 <__divmodhi4>
     5fc:	9b 01       	movw	r18, r22
int minutes = time - (hours*100);
     5fe:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     602:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     606:	1c e9       	ldi	r17, 0x9C	; 156
     608:	16 03       	mulsu	r17, r22
     60a:	a0 01       	movw	r20, r0
     60c:	17 9f       	mul	r17, r23
     60e:	50 0d       	add	r21, r0
     610:	11 24       	eor	r1, r1
     612:	84 0f       	add	r24, r20
     614:	95 1f       	adc	r25, r21
	//if 60 seconds has been reached then increase the minutes by one
	if(seconds > 59){
     616:	40 91 34 01 	lds	r20, 0x0134	; 0x800134 <seconds>
     61a:	50 91 35 01 	lds	r21, 0x0135	; 0x800135 <seconds+0x1>
     61e:	4c 33       	cpi	r20, 0x3C	; 60
     620:	51 05       	cpc	r21, r1
     622:	74 f0       	brlt	.+28     	; 0x640 <time_tracker_12+0x56>
		time++; // increment minutes 
     624:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <time>
     628:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <time+0x1>
     62c:	4f 5f       	subi	r20, 0xFF	; 255
     62e:	5f 4f       	sbci	r21, 0xFF	; 255
     630:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <time+0x1>
     634:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <time>
		seconds = 0; // reset seconds
     638:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <seconds+0x1>
     63c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <seconds>
	}
		//increment hours if 60 minutes has passed
	if(minutes > 59){ 
     640:	cc 97       	sbiw	r24, 0x3c	; 60
     642:	64 f0       	brlt	.+24     	; 0x65c <time_tracker_12+0x72>
	time += 40; // increment the time ex (160 -> 200)
     644:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     648:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     64c:	88 96       	adiw	r24, 0x28	; 40
     64e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     652:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
	hours++;
     656:	9b 01       	movw	r18, r22
     658:	2f 5f       	subi	r18, 0xFF	; 255
     65a:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	
	if(hours > 12){ time = 100;} // reset hours to 1 o'clock
     65c:	2d 30       	cpi	r18, 0x0D	; 13
     65e:	31 05       	cpc	r19, r1
     660:	34 f0       	brlt	.+12     	; 0x66e <time_tracker_12+0x84>
     662:	84 e6       	ldi	r24, 0x64	; 100
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     66a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
//bound the hours from 12 to 1 and 1 to 12

if(hours > 12){time = 100;}
if(hours < 1){time = 1200;}
*/
}
     66e:	1f 91       	pop	r17
     670:	08 95       	ret

00000672 <time_tracker_24>:
/***************************************************************
/				time_tracker_24
****************************************************************/
void time_tracker_24(int sec, int min){
     672:	08 95       	ret

00000674 <update_EN_alarm>:
/********************************************************************
 *				update_encoder_alarm
 ********************************************************************/
void update_EN_alarm(int val_rot){
//changes the alarm time without affecting real time
	if(val_rot == 1){ alarm_time += (100*incr_alarm);} //if rotating to the right for left encoder then increment 
     674:	81 30       	cpi	r24, 0x01	; 1
     676:	91 05       	cpc	r25, r1
     678:	61 f1       	breq	.+88     	; 0x6d2 <update_EN_alarm+0x5e>
	else if(val_rot ==0){alarm_time -= (100*incr_alarm);}//if rotating to the left for left encoder then decrement
     67a:	00 97       	sbiw	r24, 0x00	; 0
     67c:	31 f0       	breq	.+12     	; 0x68a <update_EN_alarm+0x16>
	else if(val_rot == 2){alarm_time -= incr_alarm;} // if rotating to the left for right encoder then decrement
     67e:	82 30       	cpi	r24, 0x02	; 2
     680:	91 05       	cpc	r25, r1
     682:	e1 f1       	breq	.+120    	; 0x6fc <update_EN_alarm+0x88>
	else if(val_rot == 3){alarm_time += incr_alarm;}// if rotatiing to the right for right encoder then increment
     684:	03 97       	sbiw	r24, 0x03	; 3
     686:	b1 f0       	breq	.+44     	; 0x6b4 <update_EN_alarm+0x40>
     688:	08 95       	ret
 *				update_encoder_alarm
 ********************************************************************/
void update_EN_alarm(int val_rot){
//changes the alarm time without affecting real time
	if(val_rot == 1){ alarm_time += (100*incr_alarm);} //if rotating to the right for left encoder then increment 
	else if(val_rot ==0){alarm_time -= (100*incr_alarm);}//if rotating to the left for left encoder then decrement
     68a:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <incr_alarm>
     68e:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <incr_alarm+0x1>
     692:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <alarm_time>
     696:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <alarm_time+0x1>
     69a:	64 e6       	ldi	r22, 0x64	; 100
     69c:	64 9f       	mul	r22, r20
     69e:	90 01       	movw	r18, r0
     6a0:	65 9f       	mul	r22, r21
     6a2:	30 0d       	add	r19, r0
     6a4:	11 24       	eor	r1, r1
     6a6:	82 1b       	sub	r24, r18
     6a8:	93 0b       	sbc	r25, r19
     6aa:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <alarm_time+0x1>
     6ae:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <alarm_time>
     6b2:	08 95       	ret
	else if(val_rot == 2){alarm_time -= incr_alarm;} // if rotating to the left for right encoder then decrement
	else if(val_rot == 3){alarm_time += incr_alarm;}// if rotatiing to the right for right encoder then increment
     6b4:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <incr_alarm>
     6b8:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <incr_alarm+0x1>
     6bc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <alarm_time>
     6c0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <alarm_time+0x1>
     6c4:	82 0f       	add	r24, r18
     6c6:	93 1f       	adc	r25, r19
     6c8:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <alarm_time+0x1>
     6cc:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <alarm_time>
     6d0:	08 95       	ret
/********************************************************************
 *				update_encoder_alarm
 ********************************************************************/
void update_EN_alarm(int val_rot){
//changes the alarm time without affecting real time
	if(val_rot == 1){ alarm_time += (100*incr_alarm);} //if rotating to the right for left encoder then increment 
     6d2:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <incr_alarm>
     6d6:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <incr_alarm+0x1>
     6da:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <alarm_time>
     6de:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <alarm_time+0x1>
     6e2:	64 e6       	ldi	r22, 0x64	; 100
     6e4:	64 9f       	mul	r22, r20
     6e6:	90 01       	movw	r18, r0
     6e8:	65 9f       	mul	r22, r21
     6ea:	30 0d       	add	r19, r0
     6ec:	11 24       	eor	r1, r1
     6ee:	82 0f       	add	r24, r18
     6f0:	93 1f       	adc	r25, r19
     6f2:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <alarm_time+0x1>
     6f6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <alarm_time>
     6fa:	08 95       	ret
	else if(val_rot ==0){alarm_time -= (100*incr_alarm);}//if rotating to the left for left encoder then decrement
	else if(val_rot == 2){alarm_time -= incr_alarm;} // if rotating to the left for right encoder then decrement
     6fc:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <incr_alarm>
     700:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <incr_alarm+0x1>
     704:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <alarm_time>
     708:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <alarm_time+0x1>
     70c:	82 1b       	sub	r24, r18
     70e:	93 0b       	sbc	r25, r19
     710:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <alarm_time+0x1>
     714:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <alarm_time>
     718:	08 95       	ret

0000071a <__vector_15>:
//	else{OCR2 = 200;} // brighten the light otherwise
	OCR2 = adc_data;
}

// TIMER0 overflowIS
ISR( TIMER0_COMP_vect ) {
     71a:	1f 92       	push	r1
     71c:	0f 92       	push	r0
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	0f 92       	push	r0
     722:	11 24       	eor	r1, r1
     724:	0b b6       	in	r0, 0x3b	; 59
     726:	0f 92       	push	r0
     728:	ef 92       	push	r14
     72a:	ff 92       	push	r15
     72c:	0f 93       	push	r16
     72e:	1f 93       	push	r17
     730:	2f 93       	push	r18
     732:	3f 93       	push	r19
     734:	4f 93       	push	r20
     736:	5f 93       	push	r21
     738:	6f 93       	push	r22
     73a:	7f 93       	push	r23
     73c:	8f 93       	push	r24
     73e:	9f 93       	push	r25
     740:	af 93       	push	r26
     742:	bf 93       	push	r27
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	ef 93       	push	r30
     74a:	ff 93       	push	r31

//save the states of PORTA and PORTB
saveA = PORTA;
     74c:	8b b3       	in	r24, 0x1b	; 27
     74e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <saveA>
saveB = PORTB;
     752:	88 b3       	in	r24, 0x18	; 24
     754:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <saveB>

alarm_compare();
     758:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <alarm_compare>

static uint16_t timer = 0;  //hold value of count between interrupts
timer++;  //extend counter
     75c:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <timer.1994>
     760:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <timer.1994+0x1>
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <timer.1994+0x1>
     76a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <timer.1994>

if((timer% 64) == 0){ // turn off for half a second 
     76e:	9c 01       	movw	r18, r24
     770:	2f 73       	andi	r18, 0x3F	; 63
     772:	33 27       	eor	r19, r19
     774:	23 2b       	or	r18, r19
     776:	19 f4       	brne	.+6      	; 0x77e <__vector_15+0x64>
	segment_data[2] = 0x07; //turn off colon
     778:	27 e0       	ldi	r18, 0x07	; 7
     77a:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <segment_data+0x2>
} 

if((timer% 512) == 0){
     77e:	91 70       	andi	r25, 0x01	; 1
     780:	89 2b       	or	r24, r25
     782:	89 f4       	brne	.+34     	; 0x7a6 <__vector_15+0x8c>
	segment_data[2] = 0x0C; //turn on colon
     784:	8c e0       	ldi	r24, 0x0C	; 12
     786:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <segment_data+0x2>
 	seconds+= seconds_holder; //increment seconds
     78a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <seconds_holder>
     78e:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <seconds_holder+0x1>
     792:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <seconds>
     796:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <seconds+0x1>
     79a:	82 0f       	add	r24, r18
     79c:	93 1f       	adc	r25, r19
     79e:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <seconds+0x1>
     7a2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <seconds>
} // test, FASTER



PORTB = 0x50;  //enable tristate buffer for pushbutton switches
     7a6:	80 e5       	ldi	r24, 0x50	; 80
     7a8:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7aa:	8f e8       	ldi	r24, 0x8F	; 143
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	01 97       	sbiw	r24, 0x01	; 1
     7b0:	f1 f7       	brne	.-4      	; 0x7ae <__vector_15+0x94>
     7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <__vector_15+0x9a>
     7b4:	00 00       	nop
//*******************************************************************************
uint8_t chk_buttons(int button) {
static uint16_t states[8] = {0}; // an array to store the states of all buttons on the button board

// states[0] corresponds to S1 on the board and states[7] corresponds to S8
states[button] = (states[button]<<1 | (! bit_is_clear(PINA, button)) | 0xE000); //first extract the bit that corresponds to the button
     7b6:	29 b3       	in	r18, 0x19	; 25
     7b8:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <states.1954>
     7bc:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <states.1954+0x1>
     7c0:	88 0f       	add	r24, r24
     7c2:	99 1f       	adc	r25, r25
     7c4:	90 6e       	ori	r25, 0xE0	; 224
     7c6:	20 fb       	bst	r18, 0
     7c8:	ee 24       	eor	r14, r14
     7ca:	e0 f8       	bld	r14, 0
     7cc:	f1 2c       	mov	r15, r1
     7ce:	e8 2a       	or	r14, r24
     7d0:	f9 2a       	or	r15, r25
     7d2:	f0 92 48 01 	sts	0x0148, r15	; 0x800148 <states.1954+0x1>
     7d6:	e0 92 47 01 	sts	0x0147, r14	; 0x800147 <states.1954>
//Check if button is pressed
if (states[button] == 0xF000) {return TRUE;} 
     7da:	e1 14       	cp	r14, r1
     7dc:	90 ef       	ldi	r25, 0xF0	; 240
     7de:	f9 06       	cpc	r15, r25
     7e0:	31 f4       	brne	.+12     	; 0x7ee <__vector_15+0xd4>

PORTB = 0x50;  //enable tristate buffer for pushbutton switches
_delay_ms(.1);//need a delay to active buffer


if(chk_buttons(0)){mode ^= 1<<6;}//sets alarm
     7e2:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <mode>
     7e6:	80 e4       	ldi	r24, 0x40	; 64
     7e8:	89 27       	eor	r24, r25
     7ea:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <mode>
//*******************************************************************************
uint8_t chk_buttons(int button) {
static uint16_t states[8] = {0}; // an array to store the states of all buttons on the button board

// states[0] corresponds to S1 on the board and states[7] corresponds to S8
states[button] = (states[button]<<1 | (! bit_is_clear(PINA, button)) | 0xE000); //first extract the bit that corresponds to the button
     7ee:	29 b3       	in	r18, 0x19	; 25
     7f0:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <states.1954+0x6>
     7f4:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <states.1954+0x7>
     7f8:	88 0f       	add	r24, r24
     7fa:	99 1f       	adc	r25, r25
     7fc:	90 6e       	ori	r25, 0xE0	; 224
     7fe:	23 fb       	bst	r18, 3
     800:	00 27       	eor	r16, r16
     802:	00 f9       	bld	r16, 0
     804:	10 e0       	ldi	r17, 0x00	; 0
     806:	80 2b       	or	r24, r16
     808:	91 2b       	or	r25, r17
     80a:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <states.1954+0x7>
     80e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <states.1954+0x6>
//Check if button is pressed
if (states[button] == 0xF000) {return TRUE;} 
     812:	81 15       	cp	r24, r1
     814:	90 4f       	sbci	r25, 0xF0	; 240
     816:	31 f4       	brne	.+12     	; 0x824 <__vector_15+0x10a>
_delay_ms(.1);//need a delay to active buffer


if(chk_buttons(0)){mode ^= 1<<6;}//sets alarm

if (chk_buttons(3)){mode ^= 1 << 2;}//snooze alarm
     818:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <mode>
     81c:	84 e0       	ldi	r24, 0x04	; 4
     81e:	89 27       	eor	r24, r25
     820:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <mode>
//*******************************************************************************
uint8_t chk_buttons(int button) {
static uint16_t states[8] = {0}; // an array to store the states of all buttons on the button board

// states[0] corresponds to S1 on the board and states[7] corresponds to S8
states[button] = (states[button]<<1 | (! bit_is_clear(PINA, button)) | 0xE000); //first extract the bit that corresponds to the button
     824:	29 b3       	in	r18, 0x19	; 25
     826:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <states.1954+0x4>
     82a:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <states.1954+0x5>
     82e:	88 0f       	add	r24, r24
     830:	99 1f       	adc	r25, r25
     832:	90 6e       	ori	r25, 0xE0	; 224
     834:	22 fb       	bst	r18, 2
     836:	22 27       	eor	r18, r18
     838:	20 f9       	bld	r18, 0
     83a:	c2 2f       	mov	r28, r18
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	d2 2f       	mov	r29, r18
     840:	8c 2b       	or	r24, r28
     842:	9d 2b       	or	r25, r29
     844:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <states.1954+0x5>
     848:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <states.1954+0x4>
//Check if button is pressed
if (states[button] == 0xF000) {return TRUE;} 
     84c:	81 15       	cp	r24, r1
     84e:	90 4f       	sbci	r25, 0xF0	; 240
     850:	31 f4       	brne	.+12     	; 0x85e <__vector_15+0x144>


if(chk_buttons(0)){mode ^= 1<<6;}//sets alarm

if (chk_buttons(3)){mode ^= 1 << 2;}//snooze alarm
if (chk_buttons(2)){mode ^= 1 << 5;}//disable alarm
     852:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <mode>
     856:	80 e2       	ldi	r24, 0x20	; 32
     858:	89 27       	eor	r24, r25
     85a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <mode>
//*******************************************************************************
uint8_t chk_buttons(int button) {
static uint16_t states[8] = {0}; // an array to store the states of all buttons on the button board

// states[0] corresponds to S1 on the board and states[7] corresponds to S8
states[button] = (states[button]<<1 | (! bit_is_clear(PINA, button)) | 0xE000); //first extract the bit that corresponds to the button
     85e:	99 b3       	in	r25, 0x19	; 25
     860:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <states.1954+0xe>
     864:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <states.1954+0xf>
     868:	22 0f       	add	r18, r18
     86a:	33 1f       	adc	r19, r19
     86c:	30 6e       	ori	r19, 0xE0	; 224
     86e:	89 2f       	mov	r24, r25
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	88 0f       	add	r24, r24
     874:	89 2f       	mov	r24, r25
     876:	88 1f       	adc	r24, r24
     878:	99 0b       	sbc	r25, r25
     87a:	82 2b       	or	r24, r18
     87c:	93 2b       	or	r25, r19
     87e:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <states.1954+0xf>
     882:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <states.1954+0xe>
//Check if button is pressed
if (states[button] == 0xF000) {return TRUE;} 
     886:	81 15       	cp	r24, r1
     888:	90 4f       	sbci	r25, 0xF0	; 240
     88a:	31 f4       	brne	.+12     	; 0x898 <__vector_15+0x17e>

if(chk_buttons(0)){mode ^= 1<<6;}//sets alarm

if (chk_buttons(3)){mode ^= 1 << 2;}//snooze alarm
if (chk_buttons(2)){mode ^= 1 << 5;}//disable alarm
if (chk_buttons(7)){mode ^= 1 << 3;} //sets time
     88c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <mode>
     890:	88 e0       	ldi	r24, 0x08	; 8
     892:	89 27       	eor	r24, r25
     894:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <mode>
	
PORTB = 0x70;//disable tristate
     898:	80 e7       	ldi	r24, 0x70	; 112
     89a:	88 bb       	out	0x18, r24	; 24
 *				read_SPI
 ********************************************************************/
void read_SPI(void){

//shift clock register
PORTE &= ~(1 << PE6);//falling edge
     89c:	1e 98       	cbi	0x03, 6	; 3
PORTE |= (1 << PE6); //rising edge
     89e:	1e 9a       	sbi	0x03, 6	; 3
SPDR = 0x20; //send junk data to read in from SPI
     8a0:	80 e2       	ldi	r24, 0x20	; 32
     8a2:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){} // read data in
     8a4:	77 9b       	sbis	0x0e, 7	; 14
     8a6:	fe cf       	rjmp	.-4      	; 0x8a4 <__vector_15+0x18a>
raw_encoder_val = SPDR;//save the data
     8a8:	8f b1       	in	r24, 0x0f	; 15
     8aa:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <raw_encoder_val>
	
PORTB = 0x70;//disable tristate


read_SPI();		//read in from the SPI
read = process_EN(); 	// decrypt the data from the SPI and determine the encoder movement
     8ae:	0e 94 86 00 	call	0x10c	; 0x10c <process_EN>
     8b2:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <read+0x1>
     8b6:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <read>
update_EN(read);	// increase the time with the encoder movement 
     8ba:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <read>
     8be:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <read+0x1>
     8c2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <update_EN>
update_EN_alarm(read);	// increase the alarm_time with the encoder movement
     8c6:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <read>
     8ca:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <read+0x1>
     8ce:	0e 94 3a 03 	call	0x674	; 0x674 <update_EN_alarm>

write_SPI(mode); 	// write to the bar graph
     8d2:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <mode>
/********************************************************************
 *				write_SPI
 ********************************************************************/
void write_SPI(uint8_t value){

SPDR = value; // take in which mode it is currently on and display it 
     8d6:	8f b9       	out	0x0f, r24	; 15
	while (bit_is_clear(SPSR,SPIF)) {} //wait till data is sent out
     8d8:	77 9b       	sbis	0x0e, 7	; 14
     8da:	fe cf       	rjmp	.-4      	; 0x8d8 <__vector_15+0x1be>
PORTD |= (1 << PD2); //SEND data to bargraph, rising edge
     8dc:	92 9a       	sbi	0x12, 2	; 18
PORTD &= ~(1<<PD2); // falling edge
     8de:	92 98       	cbi	0x12, 2	; 18
update_EN_alarm(read);	// increase the alarm_time with the encoder movement

write_SPI(mode); 	// write to the bar graph

//restore the state when leaving the ISR
PORTA = saveA;
     8e0:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <saveA>
     8e4:	8b bb       	out	0x1b, r24	; 27
PORTB = saveB;
     8e6:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <saveB>
     8ea:	88 bb       	out	0x18, r24	; 24

DDRA = 0xFF; 		//set PORTA to all outputs
     8ec:	8f ef       	ldi	r24, 0xFF	; 255
     8ee:	8a bb       	out	0x1a, r24	; 26


}//end of ISR Timer0
     8f0:	ff 91       	pop	r31
     8f2:	ef 91       	pop	r30
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	bf 91       	pop	r27
     8fa:	af 91       	pop	r26
     8fc:	9f 91       	pop	r25
     8fe:	8f 91       	pop	r24
     900:	7f 91       	pop	r23
     902:	6f 91       	pop	r22
     904:	5f 91       	pop	r21
     906:	4f 91       	pop	r20
     908:	3f 91       	pop	r19
     90a:	2f 91       	pop	r18
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	ff 90       	pop	r15
     912:	ef 90       	pop	r14
     914:	0f 90       	pop	r0
     916:	0b be       	out	0x3b, r0	; 59
     918:	0f 90       	pop	r0
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	0f 90       	pop	r0
     91e:	1f 90       	pop	r1
     920:	18 95       	reti

00000922 <digit_display>:
 *				digit_display
 **********************************************************************/
void digit_display(void){
int index;

PORTB = 0x00;
     922:	18 ba       	out	0x18, r1	; 24
     924:	ed e0       	ldi	r30, 0x0D	; 13
     926:	f1 e0       	ldi	r31, 0x01	; 1

	for(index = 0; index < 5; index++){
		PORTA = segment_data[index]; //send 7 segment code to LED segments
     928:	81 91       	ld	r24, Z+
     92a:	8b bb       	out	0x1b, r24	; 27
     92c:	8f e6       	ldi	r24, 0x6F	; 111
     92e:	97 e1       	ldi	r25, 0x17	; 23
     930:	01 97       	sbiw	r24, 0x01	; 1
     932:	f1 f7       	brne	.-4      	; 0x930 <digit_display+0xe>
     934:	00 c0       	rjmp	.+0      	; 0x936 <digit_display+0x14>
     936:	00 00       	nop
		_delay_ms(1.5);
		PORTB += 0x10; // within 4 digits for the hex value
     938:	88 b3       	in	r24, 0x18	; 24
     93a:	80 5f       	subi	r24, 0xF0	; 240
     93c:	88 bb       	out	0x18, r24	; 24
void digit_display(void){
int index;

PORTB = 0x00;

	for(index = 0; index < 5; index++){
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	e2 31       	cpi	r30, 0x12	; 18
     942:	f9 07       	cpc	r31, r25
     944:	89 f7       	brne	.-30     	; 0x928 <digit_display+0x6>
		PORTA = segment_data[index]; //send 7 segment code to LED segments
		_delay_ms(1.5);
		PORTB += 0x10; // within 4 digits for the hex value
	}
}
     946:	08 95       	ret

00000948 <spi_init>:

/**********************************************************************
 *				spi_init
 **********************************************************************/
void spi_init(void){
DDRB |= ( (1 << PB2) | ( 1<< PB1) | (1<<PB0) ); //mosi and serial clock
     948:	87 b3       	in	r24, 0x17	; 23
     94a:	87 60       	ori	r24, 0x07	; 7
     94c:	87 bb       	out	0x17, r24	; 23
SPCR |= ( (1 << MSTR) | (1 << SPE) ); //master mode, SPI enabled, clk low on idle, leading edge sample
     94e:	8d b1       	in	r24, 0x0d	; 13
     950:	80 65       	ori	r24, 0x50	; 80
     952:	8d b9       	out	0x0d, r24	; 13
SPSR |= 1 << SPI2X;
     954:	70 9a       	sbi	0x0e, 0	; 14

DDRB |= 0xF0; // set PORTB 4-7 bits as outputs
     956:	87 b3       	in	r24, 0x17	; 23
     958:	80 6f       	ori	r24, 0xF0	; 240
     95a:	87 bb       	out	0x17, r24	; 23
DDRA = 0x03; // set PORTA 6-7 bits as inputs
     95c:	83 e0       	ldi	r24, 0x03	; 3
     95e:	8a bb       	out	0x1a, r24	; 26
DDRD = (1 << PD2); // set PD2 as output
     960:	84 e0       	ldi	r24, 0x04	; 4
     962:	81 bb       	out	0x11, r24	; 17
DDRE = 0xFF;// set PORTE to all outputs
     964:	8f ef       	ldi	r24, 0xFF	; 255
     966:	82 b9       	out	0x02, r24	; 2
     968:	08 95       	ret

0000096a <volume_init>:

/**********************************************************************
 *				volume_init
 **********************************************************************/
void volume_init(void){
TCCR3A = (1 << COM3A1 | (1 << WGM31) ); //normal operation w/ OC3A is disconnected
     96a:	82 e8       	ldi	r24, 0x82	; 130
     96c:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
TCCR3B |= (  (1 << CS30) | ( 1 << WGM32) | (1 << WGM33) ); //fast pwm 
     970:	ea e8       	ldi	r30, 0x8A	; 138
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	80 81       	ld	r24, Z
     976:	89 61       	ori	r24, 0x19	; 25
     978:	80 83       	st	Z, r24
ICR3 = 10; // Set overflow top 
     97a:	8a e0       	ldi	r24, 0x0A	; 10
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     982:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
OCR3A = 0; // set compare match
     986:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     98a:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     98e:	08 95       	ret

00000990 <tone_init>:

/**********************************************************************
 *				tone_init
 **********************************************************************/
void tone_init(void){
DDRC = 0xFF; // set all of PORTC as outputs
     990:	8f ef       	ldi	r24, 0xFF	; 255
     992:	84 bb       	out	0x14, r24	; 20
TCCR1A = 0x00; // normal operation w/ OC1A is disconnected
     994:	1f bc       	out	0x2f, r1	; 47
TIMSK |= 1 << OCIE1A; //output compare enable for timercounter1A
     996:	87 b7       	in	r24, 0x37	; 55
     998:	80 61       	ori	r24, 0x10	; 16
     99a:	87 bf       	out	0x37, r24	; 55
OCR1A = 3999; // 4kHz and triggers ISR
     99c:	8f e9       	ldi	r24, 0x9F	; 159
     99e:	9f e0       	ldi	r25, 0x0F	; 15
     9a0:	9b bd       	out	0x2b, r25	; 43
     9a2:	8a bd       	out	0x2a, r24	; 42
//clk is not set
TCCR1B |= (1 << WGM12); // CTC mode, clear with OCR and no prescaling
     9a4:	8e b5       	in	r24, 0x2e	; 46
     9a6:	88 60       	ori	r24, 0x08	; 8
     9a8:	8e bd       	out	0x2e, r24	; 46
     9aa:	08 95       	ret

000009ac <clock_init>:

/**********************************************************************
 *				clock_init
 **********************************************************************/
void clock_init(void){
ASSR   |=  1<<AS0; //ext osc TOSC in 32kHz 
     9ac:	80 b7       	in	r24, 0x30	; 48
     9ae:	88 60       	ori	r24, 0x08	; 8
     9b0:	80 bf       	out	0x30, r24	; 48
TIMSK |= 1 << OCIE0; //interrupt flag on compare register 
     9b2:	87 b7       	in	r24, 0x37	; 55
     9b4:	82 60       	ori	r24, 0x02	; 2
     9b6:	87 bf       	out	0x37, r24	; 55
TCCR0 |= ((1 << WGM01) | (1 << CS00)); //CTC mode, with clk/no pre-scaling
     9b8:	83 b7       	in	r24, 0x33	; 51
     9ba:	89 60       	ori	r24, 0x09	; 9
     9bc:	83 bf       	out	0x33, r24	; 51
OCR0 = 127; // Set top 
     9be:	8f e7       	ldi	r24, 0x7F	; 127
     9c0:	81 bf       	out	0x31, r24	; 49
     9c2:	08 95       	ret

000009c4 <dimming_init>:

/**********************************************************************
 *				dimming_init
 **********************************************************************/
void dimming_init(void){
TCCR2 |= (1 << WGM21) | ( 1 << WGM20) | (1 << COM21) | ( 1 << CS20); // no prescale, clear on OC2 match, fast pwm mode
     9c4:	85 b5       	in	r24, 0x25	; 37
     9c6:	89 66       	ori	r24, 0x69	; 105
     9c8:	85 bd       	out	0x25, r24	; 37
TIMSK |= (1 << OCIE2); // Compare match interrupt enable timer/counter0
     9ca:	87 b7       	in	r24, 0x37	; 55
     9cc:	80 68       	ori	r24, 0x80	; 128
     9ce:	87 bf       	out	0x37, r24	; 55
TCNT2 = 0; //set count at 0
     9d0:	14 bc       	out	0x24, r1	; 36
     9d2:	08 95       	ret

000009d4 <ADC_init>:

/**********************************************************************
 *				ADC_init
 **********************************************************************/
void ADC_init(void){
DDRF  &= ~(_BV(DDF7)); //make port F bit 7 the ADC input  
     9d4:	e1 e6       	ldi	r30, 0x61	; 97
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	80 81       	ld	r24, Z
     9da:	8f 77       	andi	r24, 0x7F	; 127
     9dc:	80 83       	st	Z, r24
PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
     9de:	e2 e6       	ldi	r30, 0x62	; 98
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 81       	ld	r24, Z
     9e4:	8f 77       	andi	r24, 0x7F	; 127
     9e6:	80 83       	st	Z, r24
	
ADMUX = (1 << REFS0) | (1 << ADLAR) | 0x07; // reference to AVCC(5v), left adjusted (only reading  8bit), and channel 7
     9e8:	87 e6       	ldi	r24, 0x67	; 103
     9ea:	87 b9       	out	0x07, r24	; 7
//ADC enabled, single conversion, division factor is 128
ADCSRA = (1 << ADEN) | (1 << ADPS2) | ( 1 << ADPS1) | ( 1 << ADPS0) ; 
     9ec:	87 e8       	ldi	r24, 0x87	; 135
     9ee:	86 b9       	out	0x06, r24	; 6
     9f0:	08 95       	ret

000009f2 <segsum>:
}


////////////////////////////////////////////////////////////////////////////////////////////
void segsum(uint16_t sum) {
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	ac 01       	movw	r20, r24
//initialzing the local variables of the function
int digit_index = 0;
int temp = 0;
int i;

if(sum == 0){segment_data[digit_index] = dec_to_7seg[0];};
     9f8:	00 97       	sbiw	r24, 0x00	; 0
     9fa:	91 f4       	brne	.+36     	; 0xa20 <segsum+0x2e>
     9fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a00:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <segment_data>
     a04:	e0 e0       	ldi	r30, 0x00	; 0
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__DATA_REGION_ORIGIN__+0xa>
     a0c:	e3 5f       	subi	r30, 0xF3	; 243
     a0e:	fe 4f       	sbci	r31, 0xFE	; 254
        //segment_data[2] = dec_to_7seg[11]; //replace the colon with a blank colon

//need to turn off the rest of the digits
	if (digit_index < 5) //if there are less digits than segment numbers
	{
        	for (i = digit_index; i < 5; i++){segment_data[i] = dec_to_7seg[10];} //blank them out
     a10:	81 93       	st	Z+, r24
     a12:	31 e0       	ldi	r19, 0x01	; 1
     a14:	e2 31       	cpi	r30, 0x12	; 18
     a16:	f3 07       	cpc	r31, r19
     a18:	d9 f7       	brne	.-10     	; 0xa10 <segsum+0x1e>
	}
}
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	08 95       	ret
int i;

if(sum == 0){segment_data[digit_index] = dec_to_7seg[0];};

        while(sum > 0){
                temp = sum % 10; // isolate to a single digit
     a20:	9c 01       	movw	r18, r24
     a22:	ad ec       	ldi	r26, 0xCD	; 205
     a24:	bc ec       	ldi	r27, 0xCC	; 204
     a26:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__umulhisi3>
     a2a:	96 95       	lsr	r25
     a2c:	87 95       	ror	r24
     a2e:	96 95       	lsr	r25
     a30:	87 95       	ror	r24
     a32:	96 95       	lsr	r25
     a34:	87 95       	ror	r24
     a36:	9c 01       	movw	r18, r24
     a38:	22 0f       	add	r18, r18
     a3a:	33 1f       	adc	r19, r19
     a3c:	88 0f       	add	r24, r24
     a3e:	99 1f       	adc	r25, r25
     a40:	88 0f       	add	r24, r24
     a42:	99 1f       	adc	r25, r25
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	82 0f       	add	r24, r18
     a4a:	93 1f       	adc	r25, r19
     a4c:	9a 01       	movw	r18, r20
     a4e:	28 1b       	sub	r18, r24
     a50:	39 0b       	sbc	r19, r25
     a52:	c9 01       	movw	r24, r18
     a54:	e0 e0       	ldi	r30, 0x00	; 0
     a56:	f0 e0       	ldi	r31, 0x00	; 0
                if(digit_index == 2){digit_index++;};
                segment_data[digit_index] = dec_to_7seg[temp]; //use the digit to store the hexidecimal value to seg array
     a58:	df 01       	movw	r26, r30
     a5a:	a3 5f       	subi	r26, 0xF3	; 243
     a5c:	be 4f       	sbci	r27, 0xFE	; 254
     a5e:	ec 01       	movw	r28, r24
     a60:	c0 50       	subi	r28, 0x00	; 0
     a62:	df 4f       	sbci	r29, 0xFF	; 255
     a64:	88 81       	ld	r24, Y
     a66:	8c 93       	st	X, r24
                sum = sum/10; // continue to the next digit
     a68:	9a 01       	movw	r18, r20
     a6a:	ad ec       	ldi	r26, 0xCD	; 205
     a6c:	bc ec       	ldi	r27, 0xCC	; 204
     a6e:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__umulhisi3>
     a72:	ac 01       	movw	r20, r24
     a74:	56 95       	lsr	r21
     a76:	47 95       	ror	r20
     a78:	56 95       	lsr	r21
     a7a:	47 95       	ror	r20
     a7c:	56 95       	lsr	r21
     a7e:	47 95       	ror	r20
                digit_index++; // increase the digit index
     a80:	31 96       	adiw	r30, 0x01	; 1
int temp = 0;
int i;

if(sum == 0){segment_data[digit_index] = dec_to_7seg[0];};

        while(sum > 0){
     a82:	41 15       	cp	r20, r1
     a84:	51 05       	cpc	r21, r1
     a86:	01 f1       	breq	.+64     	; 0xac8 <segsum+0xd6>
                temp = sum % 10; // isolate to a single digit
     a88:	9a 01       	movw	r18, r20
     a8a:	ad ec       	ldi	r26, 0xCD	; 205
     a8c:	bc ec       	ldi	r27, 0xCC	; 204
     a8e:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__umulhisi3>
     a92:	96 95       	lsr	r25
     a94:	87 95       	ror	r24
     a96:	96 95       	lsr	r25
     a98:	87 95       	ror	r24
     a9a:	96 95       	lsr	r25
     a9c:	87 95       	ror	r24
     a9e:	9c 01       	movw	r18, r24
     aa0:	22 0f       	add	r18, r18
     aa2:	33 1f       	adc	r19, r19
     aa4:	88 0f       	add	r24, r24
     aa6:	99 1f       	adc	r25, r25
     aa8:	88 0f       	add	r24, r24
     aaa:	99 1f       	adc	r25, r25
     aac:	88 0f       	add	r24, r24
     aae:	99 1f       	adc	r25, r25
     ab0:	82 0f       	add	r24, r18
     ab2:	93 1f       	adc	r25, r19
     ab4:	9a 01       	movw	r18, r20
     ab6:	28 1b       	sub	r18, r24
     ab8:	39 0b       	sbc	r19, r25
     aba:	c9 01       	movw	r24, r18
                if(digit_index == 2){digit_index++;};
     abc:	e2 30       	cpi	r30, 0x02	; 2
     abe:	f1 05       	cpc	r31, r1
     ac0:	59 f6       	brne	.-106    	; 0xa58 <segsum+0x66>
     ac2:	e3 e0       	ldi	r30, 0x03	; 3
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	c8 cf       	rjmp	.-112    	; 0xa58 <segsum+0x66>
                digit_index++; // increase the digit index
        }
        //segment_data[2] = dec_to_7seg[11]; //replace the colon with a blank colon

//need to turn off the rest of the digits
	if (digit_index < 5) //if there are less digits than segment numbers
     ac8:	e5 30       	cpi	r30, 0x05	; 5
     aca:	f1 05       	cpc	r31, r1
     acc:	0c f4       	brge	.+2      	; 0xad0 <segsum+0xde>
     ace:	9c cf       	rjmp	.-200    	; 0xa08 <segsum+0x16>
	{
        	for (i = digit_index; i < 5; i++){segment_data[i] = dec_to_7seg[10];} //blank them out
	}
}
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	08 95       	ret

00000ad6 <send_lcd>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ad6:	91 e0       	ldi	r25, 0x01	; 1
     ad8:	81 11       	cpse	r24, r1
     ada:	01 c0       	rjmp	.+2      	; 0xade <send_lcd+0x8>
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ae0:	77 9b       	sbis	0x0e, 7	; 14
     ae2:	fe cf       	rjmp	.-4      	; 0xae0 <send_lcd+0xa>
  SPDR = byte;                        //send payload
     ae4:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ae6:	77 9b       	sbis	0x0e, 7	; 14
     ae8:	fe cf       	rjmp	.-4      	; 0xae6 <send_lcd+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     aea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     aee:	88 60       	ori	r24, 0x08	; 8
     af0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     af4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     af8:	87 7f       	andi	r24, 0xF7	; 247
     afa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     afe:	8f e9       	ldi	r24, 0x9F	; 159
     b00:	9f e0       	ldi	r25, 0x0F	; 15
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	f1 f7       	brne	.-4      	; 0xb02 <send_lcd+0x2c>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <send_lcd+0x32>
     b08:	00 00       	nop
     b0a:	08 95       	ret

00000b0c <refresh_lcd>:

void refresh_lcd(char lcd_string_array[]) {

    static uint8_t index=0;           // index into string array 

    SPDR = 0x01; //set SR for data
     b0c:	21 e0       	ldi	r18, 0x01	; 1
     b0e:	2f b9       	out	0x0f, r18	; 15
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
     b10:	77 9b       	sbis	0x0e, 7	; 14
     b12:	fe cf       	rjmp	.-4      	; 0xb10 <refresh_lcd+0x4>
    SPDR = lcd_string_array[index];
     b14:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <index.2091>
     b18:	fc 01       	movw	r30, r24
     b1a:	e2 0f       	add	r30, r18
     b1c:	f1 1d       	adc	r31, r1
     b1e:	80 81       	ld	r24, Z
     b20:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
     b22:	77 9b       	sbis	0x0e, 7	; 14
     b24:	fe cf       	rjmp	.-4      	; 0xb22 <refresh_lcd+0x16>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b26:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b2a:	88 60       	ori	r24, 0x08	; 8
     b2c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b30:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b34:	87 7f       	andi	r24, 0xF7	; 247
     b36:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    SPDR = 0x01; //set SR for data
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    SPDR = lcd_string_array[index];
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    strobe_lcd();                   //write into LCD
    index++;                        //increment to next character
     b3a:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <index.2091>
     b3e:	8f 5f       	subi	r24, 0xFF	; 255
     b40:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <index.2091>
    if(index == 16) {_delay_us(40); home_line2();}           //on to 2nd line, 1st position 
     b44:	80 31       	cpi	r24, 0x10	; 16
     b46:	09 f1       	breq	.+66     	; 0xb8a <refresh_lcd+0x7e>
    if(index == 32) {_delay_us(40); cursor_home(); index=0;} //back to 1st line, 1st position
     b48:	80 32       	cpi	r24, 0x20	; 32
     b4a:	09 f0       	breq	.+2      	; 0xb4e <refresh_lcd+0x42>
     b4c:	08 95       	ret
     b4e:	95 ed       	ldi	r25, 0xD5	; 213
     b50:	9a 95       	dec	r25
     b52:	f1 f7       	brne	.-4      	; 0xb50 <refresh_lcd+0x44>
     b54:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b56:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b58:	77 9b       	sbis	0x0e, 7	; 14
     b5a:	fe cf       	rjmp	.-4      	; 0xb58 <refresh_lcd+0x4c>
  SPDR = byte;                        //send payload
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b60:	77 9b       	sbis	0x0e, 7	; 14
     b62:	fe cf       	rjmp	.-4      	; 0xb60 <refresh_lcd+0x54>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b64:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b68:	88 60       	ori	r24, 0x08	; 8
     b6a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b6e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b72:	87 7f       	andi	r24, 0xF7	; 247
     b74:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b78:	8f e9       	ldi	r24, 0x9F	; 159
     b7a:	9f e0       	ldi	r25, 0x0F	; 15
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	f1 f7       	brne	.-4      	; 0xb7c <refresh_lcd+0x70>
     b80:	00 c0       	rjmp	.+0      	; 0xb82 <refresh_lcd+0x76>
     b82:	00 00       	nop
    SPDR = lcd_string_array[index];
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    strobe_lcd();                   //write into LCD
    index++;                        //increment to next character
    if(index == 16) {_delay_us(40); home_line2();}           //on to 2nd line, 1st position 
    if(index == 32) {_delay_us(40); cursor_home(); index=0;} //back to 1st line, 1st position
     b84:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <index.2091>
     b88:	08 95       	ret
     b8a:	85 ed       	ldi	r24, 0xD5	; 213
     b8c:	8a 95       	dec	r24
     b8e:	f1 f7       	brne	.-4      	; 0xb8c <refresh_lcd+0x80>
     b90:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b92:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b94:	77 9b       	sbis	0x0e, 7	; 14
     b96:	fe cf       	rjmp	.-4      	; 0xb94 <refresh_lcd+0x88>
  SPDR = byte;                        //send payload
     b98:	80 ec       	ldi	r24, 0xC0	; 192
     b9a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b9c:	77 9b       	sbis	0x0e, 7	; 14
     b9e:	fe cf       	rjmp	.-4      	; 0xb9c <refresh_lcd+0x90>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ba0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ba4:	88 60       	ori	r24, 0x08	; 8
     ba6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     baa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bae:	87 7f       	andi	r24, 0xF7	; 247
     bb0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bb4:	8f e9       	ldi	r24, 0x9F	; 159
     bb6:	9f e0       	ldi	r25, 0x0F	; 15
     bb8:	01 97       	sbiw	r24, 0x01	; 1
     bba:	f1 f7       	brne	.-4      	; 0xbb8 <refresh_lcd+0xac>
     bbc:	00 c0       	rjmp	.+0      	; 0xbbe <refresh_lcd+0xb2>
     bbe:	00 00       	nop
     bc0:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <index.2091>
     bc4:	c1 cf       	rjmp	.-126    	; 0xb48 <refresh_lcd+0x3c>

00000bc6 <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
     bc6:	66 0f       	add	r22, r22
     bc8:	66 0f       	add	r22, r22
     bca:	66 0f       	add	r22, r22
     bcc:	60 5c       	subi	r22, 0xC0	; 192
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     bce:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bd0:	77 9b       	sbis	0x0e, 7	; 14
     bd2:	fe cf       	rjmp	.-4      	; 0xbd0 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
     bd4:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bd6:	77 9b       	sbis	0x0e, 7	; 14
     bd8:	fe cf       	rjmp	.-4      	; 0xbd6 <set_custom_character+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     bda:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bde:	28 60       	ori	r18, 0x08	; 8
     be0:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     be4:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     be8:	27 7f       	andi	r18, 0xF7	; 247
     bea:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bee:	af e9       	ldi	r26, 0x9F	; 159
     bf0:	bf e0       	ldi	r27, 0x0F	; 15
     bf2:	11 97       	sbiw	r26, 0x01	; 1
     bf4:	f1 f7       	brne	.-4      	; 0xbf2 <set_custom_character+0x2c>
     bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <set_custom_character+0x32>
     bf8:	00 00       	nop
     bfa:	fc 01       	movw	r30, r24
     bfc:	9c 01       	movw	r18, r24
     bfe:	28 5f       	subi	r18, 0xF8	; 248
     c00:	3f 4f       	sbci	r19, 0xFF	; 255
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c02:	91 e0       	ldi	r25, 0x01	; 1
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
    for(i=0; i<8; i++){send_lcd(CHAR_BYTE, data[i], 100);}
     c04:	81 91       	ld	r24, Z+
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c06:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c08:	77 9b       	sbis	0x0e, 7	; 14
     c0a:	fe cf       	rjmp	.-4      	; 0xc08 <set_custom_character+0x42>
  SPDR = byte;                        //send payload
     c0c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c0e:	77 9b       	sbis	0x0e, 7	; 14
     c10:	fe cf       	rjmp	.-4      	; 0xc0e <set_custom_character+0x48>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c12:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c16:	88 60       	ori	r24, 0x08	; 8
     c18:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c1c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c20:	87 7f       	andi	r24, 0xF7	; 247
     c22:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c26:	af e9       	ldi	r26, 0x9F	; 159
     c28:	bf e0       	ldi	r27, 0x0F	; 15
     c2a:	11 97       	sbiw	r26, 0x01	; 1
     c2c:	f1 f7       	brne	.-4      	; 0xc2a <set_custom_character+0x64>
     c2e:	00 c0       	rjmp	.+0      	; 0xc30 <set_custom_character+0x6a>
     c30:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
    for(i=0; i<8; i++){send_lcd(CHAR_BYTE, data[i], 100);}
     c32:	e2 17       	cp	r30, r18
     c34:	f3 07       	cpc	r31, r19
     c36:	31 f7       	brne	.-52     	; 0xc04 <set_custom_character+0x3e>
}
     c38:	08 95       	ret

00000c3a <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40), 1000);
     c3a:	90 e4       	ldi	r25, 0x40	; 64
     c3c:	89 9f       	mul	r24, r25
     c3e:	60 0d       	add	r22, r0
     c40:	11 24       	eor	r1, r1
     c42:	60 5c       	subi	r22, 0xC0	; 192
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c44:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c46:	77 9b       	sbis	0x0e, 7	; 14
     c48:	fe cf       	rjmp	.-4      	; 0xc46 <set_cursor+0xc>
  SPDR = byte;                        //send payload
     c4a:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c4c:	77 9b       	sbis	0x0e, 7	; 14
     c4e:	fe cf       	rjmp	.-4      	; 0xc4c <set_cursor+0x12>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c50:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c54:	88 60       	ori	r24, 0x08	; 8
     c56:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c5a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c5e:	87 7f       	andi	r24, 0xF7	; 247
     c60:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c64:	8f e9       	ldi	r24, 0x9F	; 159
     c66:	9f e0       	ldi	r25, 0x0F	; 15
     c68:	01 97       	sbiw	r24, 0x01	; 1
     c6a:	f1 f7       	brne	.-4      	; 0xc68 <set_cursor+0x2e>
     c6c:	00 c0       	rjmp	.+0      	; 0xc6e <set_cursor+0x34>
     c6e:	00 00       	nop
     c70:	08 95       	ret

00000c72 <uint2lcd>:
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
     c72:	81 11       	cpse	r24, r1
     c74:	19 c0       	rjmp	.+50     	; 0xca8 <uint2lcd+0x36>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c7a:	77 9b       	sbis	0x0e, 7	; 14
     c7c:	fe cf       	rjmp	.-4      	; 0xc7a <uint2lcd+0x8>
  SPDR = byte;                        //send payload
     c7e:	80 e3       	ldi	r24, 0x30	; 48
     c80:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c82:	77 9b       	sbis	0x0e, 7	; 14
     c84:	fe cf       	rjmp	.-4      	; 0xc82 <uint2lcd+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c86:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c8a:	88 60       	ori	r24, 0x08	; 8
     c8c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c90:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c94:	87 7f       	andi	r24, 0xF7	; 247
     c96:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c9a:	8f e9       	ldi	r24, 0x9F	; 159
     c9c:	9f e0       	ldi	r25, 0x0F	; 15
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	f1 f7       	brne	.-4      	; 0xc9e <uint2lcd+0x2c>
     ca2:	00 c0       	rjmp	.+0      	; 0xca4 <uint2lcd+0x32>
     ca4:	00 00       	nop
     ca6:	08 95       	ret
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
     ca8:	84 36       	cpi	r24, 0x64	; 100
     caa:	b0 f4       	brcc	.+44     	; 0xcd8 <uint2lcd+0x66>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
     cac:	8a 30       	cpi	r24, 0x0A	; 10
     cae:	90 f5       	brcc	.+100    	; 0xd14 <uint2lcd+0xa2>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cb4:	77 9b       	sbis	0x0e, 7	; 14
     cb6:	fe cf       	rjmp	.-4      	; 0xcb4 <uint2lcd+0x42>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    , 100); }
     cb8:	9d ec       	ldi	r25, 0xCD	; 205
     cba:	89 9f       	mul	r24, r25
     cbc:	91 2d       	mov	r25, r1
     cbe:	11 24       	eor	r1, r1
     cc0:	96 95       	lsr	r25
     cc2:	96 95       	lsr	r25
     cc4:	96 95       	lsr	r25
     cc6:	fa e0       	ldi	r31, 0x0A	; 10
     cc8:	9f 9f       	mul	r25, r31
     cca:	80 19       	sub	r24, r0
     ccc:	11 24       	eor	r1, r1
     cce:	80 5d       	subi	r24, 0xD0	; 208


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     cd0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cd2:	77 9b       	sbis	0x0e, 7	; 14
     cd4:	fe cf       	rjmp	.-4      	; 0xcd2 <uint2lcd+0x60>
     cd6:	d7 cf       	rjmp	.-82     	; 0xc86 <uint2lcd+0x14>
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
     cd8:	99 e2       	ldi	r25, 0x29	; 41
     cda:	89 9f       	mul	r24, r25
     cdc:	91 2d       	mov	r25, r1
     cde:	11 24       	eor	r1, r1
     ce0:	92 95       	swap	r25
     ce2:	9f 70       	andi	r25, 0x0F	; 15
     ce4:	90 5d       	subi	r25, 0xD0	; 208
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ce6:	21 e0       	ldi	r18, 0x01	; 1
     ce8:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cea:	77 9b       	sbis	0x0e, 7	; 14
     cec:	fe cf       	rjmp	.-4      	; 0xcea <uint2lcd+0x78>
  SPDR = byte;                        //send payload
     cee:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cf0:	77 9b       	sbis	0x0e, 7	; 14
     cf2:	fe cf       	rjmp	.-4      	; 0xcf0 <uint2lcd+0x7e>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     cf4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cf8:	98 60       	ori	r25, 0x08	; 8
     cfa:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cfe:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d02:	97 7f       	andi	r25, 0xF7	; 247
     d04:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d08:	ef e9       	ldi	r30, 0x9F	; 159
     d0a:	ff e0       	ldi	r31, 0x0F	; 15
     d0c:	31 97       	sbiw	r30, 0x01	; 1
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <uint2lcd+0x9a>
     d10:	00 c0       	rjmp	.+0      	; 0xd12 <uint2lcd+0xa0>
     d12:	00 00       	nop
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
     d14:	99 e2       	ldi	r25, 0x29	; 41
     d16:	89 9f       	mul	r24, r25
     d18:	91 2d       	mov	r25, r1
     d1a:	11 24       	eor	r1, r1
     d1c:	92 95       	swap	r25
     d1e:	9f 70       	andi	r25, 0x0F	; 15
     d20:	28 2f       	mov	r18, r24
     d22:	f4 e6       	ldi	r31, 0x64	; 100
     d24:	9f 9f       	mul	r25, r31
     d26:	20 19       	sub	r18, r0
     d28:	11 24       	eor	r1, r1
     d2a:	92 2f       	mov	r25, r18
     d2c:	2d ec       	ldi	r18, 0xCD	; 205
     d2e:	92 9f       	mul	r25, r18
     d30:	91 2d       	mov	r25, r1
     d32:	11 24       	eor	r1, r1
     d34:	96 95       	lsr	r25
     d36:	96 95       	lsr	r25
     d38:	96 95       	lsr	r25
     d3a:	90 5d       	subi	r25, 0xD0	; 208
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d3c:	21 e0       	ldi	r18, 0x01	; 1
     d3e:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d40:	77 9b       	sbis	0x0e, 7	; 14
     d42:	fe cf       	rjmp	.-4      	; 0xd40 <uint2lcd+0xce>
  SPDR = byte;                        //send payload
     d44:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d46:	77 9b       	sbis	0x0e, 7	; 14
     d48:	fe cf       	rjmp	.-4      	; 0xd46 <uint2lcd+0xd4>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d4a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d4e:	98 60       	ori	r25, 0x08	; 8
     d50:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d54:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d58:	97 7f       	andi	r25, 0xF7	; 247
     d5a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d5e:	ef e9       	ldi	r30, 0x9F	; 159
     d60:	ff e0       	ldi	r31, 0x0F	; 15
     d62:	31 97       	sbiw	r30, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <uint2lcd+0xf0>
     d66:	00 c0       	rjmp	.+0      	; 0xd68 <uint2lcd+0xf6>
     d68:	00 00       	nop
     d6a:	a2 cf       	rjmp	.-188    	; 0xcb0 <uint2lcd+0x3e>

00000d6c <int2lcd>:
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    if(number < 0){send_lcd(CHAR_BYTE, '-', 100); uint2lcd(~number+1);}    //take 2's complement of number and display
     d6c:	87 ff       	sbrs	r24, 7
    else                                    {uint2lcd(number);}
     d6e:	0c 94 39 06 	jmp	0xc72	; 0xc72 <uint2lcd>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d76:	77 9b       	sbis	0x0e, 7	; 14
     d78:	fe cf       	rjmp	.-4      	; 0xd76 <int2lcd+0xa>
  SPDR = byte;                        //send payload
     d7a:	9d e2       	ldi	r25, 0x2D	; 45
     d7c:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d7e:	77 9b       	sbis	0x0e, 7	; 14
     d80:	fe cf       	rjmp	.-4      	; 0xd7e <int2lcd+0x12>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d82:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d86:	98 60       	ori	r25, 0x08	; 8
     d88:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d8c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d90:	97 7f       	andi	r25, 0xF7	; 247
     d92:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d96:	ef e9       	ldi	r30, 0x9F	; 159
     d98:	ff e0       	ldi	r31, 0x0F	; 15
     d9a:	31 97       	sbiw	r30, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <int2lcd+0x2e>
     d9e:	00 c0       	rjmp	.+0      	; 0xda0 <int2lcd+0x34>
     da0:	00 00       	nop
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    if(number < 0){send_lcd(CHAR_BYTE, '-', 100); uint2lcd(~number+1);}    //take 2's complement of number and display
     da2:	81 95       	neg	r24
     da4:	0c 94 39 06 	jmp	0xc72	; 0xc72 <uint2lcd>

00000da8 <cursor_on>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     da8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     daa:	77 9b       	sbis	0x0e, 7	; 14
     dac:	fe cf       	rjmp	.-4      	; 0xdaa <cursor_on+0x2>
  SPDR = byte;                        //send payload
     dae:	8e e0       	ldi	r24, 0x0E	; 14
     db0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     db2:	77 9b       	sbis	0x0e, 7	; 14
     db4:	fe cf       	rjmp	.-4      	; 0xdb2 <cursor_on+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     db6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dba:	88 60       	ori	r24, 0x08	; 8
     dbc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dc0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dc4:	87 7f       	andi	r24, 0xF7	; 247
     dc6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dca:	8f e9       	ldi	r24, 0x9F	; 159
     dcc:	9f e0       	ldi	r25, 0x0F	; 15
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	f1 f7       	brne	.-4      	; 0xdce <cursor_on+0x26>
     dd2:	00 c0       	rjmp	.+0      	; 0xdd4 <cursor_on+0x2c>
     dd4:	00 00       	nop
     dd6:	08 95       	ret

00000dd8 <cursor_off>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     dd8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     dda:	77 9b       	sbis	0x0e, 7	; 14
     ddc:	fe cf       	rjmp	.-4      	; 0xdda <cursor_off+0x2>
  SPDR = byte;                        //send payload
     dde:	8c e0       	ldi	r24, 0x0C	; 12
     de0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     de2:	77 9b       	sbis	0x0e, 7	; 14
     de4:	fe cf       	rjmp	.-4      	; 0xde2 <cursor_off+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     de6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dea:	88 60       	ori	r24, 0x08	; 8
     dec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     df0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     df4:	87 7f       	andi	r24, 0xF7	; 247
     df6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dfa:	8f e9       	ldi	r24, 0x9F	; 159
     dfc:	9f e0       	ldi	r25, 0x0F	; 15
     dfe:	01 97       	sbiw	r24, 0x01	; 1
     e00:	f1 f7       	brne	.-4      	; 0xdfe <cursor_off+0x26>
     e02:	00 c0       	rjmp	.+0      	; 0xe04 <cursor_off+0x2c>
     e04:	00 00       	nop
     e06:	08 95       	ret

00000e08 <shift_right>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e08:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e0a:	77 9b       	sbis	0x0e, 7	; 14
     e0c:	fe cf       	rjmp	.-4      	; 0xe0a <shift_right+0x2>
  SPDR = byte;                        //send payload
     e0e:	8e e1       	ldi	r24, 0x1E	; 30
     e10:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e12:	77 9b       	sbis	0x0e, 7	; 14
     e14:	fe cf       	rjmp	.-4      	; 0xe12 <shift_right+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e16:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e1a:	88 60       	ori	r24, 0x08	; 8
     e1c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e20:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e24:	87 7f       	andi	r24, 0xF7	; 247
     e26:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e2a:	8f e9       	ldi	r24, 0x9F	; 159
     e2c:	9f e0       	ldi	r25, 0x0F	; 15
     e2e:	01 97       	sbiw	r24, 0x01	; 1
     e30:	f1 f7       	brne	.-4      	; 0xe2e <shift_right+0x26>
     e32:	00 c0       	rjmp	.+0      	; 0xe34 <shift_right+0x2c>
     e34:	00 00       	nop
     e36:	08 95       	ret

00000e38 <shift_left>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e38:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e3a:	77 9b       	sbis	0x0e, 7	; 14
     e3c:	fe cf       	rjmp	.-4      	; 0xe3a <shift_left+0x2>
  SPDR = byte;                        //send payload
     e3e:	88 e1       	ldi	r24, 0x18	; 24
     e40:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e42:	77 9b       	sbis	0x0e, 7	; 14
     e44:	fe cf       	rjmp	.-4      	; 0xe42 <shift_left+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e46:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e4a:	88 60       	ori	r24, 0x08	; 8
     e4c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e50:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e54:	87 7f       	andi	r24, 0xF7	; 247
     e56:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e5a:	8f e9       	ldi	r24, 0x9F	; 159
     e5c:	9f e0       	ldi	r25, 0x0F	; 15
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	f1 f7       	brne	.-4      	; 0xe5e <shift_left+0x26>
     e62:	00 c0       	rjmp	.+0      	; 0xe64 <shift_left+0x2c>
     e64:	00 00       	nop
     e66:	08 95       	ret

00000e68 <strobe_lcd>:
     e68:	e2 e6       	ldi	r30, 0x62	; 98
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	88 60       	ori	r24, 0x08	; 8
     e70:	80 83       	st	Z, r24
     e72:	80 81       	ld	r24, Z
     e74:	87 7f       	andi	r24, 0xF7	; 247
     e76:	80 83       	st	Z, r24
     e78:	08 95       	ret

00000e7a <clear_display>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e7a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e7c:	77 9b       	sbis	0x0e, 7	; 14
     e7e:	fe cf       	rjmp	.-4      	; 0xe7c <clear_display+0x2>
  SPDR = byte;                        //send payload
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e84:	77 9b       	sbis	0x0e, 7	; 14
     e86:	fe cf       	rjmp	.-4      	; 0xe84 <clear_display+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e88:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e8c:	88 60       	ori	r24, 0x08	; 8
     e8e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e92:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e96:	87 7f       	andi	r24, 0xF7	; 247
     e98:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e9c:	8f e9       	ldi	r24, 0x9F	; 159
     e9e:	9f e0       	ldi	r25, 0x0F	; 15
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <clear_display+0x26>
     ea4:	00 c0       	rjmp	.+0      	; 0xea6 <clear_display+0x2c>
     ea6:	00 00       	nop
     ea8:	08 95       	ret

00000eaa <cursor_home>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     eaa:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     eac:	77 9b       	sbis	0x0e, 7	; 14
     eae:	fe cf       	rjmp	.-4      	; 0xeac <cursor_home+0x2>
  SPDR = byte;                        //send payload
     eb0:	82 e0       	ldi	r24, 0x02	; 2
     eb2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     eb4:	77 9b       	sbis	0x0e, 7	; 14
     eb6:	fe cf       	rjmp	.-4      	; 0xeb4 <cursor_home+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     eb8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ebc:	88 60       	ori	r24, 0x08	; 8
     ebe:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ec2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ec6:	87 7f       	andi	r24, 0xF7	; 247
     ec8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ecc:	8f e9       	ldi	r24, 0x9F	; 159
     ece:	9f e0       	ldi	r25, 0x0F	; 15
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	f1 f7       	brne	.-4      	; 0xed0 <cursor_home+0x26>
     ed4:	00 c0       	rjmp	.+0      	; 0xed6 <cursor_home+0x2c>
     ed6:	00 00       	nop
     ed8:	08 95       	ret

00000eda <home_line2>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     eda:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     edc:	77 9b       	sbis	0x0e, 7	; 14
     ede:	fe cf       	rjmp	.-4      	; 0xedc <home_line2+0x2>
  SPDR = byte;                        //send payload
     ee0:	80 ec       	ldi	r24, 0xC0	; 192
     ee2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ee4:	77 9b       	sbis	0x0e, 7	; 14
     ee6:	fe cf       	rjmp	.-4      	; 0xee4 <home_line2+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ee8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     eec:	88 60       	ori	r24, 0x08	; 8
     eee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ef2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ef6:	87 7f       	andi	r24, 0xF7	; 247
     ef8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     efc:	8f e9       	ldi	r24, 0x9F	; 159
     efe:	9f e0       	ldi	r25, 0x0F	; 15
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <home_line2+0x26>
     f04:	00 c0       	rjmp	.+0      	; 0xf06 <home_line2+0x2c>
     f06:	00 00       	nop
     f08:	08 95       	ret

00000f0a <fill_spaces>:
 
//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
     f0a:	90 e1       	ldi	r25, 0x10	; 16
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f0c:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     f0e:	20 e2       	ldi	r18, 0x20	; 32
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f10:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f12:	77 9b       	sbis	0x0e, 7	; 14
     f14:	fe cf       	rjmp	.-4      	; 0xf12 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
     f16:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f18:	77 9b       	sbis	0x0e, 7	; 14
     f1a:	fe cf       	rjmp	.-4      	; 0xf18 <fill_spaces+0xe>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f1c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f20:	88 60       	ori	r24, 0x08	; 8
     f22:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f26:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f2a:	87 7f       	andi	r24, 0xF7	; 247
     f2c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f30:	ef e9       	ldi	r30, 0x9F	; 159
     f32:	ff e0       	ldi	r31, 0x0F	; 15
     f34:	31 97       	sbiw	r30, 0x01	; 1
     f36:	f1 f7       	brne	.-4      	; 0xf34 <fill_spaces+0x2a>
     f38:	00 c0       	rjmp	.+0      	; 0xf3a <fill_spaces+0x30>
     f3a:	00 00       	nop
     f3c:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     f3e:	41 f7       	brne	.-48     	; 0xf10 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ',100); //100us wait between characters
	}
}  
     f40:	08 95       	ret

00000f42 <char2lcd>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f42:	91 e0       	ldi	r25, 0x01	; 1
     f44:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f46:	77 9b       	sbis	0x0e, 7	; 14
     f48:	fe cf       	rjmp	.-4      	; 0xf46 <char2lcd+0x4>
  SPDR = byte;                        //send payload
     f4a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f4c:	77 9b       	sbis	0x0e, 7	; 14
     f4e:	fe cf       	rjmp	.-4      	; 0xf4c <char2lcd+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f50:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f54:	88 60       	ori	r24, 0x08	; 8
     f56:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f5a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f5e:	87 7f       	andi	r24, 0xF7	; 247
     f60:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f64:	8f e9       	ldi	r24, 0x9F	; 159
     f66:	9f e0       	ldi	r25, 0x0F	; 15
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <char2lcd+0x26>
     f6c:	00 c0       	rjmp	.+0      	; 0xf6e <char2lcd+0x2c>
     f6e:	00 00       	nop
     f70:	08 95       	ret

00000f72 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
     f72:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}                  
     f74:	40 e0       	ldi	r20, 0x00	; 0
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	60 e0       	ldi	r22, 0x00	; 0
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f7a:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}                  
     f7c:	df 01       	movw	r26, r30
     f7e:	a4 0f       	add	r26, r20
     f80:	b5 1f       	adc	r27, r21
     f82:	8c 91       	ld	r24, X
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f84:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f86:	77 9b       	sbis	0x0e, 7	; 14
     f88:	fe cf       	rjmp	.-4      	; 0xf86 <string2lcd+0x14>
  SPDR = byte;                        //send payload
     f8a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f8c:	77 9b       	sbis	0x0e, 7	; 14
     f8e:	fe cf       	rjmp	.-4      	; 0xf8c <string2lcd+0x1a>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f90:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f94:	98 60       	ori	r25, 0x08	; 8
     f96:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f9a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f9e:	97 7f       	andi	r25, 0xF7	; 247
     fa0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fa4:	8f e9       	ldi	r24, 0x9F	; 159
     fa6:	9f e0       	ldi	r25, 0x0F	; 15
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <string2lcd+0x36>
     fac:	00 c0       	rjmp	.+0      	; 0xfae <string2lcd+0x3c>
     fae:	00 00       	nop
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}                  
     fb0:	6f 5f       	subi	r22, 0xFF	; 255
     fb2:	46 2f       	mov	r20, r22
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	df 01       	movw	r26, r30
     fb8:	0d 90       	ld	r0, X+
     fba:	00 20       	and	r0, r0
     fbc:	e9 f7       	brne	.-6      	; 0xfb8 <string2lcd+0x46>
     fbe:	9d 01       	movw	r18, r26
     fc0:	2e 1b       	sub	r18, r30
     fc2:	3f 0b       	sbc	r19, r31
     fc4:	22 50       	subi	r18, 0x02	; 2
     fc6:	31 09       	sbc	r19, r1
     fc8:	24 17       	cp	r18, r20
     fca:	35 07       	cpc	r19, r21
     fcc:	b8 f6       	brcc	.-82     	; 0xf7c <string2lcd+0xa>
} 
     fce:	08 95       	ret

00000fd0 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fd0:	8f ef       	ldi	r24, 0xFF	; 255
     fd2:	99 ef       	ldi	r25, 0xF9	; 249
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	f1 f7       	brne	.-4      	; 0xfd4 <lcd_init+0x4>
     fd8:	00 c0       	rjmp	.+0      	; 0xfda <lcd_init+0xa>
     fda:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! should not be here.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     fdc:	88 e0       	ldi	r24, 0x08	; 8
     fde:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     fe2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     fe4:	77 9b       	sbis	0x0e, 7	; 14
     fe6:	fe cf       	rjmp	.-4      	; 0xfe4 <lcd_init+0x14>
  SPDR = byte;                        //send payload
     fe8:	80 e3       	ldi	r24, 0x30	; 48
     fea:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     fec:	77 9b       	sbis	0x0e, 7	; 14
     fee:	fe cf       	rjmp	.-4      	; 0xfec <lcd_init+0x1c>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ff0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ff4:	88 60       	ori	r24, 0x08	; 8
     ff6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ffa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ffe:	87 7f       	andi	r24, 0xF7	; 247
    1000:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1004:	8f e9       	ldi	r24, 0x9F	; 159
    1006:	9f e0       	ldi	r25, 0x0F	; 15
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	f1 f7       	brne	.-4      	; 0x1008 <lcd_init+0x38>
    100c:	00 c0       	rjmp	.+0      	; 0x100e <lcd_init+0x3e>
    100e:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1010:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1012:	77 9b       	sbis	0x0e, 7	; 14
    1014:	fe cf       	rjmp	.-4      	; 0x1012 <lcd_init+0x42>
  SPDR = byte;                        //send payload
    1016:	80 e3       	ldi	r24, 0x30	; 48
    1018:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    101a:	77 9b       	sbis	0x0e, 7	; 14
    101c:	fe cf       	rjmp	.-4      	; 0x101a <lcd_init+0x4a>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    101e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1022:	88 60       	ori	r24, 0x08	; 8
    1024:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1028:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    102c:	87 7f       	andi	r24, 0xF7	; 247
    102e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1032:	8f e9       	ldi	r24, 0x9F	; 159
    1034:	9f e0       	ldi	r25, 0x0F	; 15
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	f1 f7       	brne	.-4      	; 0x1036 <lcd_init+0x66>
    103a:	00 c0       	rjmp	.+0      	; 0x103c <lcd_init+0x6c>
    103c:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    103e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1040:	77 9b       	sbis	0x0e, 7	; 14
    1042:	fe cf       	rjmp	.-4      	; 0x1040 <lcd_init+0x70>
  SPDR = byte;                        //send payload
    1044:	80 e3       	ldi	r24, 0x30	; 48
    1046:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1048:	77 9b       	sbis	0x0e, 7	; 14
    104a:	fe cf       	rjmp	.-4      	; 0x1048 <lcd_init+0x78>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    104c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1050:	88 60       	ori	r24, 0x08	; 8
    1052:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1056:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    105a:	87 7f       	andi	r24, 0xF7	; 247
    105c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1060:	8f e9       	ldi	r24, 0x9F	; 159
    1062:	9f e0       	ldi	r25, 0x0F	; 15
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	f1 f7       	brne	.-4      	; 0x1064 <lcd_init+0x94>
    1068:	00 c0       	rjmp	.+0      	; 0x106a <lcd_init+0x9a>
    106a:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    106c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    106e:	77 9b       	sbis	0x0e, 7	; 14
    1070:	fe cf       	rjmp	.-4      	; 0x106e <lcd_init+0x9e>
  SPDR = byte;                        //send payload
    1072:	88 e3       	ldi	r24, 0x38	; 56
    1074:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1076:	77 9b       	sbis	0x0e, 7	; 14
    1078:	fe cf       	rjmp	.-4      	; 0x1076 <lcd_init+0xa6>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    107a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    107e:	88 60       	ori	r24, 0x08	; 8
    1080:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1084:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1088:	87 7f       	andi	r24, 0xF7	; 247
    108a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    108e:	8f e9       	ldi	r24, 0x9F	; 159
    1090:	9f e0       	ldi	r25, 0x0F	; 15
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <lcd_init+0xc2>
    1096:	00 c0       	rjmp	.+0      	; 0x1098 <lcd_init+0xc8>
    1098:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    109a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    109c:	77 9b       	sbis	0x0e, 7	; 14
    109e:	fe cf       	rjmp	.-4      	; 0x109c <lcd_init+0xcc>
  SPDR = byte;                        //send payload
    10a0:	88 e0       	ldi	r24, 0x08	; 8
    10a2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10a4:	77 9b       	sbis	0x0e, 7	; 14
    10a6:	fe cf       	rjmp	.-4      	; 0x10a4 <lcd_init+0xd4>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    10a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10ac:	88 60       	ori	r24, 0x08	; 8
    10ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10b2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10b6:	87 7f       	andi	r24, 0xF7	; 247
    10b8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10bc:	8f e9       	ldi	r24, 0x9F	; 159
    10be:	9f e0       	ldi	r25, 0x0F	; 15
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	f1 f7       	brne	.-4      	; 0x10c0 <lcd_init+0xf0>
    10c4:	00 c0       	rjmp	.+0      	; 0x10c6 <lcd_init+0xf6>
    10c6:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    10c8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10ca:	77 9b       	sbis	0x0e, 7	; 14
    10cc:	fe cf       	rjmp	.-4      	; 0x10ca <lcd_init+0xfa>
  SPDR = byte;                        //send payload
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10d2:	77 9b       	sbis	0x0e, 7	; 14
    10d4:	fe cf       	rjmp	.-4      	; 0x10d2 <lcd_init+0x102>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    10d6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10da:	88 60       	ori	r24, 0x08	; 8
    10dc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10e4:	87 7f       	andi	r24, 0xF7	; 247
    10e6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10ea:	8f e9       	ldi	r24, 0x9F	; 159
    10ec:	9f e0       	ldi	r25, 0x0F	; 15
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	f1 f7       	brne	.-4      	; 0x10ee <lcd_init+0x11e>
    10f2:	00 c0       	rjmp	.+0      	; 0x10f4 <lcd_init+0x124>
    10f4:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    10f6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10f8:	77 9b       	sbis	0x0e, 7	; 14
    10fa:	fe cf       	rjmp	.-4      	; 0x10f8 <lcd_init+0x128>
  SPDR = byte;                        //send payload
    10fc:	86 e0       	ldi	r24, 0x06	; 6
    10fe:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1100:	77 9b       	sbis	0x0e, 7	; 14
    1102:	fe cf       	rjmp	.-4      	; 0x1100 <__stack+0x1>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1104:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1108:	88 60       	ori	r24, 0x08	; 8
    110a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    110e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1112:	87 7f       	andi	r24, 0xF7	; 247
    1114:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1118:	8f e9       	ldi	r24, 0x9F	; 159
    111a:	9f e0       	ldi	r25, 0x0F	; 15
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	f1 f7       	brne	.-4      	; 0x111c <__stack+0x1d>
    1120:	00 c0       	rjmp	.+0      	; 0x1122 <__stack+0x23>
    1122:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1124:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1126:	77 9b       	sbis	0x0e, 7	; 14
    1128:	fe cf       	rjmp	.-4      	; 0x1126 <__stack+0x27>
  SPDR = byte;                        //send payload
    112a:	8c e0       	ldi	r24, 0x0C	; 12
    112c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    112e:	77 9b       	sbis	0x0e, 7	; 14
    1130:	fe cf       	rjmp	.-4      	; 0x112e <__stack+0x2f>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1132:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1136:	88 60       	ori	r24, 0x08	; 8
    1138:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    113c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1140:	87 7f       	andi	r24, 0xF7	; 247
    1142:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1146:	8f e9       	ldi	r24, 0x9F	; 159
    1148:	9f e0       	ldi	r25, 0x0F	; 15
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	f1 f7       	brne	.-4      	; 0x114a <__stack+0x4b>
    114e:	00 c0       	rjmp	.+0      	; 0x1150 <__stack+0x51>
    1150:	00 00       	nop
    1152:	08 95       	ret

00001154 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    1154:	4f 92       	push	r4
    1156:	5f 92       	push	r5
    1158:	6f 92       	push	r6
    115a:	7f 92       	push	r7
    115c:	8f 92       	push	r8
    115e:	9f 92       	push	r9
    1160:	af 92       	push	r10
    1162:	bf 92       	push	r11
    1164:	cf 92       	push	r12
    1166:	df 92       	push	r13
    1168:	ef 92       	push	r14
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	69 97       	sbiw	r28, 0x19	; 25
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	14 2f       	mov	r17, r20
    1186:	42 2e       	mov	r4, r18
    1188:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
    118a:	00 23       	and	r16, r16
    118c:	79 f0       	breq	.+30     	; 0x11ac <lcd_int32+0x58>
        bSigned = (qr.quot<0);
    118e:	6b 01       	movw	r12, r22
    1190:	7c 01       	movw	r14, r24
    1192:	cc 24       	eor	r12, r12
    1194:	f7 fc       	sbrc	r15, 7
    1196:	c3 94       	inc	r12
    1198:	dd 24       	eor	r13, r13
    119a:	ee 24       	eor	r14, r14
    119c:	ff 24       	eor	r15, r15
    119e:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
    11a0:	6b 01       	movw	r12, r22
    11a2:	7c 01       	movw	r14, r24
    11a4:	97 fd       	sbrc	r25, 7
    11a6:	a5 c0       	rjmp	.+330    	; 0x12f2 <lcd_int32+0x19e>
    11a8:	c7 01       	movw	r24, r14
    11aa:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
    11ac:	44 20       	and	r4, r4
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <lcd_int32+0x5e>
    11b0:	98 c0       	rjmp	.+304    	; 0x12e2 <lcd_int32+0x18e>
    11b2:	9e 01       	movw	r18, r28
    11b4:	2f 5f       	subi	r18, 0xFF	; 255
    11b6:	3f 4f       	sbci	r19, 0xFF	; 255
    11b8:	59 01       	movw	r10, r18
    11ba:	49 01       	movw	r8, r18
    11bc:	66 24       	eor	r6, r6
    11be:	6a 94       	dec	r6
    11c0:	64 0c       	add	r6, r4
    11c2:	71 2c       	mov	r7, r1
    11c4:	3f ef       	ldi	r19, 0xFF	; 255
    11c6:	63 1a       	sub	r6, r19
    11c8:	73 0a       	sbc	r7, r19
    11ca:	6a 0c       	add	r6, r10
    11cc:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    11ce:	2a e0       	ldi	r18, 0x0A	; 10
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	40 e0       	ldi	r20, 0x00	; 0
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__divmodsi4>
    11da:	e6 2f       	mov	r30, r22
    11dc:	2a 8b       	std	Y+18, r18	; 0x12
    11de:	3b 8b       	std	Y+19, r19	; 0x13
    11e0:	4c 8b       	std	Y+20, r20	; 0x14
    11e2:	5d 8b       	std	Y+21, r21	; 0x15
    11e4:	6a 89       	ldd	r22, Y+18	; 0x12
    11e6:	7b 89       	ldd	r23, Y+19	; 0x13
    11e8:	8c 89       	ldd	r24, Y+20	; 0x14
    11ea:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    11ec:	20 e3       	ldi	r18, 0x30	; 48
    11ee:	2e 0f       	add	r18, r30
    11f0:	f4 01       	movw	r30, r8
    11f2:	21 93       	st	Z+, r18
    11f4:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
    11f6:	6e 16       	cp	r6, r30
    11f8:	7f 06       	cpc	r7, r31
    11fa:	49 f7       	brne	.-46     	; 0x11ce <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    11fc:	99 24       	eor	r9, r9
    11fe:	93 94       	inc	r9
    1200:	94 0c       	add	r9, r4
    1202:	f5 01       	movw	r30, r10
    1204:	e4 0d       	add	r30, r4
    1206:	f1 1d       	adc	r31, r1
    1208:	2e e2       	ldi	r18, 0x2E	; 46
    120a:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
    120c:	2a e0       	ldi	r18, 0x0A	; 10
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	40 e0       	ldi	r20, 0x00	; 0
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__divmodsi4>
    1218:	e6 2f       	mov	r30, r22
    121a:	2a 8b       	std	Y+18, r18	; 0x12
    121c:	3b 8b       	std	Y+19, r19	; 0x13
    121e:	4c 8b       	std	Y+20, r20	; 0x14
    1220:	5d 8b       	std	Y+21, r21	; 0x15
    1222:	6e 8b       	std	Y+22, r22	; 0x16
    1224:	7f 8b       	std	Y+23, r23	; 0x17
    1226:	88 8f       	std	Y+24, r24	; 0x18
    1228:	99 8f       	std	Y+25, r25	; 0x19
    122a:	6a 89       	ldd	r22, Y+18	; 0x12
    122c:	7b 89       	ldd	r23, Y+19	; 0x13
    122e:	8c 89       	ldd	r24, Y+20	; 0x14
    1230:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    1232:	31 e0       	ldi	r19, 0x01	; 1
    1234:	39 0d       	add	r19, r9
    1236:	d5 01       	movw	r26, r10
    1238:	a9 0d       	add	r26, r9
    123a:	b1 1d       	adc	r27, r1
    123c:	e0 5d       	subi	r30, 0xD0	; 208
    123e:	ec 93       	st	X, r30
    1240:	93 2e       	mov	r9, r19
        }while(qr.quot);
    1242:	61 15       	cp	r22, r1
    1244:	71 05       	cpc	r23, r1
    1246:	81 05       	cpc	r24, r1
    1248:	91 05       	cpc	r25, r1
    124a:	01 f7       	brne	.-64     	; 0x120c <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
    124c:	11 23       	and	r17, r17
    124e:	61 f0       	breq	.+24     	; 0x1268 <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1250:	51 10       	cpse	r5, r1
    1252:	4d c0       	rjmp	.+154    	; 0x12ee <lcd_int32+0x19a>
    1254:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    1256:	31 17       	cp	r19, r17
    1258:	38 f4       	brcc	.+14     	; 0x1268 <lcd_int32+0x114>
    125a:	f5 01       	movw	r30, r10
    125c:	e3 0f       	add	r30, r19
    125e:	f1 1d       	adc	r31, r1
    1260:	90 83       	st	Z, r25
    1262:	3f 5f       	subi	r19, 0xFF	; 255
    1264:	13 13       	cpse	r17, r19
    1266:	f9 cf       	rjmp	.-14     	; 0x125a <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    1268:	00 23       	and	r16, r16
    126a:	31 f0       	breq	.+12     	; 0x1278 <lcd_int32+0x124>
    126c:	f5 01       	movw	r30, r10
    126e:	e3 0f       	add	r30, r19
    1270:	f1 1d       	adc	r31, r1
    1272:	9d e2       	ldi	r25, 0x2D	; 45
    1274:	90 83       	st	Z, r25
    1276:	3f 5f       	subi	r19, 0xFF	; 255
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1278:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
    127a:	31 50       	subi	r19, 0x01	; 1
    127c:	f5 01       	movw	r30, r10
    127e:	e3 0f       	add	r30, r19
    1280:	f1 1d       	adc	r31, r1
    1282:	90 81       	ld	r25, Z
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1284:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1286:	77 9b       	sbis	0x0e, 7	; 14
    1288:	fe cf       	rjmp	.-4      	; 0x1286 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
    128a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    128c:	77 9b       	sbis	0x0e, 7	; 14
    128e:	fe cf       	rjmp	.-4      	; 0x128c <lcd_int32+0x138>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1290:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1294:	98 60       	ori	r25, 0x08	; 8
    1296:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    129a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    129e:	97 7f       	andi	r25, 0xF7	; 247
    12a0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12a4:	8f e9       	ldi	r24, 0x9F	; 159
    12a6:	9f e0       	ldi	r25, 0x0F	; 15
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	f1 f7       	brne	.-4      	; 0x12a8 <lcd_int32+0x154>
    12ac:	00 c0       	rjmp	.+0      	; 0x12ae <lcd_int32+0x15a>
    12ae:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
    12b0:	31 11       	cpse	r19, r1
    12b2:	e3 cf       	rjmp	.-58     	; 0x127a <lcd_int32+0x126>

}
    12b4:	69 96       	adiw	r28, 0x19	; 25
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	ff 90       	pop	r15
    12ca:	ef 90       	pop	r14
    12cc:	df 90       	pop	r13
    12ce:	cf 90       	pop	r12
    12d0:	bf 90       	pop	r11
    12d2:	af 90       	pop	r10
    12d4:	9f 90       	pop	r9
    12d6:	8f 90       	pop	r8
    12d8:	7f 90       	pop	r7
    12da:	6f 90       	pop	r6
    12dc:	5f 90       	pop	r5
    12de:	4f 90       	pop	r4
    12e0:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    12e2:	91 2c       	mov	r9, r1
    12e4:	9e 01       	movw	r18, r28
    12e6:	2f 5f       	subi	r18, 0xFF	; 255
    12e8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ea:	59 01       	movw	r10, r18
    12ec:	8f cf       	rjmp	.-226    	; 0x120c <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    12ee:	90 e3       	ldi	r25, 0x30	; 48
    12f0:	b2 cf       	rjmp	.-156    	; 0x1256 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    12f2:	f0 94       	com	r15
    12f4:	e0 94       	com	r14
    12f6:	d0 94       	com	r13
    12f8:	c0 94       	com	r12
    12fa:	c1 1c       	adc	r12, r1
    12fc:	d1 1c       	adc	r13, r1
    12fe:	e1 1c       	adc	r14, r1
    1300:	f1 1c       	adc	r15, r1
    1302:	52 cf       	rjmp	.-348    	; 0x11a8 <lcd_int32+0x54>

00001304 <lcd_int16>:
    1304:	5f 92       	push	r5
    1306:	6f 92       	push	r6
    1308:	7f 92       	push	r7
    130a:	8f 92       	push	r8
    130c:	9f 92       	push	r9
    130e:	af 92       	push	r10
    1310:	bf 92       	push	r11
    1312:	cf 92       	push	r12
    1314:	df 92       	push	r13
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    1326:	61 97       	sbiw	r28, 0x11	; 17
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	5c 01       	movw	r10, r24
    1334:	96 2e       	mov	r9, r22
    1336:	54 2e       	mov	r5, r20
    1338:	62 2e       	mov	r6, r18
    133a:	8b 2c       	mov	r8, r11
    133c:	88 1c       	adc	r8, r8
    133e:	88 24       	eor	r8, r8
    1340:	88 1c       	adc	r8, r8
    1342:	78 2c       	mov	r7, r8
    1344:	9c 01       	movw	r18, r24
    1346:	97 fd       	sbrc	r25, 7
    1348:	9f c0       	rjmp	.+318    	; 0x1488 <lcd_int16+0x184>
    134a:	55 20       	and	r5, r5
    134c:	09 f4       	brne	.+2      	; 0x1350 <lcd_int16+0x4c>
    134e:	90 c0       	rjmp	.+288    	; 0x1470 <lcd_int16+0x16c>
    1350:	8e 01       	movw	r16, r28
    1352:	0f 5f       	subi	r16, 0xFF	; 255
    1354:	1f 4f       	sbci	r17, 0xFF	; 255
    1356:	78 01       	movw	r14, r16
    1358:	cc 24       	eor	r12, r12
    135a:	ca 94       	dec	r12
    135c:	c5 0c       	add	r12, r5
    135e:	d1 2c       	mov	r13, r1
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	c8 1a       	sub	r12, r24
    1364:	d8 0a       	sbc	r13, r24
    1366:	c0 0e       	add	r12, r16
    1368:	d1 1e       	adc	r13, r17
    136a:	6a e0       	ldi	r22, 0x0A	; 10
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	c9 01       	movw	r24, r18
    1370:	0e 94 90 0b 	call	0x1720	; 0x1720 <__divmodhi4>
    1374:	46 2f       	mov	r20, r22
    1376:	24 2f       	mov	r18, r20
    1378:	37 2f       	mov	r19, r23
    137a:	80 5d       	subi	r24, 0xD0	; 208
    137c:	f7 01       	movw	r30, r14
    137e:	81 93       	st	Z+, r24
    1380:	7f 01       	movw	r14, r30
    1382:	ec 15       	cp	r30, r12
    1384:	fd 05       	cpc	r31, r13
    1386:	89 f7       	brne	.-30     	; 0x136a <lcd_int16+0x66>
    1388:	ff 24       	eor	r15, r15
    138a:	f3 94       	inc	r15
    138c:	f5 0c       	add	r15, r5
    138e:	f8 01       	movw	r30, r16
    1390:	e5 0d       	add	r30, r5
    1392:	f1 1d       	adc	r31, r1
    1394:	8e e2       	ldi	r24, 0x2E	; 46
    1396:	80 83       	st	Z, r24
    1398:	01 c0       	rjmp	.+2      	; 0x139c <lcd_int16+0x98>
    139a:	f9 2e       	mov	r15, r25
    139c:	6a e0       	ldi	r22, 0x0A	; 10
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	c9 01       	movw	r24, r18
    13a2:	0e 94 90 0b 	call	0x1720	; 0x1720 <__divmodhi4>
    13a6:	46 2f       	mov	r20, r22
    13a8:	24 2f       	mov	r18, r20
    13aa:	37 2f       	mov	r19, r23
    13ac:	91 e0       	ldi	r25, 0x01	; 1
    13ae:	9f 0d       	add	r25, r15
    13b0:	f8 01       	movw	r30, r16
    13b2:	ef 0d       	add	r30, r15
    13b4:	f1 1d       	adc	r31, r1
    13b6:	80 5d       	subi	r24, 0xD0	; 208
    13b8:	80 83       	st	Z, r24
    13ba:	21 15       	cp	r18, r1
    13bc:	31 05       	cpc	r19, r1
    13be:	69 f7       	brne	.-38     	; 0x139a <lcd_int16+0x96>
    13c0:	61 10       	cpse	r6, r1
    13c2:	5b c0       	rjmp	.+182    	; 0x147a <lcd_int16+0x176>
    13c4:	b7 fc       	sbrc	r11, 7
    13c6:	65 c0       	rjmp	.+202    	; 0x1492 <lcd_int16+0x18e>
    13c8:	99 20       	and	r9, r9
    13ca:	b1 f0       	breq	.+44     	; 0x13f8 <lcd_int16+0xf4>
    13cc:	68 2d       	mov	r22, r8
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	80 e2       	ldi	r24, 0x20	; 32
    13d2:	29 2f       	mov	r18, r25
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	49 2d       	mov	r20, r9
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	46 1b       	sub	r20, r22
    13dc:	57 0b       	sbc	r21, r23
    13de:	24 17       	cp	r18, r20
    13e0:	35 07       	cpc	r19, r21
    13e2:	54 f4       	brge	.+20     	; 0x13f8 <lcd_int16+0xf4>
    13e4:	9f 5f       	subi	r25, 0xFF	; 255
    13e6:	f8 01       	movw	r30, r16
    13e8:	e2 0f       	add	r30, r18
    13ea:	f3 1f       	adc	r31, r19
    13ec:	80 83       	st	Z, r24
    13ee:	29 2f       	mov	r18, r25
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	24 17       	cp	r18, r20
    13f4:	35 07       	cpc	r19, r21
    13f6:	b4 f3       	brlt	.-20     	; 0x13e4 <lcd_int16+0xe0>
    13f8:	77 20       	and	r7, r7
    13fa:	31 f0       	breq	.+12     	; 0x1408 <lcd_int16+0x104>
    13fc:	f8 01       	movw	r30, r16
    13fe:	e9 0f       	add	r30, r25
    1400:	f1 1d       	adc	r31, r1
    1402:	8d e2       	ldi	r24, 0x2D	; 45
    1404:	80 83       	st	Z, r24
    1406:	9f 5f       	subi	r25, 0xFF	; 255
    1408:	21 e0       	ldi	r18, 0x01	; 1
    140a:	91 50       	subi	r25, 0x01	; 1
    140c:	f8 01       	movw	r30, r16
    140e:	e9 0f       	add	r30, r25
    1410:	f1 1d       	adc	r31, r1
    1412:	80 81       	ld	r24, Z
    1414:	2f b9       	out	0x0f, r18	; 15
    1416:	77 9b       	sbis	0x0e, 7	; 14
    1418:	fe cf       	rjmp	.-4      	; 0x1416 <lcd_int16+0x112>
    141a:	8f b9       	out	0x0f, r24	; 15
    141c:	77 9b       	sbis	0x0e, 7	; 14
    141e:	fe cf       	rjmp	.-4      	; 0x141c <lcd_int16+0x118>
    1420:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1424:	88 60       	ori	r24, 0x08	; 8
    1426:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    142a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    142e:	87 7f       	andi	r24, 0xF7	; 247
    1430:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1434:	ef e9       	ldi	r30, 0x9F	; 159
    1436:	ff e0       	ldi	r31, 0x0F	; 15
    1438:	31 97       	sbiw	r30, 0x01	; 1
    143a:	f1 f7       	brne	.-4      	; 0x1438 <lcd_int16+0x134>
    143c:	00 c0       	rjmp	.+0      	; 0x143e <lcd_int16+0x13a>
    143e:	00 00       	nop
    1440:	91 11       	cpse	r25, r1
    1442:	e3 cf       	rjmp	.-58     	; 0x140a <lcd_int16+0x106>
    1444:	61 96       	adiw	r28, 0x11	; 17
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	1f 91       	pop	r17
    1456:	0f 91       	pop	r16
    1458:	ff 90       	pop	r15
    145a:	ef 90       	pop	r14
    145c:	df 90       	pop	r13
    145e:	cf 90       	pop	r12
    1460:	bf 90       	pop	r11
    1462:	af 90       	pop	r10
    1464:	9f 90       	pop	r9
    1466:	8f 90       	pop	r8
    1468:	7f 90       	pop	r7
    146a:	6f 90       	pop	r6
    146c:	5f 90       	pop	r5
    146e:	08 95       	ret
    1470:	f1 2c       	mov	r15, r1
    1472:	8e 01       	movw	r16, r28
    1474:	0f 5f       	subi	r16, 0xFF	; 255
    1476:	1f 4f       	sbci	r17, 0xFF	; 255
    1478:	91 cf       	rjmp	.-222    	; 0x139c <lcd_int16+0x98>
    147a:	99 20       	and	r9, r9
    147c:	09 f4       	brne	.+2      	; 0x1480 <lcd_int16+0x17c>
    147e:	bc cf       	rjmp	.-136    	; 0x13f8 <lcd_int16+0xf4>
    1480:	68 2d       	mov	r22, r8
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	80 e3       	ldi	r24, 0x30	; 48
    1486:	a5 cf       	rjmp	.-182    	; 0x13d2 <lcd_int16+0xce>
    1488:	22 27       	eor	r18, r18
    148a:	33 27       	eor	r19, r19
    148c:	28 1b       	sub	r18, r24
    148e:	39 0b       	sbc	r19, r25
    1490:	5c cf       	rjmp	.-328    	; 0x134a <lcd_int16+0x46>
    1492:	f3 94       	inc	r15
    1494:	f3 94       	inc	r15
    1496:	f8 01       	movw	r30, r16
    1498:	e9 0f       	add	r30, r25
    149a:	f1 1d       	adc	r31, r1
    149c:	8d e2       	ldi	r24, 0x2D	; 45
    149e:	80 83       	st	Z, r24
    14a0:	99 20       	and	r9, r9
    14a2:	59 f0       	breq	.+22     	; 0x14ba <lcd_int16+0x1b6>
    14a4:	2f 2d       	mov	r18, r15
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	49 2d       	mov	r20, r9
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	24 17       	cp	r18, r20
    14ae:	35 07       	cpc	r19, r21
    14b0:	24 f4       	brge	.+8      	; 0x14ba <lcd_int16+0x1b6>
    14b2:	9f 2d       	mov	r25, r15
    14b4:	71 2c       	mov	r7, r1
    14b6:	80 e2       	ldi	r24, 0x20	; 32
    14b8:	95 cf       	rjmp	.-214    	; 0x13e4 <lcd_int16+0xe0>
    14ba:	9f 2d       	mov	r25, r15
    14bc:	a5 cf       	rjmp	.-182    	; 0x1408 <lcd_int16+0x104>

000014be <main>:

/**********************************************************************
 *				spi_init
 **********************************************************************/
void spi_init(void){
DDRB |= ( (1 << PB2) | ( 1<< PB1) | (1<<PB0) ); //mosi and serial clock
    14be:	87 b3       	in	r24, 0x17	; 23
    14c0:	87 60       	ori	r24, 0x07	; 7
    14c2:	87 bb       	out	0x17, r24	; 23
SPCR |= ( (1 << MSTR) | (1 << SPE) ); //master mode, SPI enabled, clk low on idle, leading edge sample
    14c4:	8d b1       	in	r24, 0x0d	; 13
    14c6:	80 65       	ori	r24, 0x50	; 80
    14c8:	8d b9       	out	0x0d, r24	; 13
SPSR |= 1 << SPI2X;
    14ca:	70 9a       	sbi	0x0e, 0	; 14

DDRB |= 0xF0; // set PORTB 4-7 bits as outputs
    14cc:	87 b3       	in	r24, 0x17	; 23
    14ce:	80 6f       	ori	r24, 0xF0	; 240
    14d0:	87 bb       	out	0x17, r24	; 23
DDRA = 0x03; // set PORTA 6-7 bits as inputs
    14d2:	83 e0       	ldi	r24, 0x03	; 3
    14d4:	8a bb       	out	0x1a, r24	; 26
DDRD = (1 << PD2); // set PD2 as output
    14d6:	84 e0       	ldi	r24, 0x04	; 4
    14d8:	81 bb       	out	0x11, r24	; 17
DDRE = 0xFF;// set PORTE to all outputs
    14da:	cf ef       	ldi	r28, 0xFF	; 255
    14dc:	c2 b9       	out	0x02, r28	; 2
//***********************************************************************************
uint8_t main()
{
//DDRE &= ~(1 << PE3);
spi_init();	//initialize SPI and port configurations
lcd_init();	//initialize LCD display
    14de:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <lcd_init>
clear_display(); //Clean LCD display
    14e2:	0e 94 3d 07 	call	0xe7a	; 0xe7a <clear_display>

/**********************************************************************
 *				ADC_init
 **********************************************************************/
void ADC_init(void){
DDRF  &= ~(_BV(DDF7)); //make port F bit 7 the ADC input  
    14e6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    14ea:	8f 77       	andi	r24, 0x7F	; 127
    14ec:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
    14f0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    14f4:	8f 77       	andi	r24, 0x7F	; 127
    14f6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	
ADMUX = (1 << REFS0) | (1 << ADLAR) | 0x07; // reference to AVCC(5v), left adjusted (only reading  8bit), and channel 7
    14fa:	87 e6       	ldi	r24, 0x67	; 103
    14fc:	87 b9       	out	0x07, r24	; 7
//ADC enabled, single conversion, division factor is 128
ADCSRA = (1 << ADEN) | (1 << ADPS2) | ( 1 << ADPS1) | ( 1 << ADPS0) ; 
    14fe:	87 e8       	ldi	r24, 0x87	; 135
    1500:	86 b9       	out	0x06, r24	; 6

/**********************************************************************
 *				dimming_init
 **********************************************************************/
void dimming_init(void){
TCCR2 |= (1 << WGM21) | ( 1 << WGM20) | (1 << COM21) | ( 1 << CS20); // no prescale, clear on OC2 match, fast pwm mode
    1502:	85 b5       	in	r24, 0x25	; 37
    1504:	89 66       	ori	r24, 0x69	; 105
    1506:	85 bd       	out	0x25, r24	; 37
TIMSK |= (1 << OCIE2); // Compare match interrupt enable timer/counter0
    1508:	87 b7       	in	r24, 0x37	; 55
    150a:	80 68       	ori	r24, 0x80	; 128
    150c:	87 bf       	out	0x37, r24	; 55
TCNT2 = 0; //set count at 0
    150e:	14 bc       	out	0x24, r1	; 36

/**********************************************************************
 *				tone_init
 **********************************************************************/
void tone_init(void){
DDRC = 0xFF; // set all of PORTC as outputs
    1510:	c4 bb       	out	0x14, r28	; 20
TCCR1A = 0x00; // normal operation w/ OC1A is disconnected
    1512:	1f bc       	out	0x2f, r1	; 47
TIMSK |= 1 << OCIE1A; //output compare enable for timercounter1A
    1514:	87 b7       	in	r24, 0x37	; 55
    1516:	80 61       	ori	r24, 0x10	; 16
    1518:	87 bf       	out	0x37, r24	; 55
OCR1A = 3999; // 4kHz and triggers ISR
    151a:	8f e9       	ldi	r24, 0x9F	; 159
    151c:	9f e0       	ldi	r25, 0x0F	; 15
    151e:	9b bd       	out	0x2b, r25	; 43
    1520:	8a bd       	out	0x2a, r24	; 42
//clk is not set
TCCR1B |= (1 << WGM12); // CTC mode, clear with OCR and no prescaling
    1522:	8e b5       	in	r24, 0x2e	; 46
    1524:	88 60       	ori	r24, 0x08	; 8
    1526:	8e bd       	out	0x2e, r24	; 46

/**********************************************************************
 *				clock_init
 **********************************************************************/
void clock_init(void){
ASSR   |=  1<<AS0; //ext osc TOSC in 32kHz 
    1528:	80 b7       	in	r24, 0x30	; 48
    152a:	88 60       	ori	r24, 0x08	; 8
    152c:	80 bf       	out	0x30, r24	; 48
TIMSK |= 1 << OCIE0; //interrupt flag on compare register 
    152e:	87 b7       	in	r24, 0x37	; 55
    1530:	82 60       	ori	r24, 0x02	; 2
    1532:	87 bf       	out	0x37, r24	; 55
TCCR0 |= ((1 << WGM01) | (1 << CS00)); //CTC mode, with clk/no pre-scaling
    1534:	83 b7       	in	r24, 0x33	; 51
    1536:	89 60       	ori	r24, 0x09	; 9
    1538:	83 bf       	out	0x33, r24	; 51
OCR0 = 127; // Set top 
    153a:	8f e7       	ldi	r24, 0x7F	; 127
    153c:	81 bf       	out	0x31, r24	; 49

/**********************************************************************
 *				volume_init
 **********************************************************************/
void volume_init(void){
TCCR3A = (1 << COM3A1 | (1 << WGM31) ); //normal operation w/ OC3A is disconnected
    153e:	82 e8       	ldi	r24, 0x82	; 130
    1540:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
TCCR3B |= (  (1 << CS30) | ( 1 << WGM32) | (1 << WGM33) ); //fast pwm 
    1544:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1548:	89 61       	ori	r24, 0x19	; 25
    154a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
ICR3 = 10; // Set overflow top 
    154e:	8a e0       	ldi	r24, 0x0A	; 10
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1556:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
OCR3A = 0; // set compare match
    155a:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    155e:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		TCCR1B &= ~(1 << CS10);	//clear the clock
		mode &= ~(1 << 5); // set conditions only once so clear the bit
		break;

	case 0x08: // setting time
		incr_time = 1;	//increment time
    1562:	c1 e0       	ldi	r28, 0x01	; 1
    1564:	d0 e0       	ldi	r29, 0x00	; 0
		TCCR1B &= ~(1 << CS10);	//clear the clock
	}
		snooze_time = TRUE;
		int temp = seconds % 10;
		if(snooze_time){
			if(seconds % 10 == 0){
    1566:	0a e0       	ldi	r16, 0x0A	; 10
    1568:	10 e0       	ldi	r17, 0x00	; 0
			tone = TRUE;
			OCR3A = 5;
    156a:	85 e0       	ldi	r24, 0x05	; 5
    156c:	e8 2e       	mov	r14, r24
    156e:	f1 2c       	mov	r15, r1

time_tracker_12(); //keep track of the time in 12 hr format 



PORTA = 0xFF;  //make PORTA an input port with pullups 	
    1570:	dd 24       	eor	r13, r13
    1572:	da 94       	dec	r13
	}

	//handles decimal point display when alarm is triggered
	if(alarm){
		PORTB = 0; // digit 0
		PORTA = 0x7F; // turn on decimal point
    1574:	9f e7       	ldi	r25, 0x7F	; 127
    1576:	c9 2e       	mov	r12, r25
volume_init();	//initialize timer/counter3



while(1){ // main loop
ADCSR |= (1<<ADSC); //start writing 
    1578:	36 9a       	sbi	0x06, 6	; 6
	while(bit_is_clear(ADCSRA, ADIF)){};
    157a:	34 9b       	sbis	0x06, 4	; 6
    157c:	fe cf       	rjmp	.-4      	; 0x157a <main+0xbc>

ADCSR |= (1 << ADIF);//clear flag by writing one
    157e:	34 9a       	sbi	0x06, 4	; 6
adc_data = ADCH; // store ADC values
    1580:	85 b1       	in	r24, 0x05	; 5
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <adc_data+0x1>
    1588:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <adc_data>
	
//write_SPI(mode); // write to the bar graph

switch(mode){
    158c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <mode>
    1590:	88 30       	cpi	r24, 0x08	; 8
    1592:	09 f4       	brne	.+2      	; 0x1596 <main+0xd8>
    1594:	ad c0       	rjmp	.+346    	; 0x16f0 <main+0x232>
    1596:	08 f4       	brcc	.+2      	; 0x159a <main+0xdc>
    1598:	4e c0       	rjmp	.+156    	; 0x1636 <main+0x178>
    159a:	80 32       	cpi	r24, 0x20	; 32
    159c:	09 f4       	brne	.+2      	; 0x15a0 <main+0xe2>
    159e:	89 c0       	rjmp	.+274    	; 0x16b2 <main+0x1f4>
    15a0:	80 34       	cpi	r24, 0x40	; 64
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <main+0xe8>
    15a4:	79 c0       	rjmp	.+242    	; 0x1698 <main+0x1da>
	case 0x40: //Setting alarm
		alarm = TRUE;	//alarm is on
    15a6:	d0 93 41 01 	sts	0x0141, r29	; 0x800141 <alarm+0x1>
    15aa:	c0 93 40 01 	sts	0x0140, r28	; 0x800140 <alarm>
		tone = TRUE;	//turn on tone
    15ae:	d0 93 3b 01 	sts	0x013B, r29	; 0x80013b <tone+0x1>
    15b2:	c0 93 3a 01 	sts	0x013A, r28	; 0x80013a <tone>
		dp = TRUE;	//turn on decimal point
    15b6:	d0 93 3f 01 	sts	0x013F, r29	; 0x80013f <dp+0x1>
    15ba:	c0 93 3e 01 	sts	0x013E, r28	; 0x80013e <dp>
		display = TRUE;	//set to display alarm time
    15be:	d0 93 39 01 	sts	0x0139, r29	; 0x800139 <display+0x1>
    15c2:	c0 93 38 01 	sts	0x0138, r28	; 0x800138 <display>
		incr_alarm = 1;	//increment alarm time
    15c6:	d0 93 31 01 	sts	0x0131, r29	; 0x800131 <incr_alarm+0x1>
    15ca:	c0 93 30 01 	sts	0x0130, r28	; 0x800130 <incr_alarm>

//you can set an if statement to change the bounds whether setting == true or false
		alarm_bound_12(); //bound the time for 12hr mark
    15ce:	0e 94 08 02 	call	0x410	; 0x410 <alarm_bound_12>
		incr_time = 0; 	// encoders should not change time when clock is running
		incr_alarm = 0; // encoders should not change alarm time when clock is running 
		seconds_holder = 1; // increment seconds 
}

time_tracker_12(); //keep track of the time in 12 hr format 
    15d2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <time_tracker_12>



PORTA = 0xFF;  //make PORTA an input port with pullups 	
    15d6:	db ba       	out	0x1b, r13	; 27

if((alarm == TRUE) && (mode == 0x40)){
    15d8:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <alarm>
    15dc:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <alarm+0x1>
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	29 f4       	brne	.+10     	; 0x15ee <main+0x130>
    15e4:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <mode>
    15e8:	80 34       	cpi	r24, 0x40	; 64
    15ea:	09 f4       	brne	.+2      	; 0x15ee <main+0x130>
    15ec:	8c c0       	rjmp	.+280    	; 0x1706 <main+0x248>
	segsum(alarm_time);
	string2lcd(lcd_string_array);
	cursor_home();
}
else{segsum(time);}
    15ee:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
    15f2:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
    15f6:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <segsum>

//DIGIT SHIFTS
//bound a counter (0-4) to keep track of digit to display ;

PORTB = 0x00;
    15fa:	18 ba       	out	0x18, r1	; 24
    15fc:	ed e0       	ldi	r30, 0x0D	; 13
    15fe:	f1 e0       	ldi	r31, 0x01	; 1
    1600:	80 e0       	ldi	r24, 0x00	; 0

	for(int index = 0; index < 5; index++){
		PORTB = index << 4; // within 4 digits for the hex value
    1602:	98 2f       	mov	r25, r24
    1604:	92 95       	swap	r25
    1606:	90 7f       	andi	r25, 0xF0	; 240
    1608:	98 bb       	out	0x18, r25	; 24
		PORTA = segment_data[index]; //send 7 segment code to LED segments
    160a:	91 91       	ld	r25, Z+
    160c:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    160e:	af e9       	ldi	r26, 0x9F	; 159
    1610:	bf e0       	ldi	r27, 0x0F	; 15
    1612:	11 97       	sbiw	r26, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <main+0x154>
    1616:	00 c0       	rjmp	.+0      	; 0x1618 <main+0x15a>
    1618:	00 00       	nop
    161a:	8f 5f       	subi	r24, 0xFF	; 255
//DIGIT SHIFTS
//bound a counter (0-4) to keep track of digit to display ;

PORTB = 0x00;

	for(int index = 0; index < 5; index++){
    161c:	85 30       	cpi	r24, 0x05	; 5
    161e:	89 f7       	brne	.-30     	; 0x1602 <main+0x144>
		PORTA = segment_data[index]; //send 7 segment code to LED segments
		_delay_ms(1); // add delay	
	}

	//handles decimal point display when alarm is triggered
	if(alarm){
    1620:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <alarm>
    1624:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <alarm+0x1>
    1628:	89 2b       	or	r24, r25
    162a:	11 f0       	breq	.+4      	; 0x1630 <main+0x172>
		PORTB = 0; // digit 0
    162c:	18 ba       	out	0x18, r1	; 24
		PORTA = 0x7F; // turn on decimal point
    162e:	cb ba       	out	0x1b, r12	; 27
	}
DDRA = 0xFF;  //make PORTA an output
    1630:	da ba       	out	0x1a, r13	; 26
sei(); // ISR will return here
    1632:	78 94       	sei

}//while
    1634:	a1 cf       	rjmp	.-190    	; 0x1578 <main+0xba>
ADCSR |= (1 << ADIF);//clear flag by writing one
adc_data = ADCH; // store ADC values
	
//write_SPI(mode); // write to the bar graph

switch(mode){
    1636:	84 30       	cpi	r24, 0x04	; 4
    1638:	79 f5       	brne	.+94     	; 0x1698 <main+0x1da>
		time_bound_12();	//bound the encoders
		break;
	
	case 0x04://snooze alarm
	//	if( (seconds % 10) == 0){hr_temp = holder;} //after 10 seconds has passed then trigger alarm
	if(snooze_time == FALSE){
    163a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <snooze_time>
    163e:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <snooze_time+0x1>
    1642:	89 2b       	or	r24, r25
    1644:	59 f4       	brne	.+22     	; 0x165c <main+0x19e>
		tone = FALSE;
    1646:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <tone+0x1>
    164a:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <tone>
		OCR3A = 0;
    164e:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1652:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		TCCR1B &= ~(1 << CS10);	//clear the clock
    1656:	8e b5       	in	r24, 0x2e	; 46
    1658:	8e 7f       	andi	r24, 0xFE	; 254
    165a:	8e bd       	out	0x2e, r24	; 46
	}
		snooze_time = TRUE;
    165c:	d0 93 37 01 	sts	0x0137, r29	; 0x800137 <snooze_time+0x1>
    1660:	c0 93 36 01 	sts	0x0136, r28	; 0x800136 <snooze_time>
		int temp = seconds % 10;
    1664:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <seconds>
    1668:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <seconds+0x1>
		if(snooze_time){
			if(seconds % 10 == 0){
    166c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <seconds>
    1670:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <seconds+0x1>
    1674:	b8 01       	movw	r22, r16
    1676:	0e 94 90 0b 	call	0x1720	; 0x1720 <__divmodhi4>
    167a:	89 2b       	or	r24, r25
    167c:	09 f0       	breq	.+2      	; 0x1680 <main+0x1c2>
    167e:	a9 cf       	rjmp	.-174    	; 0x15d2 <main+0x114>
			tone = TRUE;
    1680:	d0 93 3b 01 	sts	0x013B, r29	; 0x80013b <tone+0x1>
    1684:	c0 93 3a 01 	sts	0x013A, r28	; 0x80013a <tone>
			OCR3A = 5;
    1688:	f0 92 87 00 	sts	0x0087, r15	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    168c:	e0 92 86 00 	sts	0x0086, r14	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
			TCCR1B |= 1 << CS10;
    1690:	8e b5       	in	r24, 0x2e	; 46
    1692:	81 60       	ori	r24, 0x01	; 1
    1694:	8e bd       	out	0x2e, r24	; 46
    1696:	9d cf       	rjmp	.-198    	; 0x15d2 <main+0x114>
		
	//	mode &= ~(1 << 2);	//set conditions only once so clear the bit
		break;

	default:
		incr_time = 0; 	// encoders should not change time when clock is running
    1698:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <incr_time+0x1>
    169c:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <incr_time>
		incr_alarm = 0; // encoders should not change alarm time when clock is running 
    16a0:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <incr_alarm+0x1>
    16a4:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <incr_alarm>
		seconds_holder = 1; // increment seconds 
    16a8:	d0 93 13 01 	sts	0x0113, r29	; 0x800113 <seconds_holder+0x1>
    16ac:	c0 93 12 01 	sts	0x0112, r28	; 0x800112 <seconds_holder>
    16b0:	90 cf       	rjmp	.-224    	; 0x15d2 <main+0x114>
		alarm_bound_12(); //bound the time for 12hr mark
//		alarm_bound_24(); //bound the time for 24hr mark	
		break;

	case 0x20: //disable alarm	
		alarm = FALSE;	//alarm is off
    16b2:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <alarm+0x1>
    16b6:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <alarm>
		dp = FALSE;	//turn off the decimal point
    16ba:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <dp+0x1>
    16be:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <dp>
		tone = FALSE;	//turn off the tone
    16c2:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <tone+0x1>
    16c6:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <tone>
		snooze_time = FALSE;
    16ca:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <snooze_time+0x1>
    16ce:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <snooze_time>
		clear_display(); //clear lcd screen
    16d2:	0e 94 3d 07 	call	0xe7a	; 0xe7a <clear_display>
		OCR3A = 0;	// clear the compare
    16d6:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    16da:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		TCCR1B &= ~(1 << CS10);	//clear the clock
    16de:	8e b5       	in	r24, 0x2e	; 46
    16e0:	8e 7f       	andi	r24, 0xFE	; 254
    16e2:	8e bd       	out	0x2e, r24	; 46
		mode &= ~(1 << 5); // set conditions only once so clear the bit
    16e4:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <mode>
    16e8:	8f 7d       	andi	r24, 0xDF	; 223
    16ea:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <mode>
		break;
    16ee:	71 cf       	rjmp	.-286    	; 0x15d2 <main+0x114>

	case 0x08: // setting time
		incr_time = 1;	//increment time
    16f0:	d0 93 33 01 	sts	0x0133, r29	; 0x800133 <incr_time+0x1>
    16f4:	c0 93 32 01 	sts	0x0132, r28	; 0x800132 <incr_time>
		seconds_holder = 0;	//seconds is not counting
    16f8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <seconds_holder+0x1>
    16fc:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <seconds_holder>
		time_bound_12();	//bound the encoders
    1700:	0e 94 76 02 	call	0x4ec	; 0x4ec <time_bound_12>
		break;
    1704:	66 cf       	rjmp	.-308    	; 0x15d2 <main+0x114>


PORTA = 0xFF;  //make PORTA an input port with pullups 	

if((alarm == TRUE) && (mode == 0x40)){
	segsum(alarm_time);
    1706:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <alarm_time>
    170a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <alarm_time+0x1>
    170e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <segsum>
	string2lcd(lcd_string_array);
    1712:	88 e1       	ldi	r24, 0x18	; 24
    1714:	91 e0       	ldi	r25, 0x01	; 1
    1716:	0e 94 b9 07 	call	0xf72	; 0xf72 <string2lcd>
	cursor_home();
    171a:	0e 94 55 07 	call	0xeaa	; 0xeaa <cursor_home>
    171e:	6d cf       	rjmp	.-294    	; 0x15fa <main+0x13c>

00001720 <__divmodhi4>:
    1720:	97 fb       	bst	r25, 7
    1722:	07 2e       	mov	r0, r23
    1724:	16 f4       	brtc	.+4      	; 0x172a <__divmodhi4+0xa>
    1726:	00 94       	com	r0
    1728:	07 d0       	rcall	.+14     	; 0x1738 <__divmodhi4_neg1>
    172a:	77 fd       	sbrc	r23, 7
    172c:	09 d0       	rcall	.+18     	; 0x1740 <__divmodhi4_neg2>
    172e:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__udivmodhi4>
    1732:	07 fc       	sbrc	r0, 7
    1734:	05 d0       	rcall	.+10     	; 0x1740 <__divmodhi4_neg2>
    1736:	3e f4       	brtc	.+14     	; 0x1746 <__divmodhi4_exit>

00001738 <__divmodhi4_neg1>:
    1738:	90 95       	com	r25
    173a:	81 95       	neg	r24
    173c:	9f 4f       	sbci	r25, 0xFF	; 255
    173e:	08 95       	ret

00001740 <__divmodhi4_neg2>:
    1740:	70 95       	com	r23
    1742:	61 95       	neg	r22
    1744:	7f 4f       	sbci	r23, 0xFF	; 255

00001746 <__divmodhi4_exit>:
    1746:	08 95       	ret

00001748 <__divmodsi4>:
    1748:	05 2e       	mov	r0, r21
    174a:	97 fb       	bst	r25, 7
    174c:	1e f4       	brtc	.+6      	; 0x1754 <__divmodsi4+0xc>
    174e:	00 94       	com	r0
    1750:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__negsi2>
    1754:	57 fd       	sbrc	r21, 7
    1756:	07 d0       	rcall	.+14     	; 0x1766 <__divmodsi4_neg2>
    1758:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__udivmodsi4>
    175c:	07 fc       	sbrc	r0, 7
    175e:	03 d0       	rcall	.+6      	; 0x1766 <__divmodsi4_neg2>
    1760:	4e f4       	brtc	.+18     	; 0x1774 <__divmodsi4_exit>
    1762:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__negsi2>

00001766 <__divmodsi4_neg2>:
    1766:	50 95       	com	r21
    1768:	40 95       	com	r20
    176a:	30 95       	com	r19
    176c:	21 95       	neg	r18
    176e:	3f 4f       	sbci	r19, 0xFF	; 255
    1770:	4f 4f       	sbci	r20, 0xFF	; 255
    1772:	5f 4f       	sbci	r21, 0xFF	; 255

00001774 <__divmodsi4_exit>:
    1774:	08 95       	ret

00001776 <__negsi2>:
    1776:	90 95       	com	r25
    1778:	80 95       	com	r24
    177a:	70 95       	com	r23
    177c:	61 95       	neg	r22
    177e:	7f 4f       	sbci	r23, 0xFF	; 255
    1780:	8f 4f       	sbci	r24, 0xFF	; 255
    1782:	9f 4f       	sbci	r25, 0xFF	; 255
    1784:	08 95       	ret

00001786 <__umulhisi3>:
    1786:	a2 9f       	mul	r26, r18
    1788:	b0 01       	movw	r22, r0
    178a:	b3 9f       	mul	r27, r19
    178c:	c0 01       	movw	r24, r0
    178e:	a3 9f       	mul	r26, r19
    1790:	70 0d       	add	r23, r0
    1792:	81 1d       	adc	r24, r1
    1794:	11 24       	eor	r1, r1
    1796:	91 1d       	adc	r25, r1
    1798:	b2 9f       	mul	r27, r18
    179a:	70 0d       	add	r23, r0
    179c:	81 1d       	adc	r24, r1
    179e:	11 24       	eor	r1, r1
    17a0:	91 1d       	adc	r25, r1
    17a2:	08 95       	ret

000017a4 <__udivmodhi4>:
    17a4:	aa 1b       	sub	r26, r26
    17a6:	bb 1b       	sub	r27, r27
    17a8:	51 e1       	ldi	r21, 0x11	; 17
    17aa:	07 c0       	rjmp	.+14     	; 0x17ba <__udivmodhi4_ep>

000017ac <__udivmodhi4_loop>:
    17ac:	aa 1f       	adc	r26, r26
    17ae:	bb 1f       	adc	r27, r27
    17b0:	a6 17       	cp	r26, r22
    17b2:	b7 07       	cpc	r27, r23
    17b4:	10 f0       	brcs	.+4      	; 0x17ba <__udivmodhi4_ep>
    17b6:	a6 1b       	sub	r26, r22
    17b8:	b7 0b       	sbc	r27, r23

000017ba <__udivmodhi4_ep>:
    17ba:	88 1f       	adc	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	5a 95       	dec	r21
    17c0:	a9 f7       	brne	.-22     	; 0x17ac <__udivmodhi4_loop>
    17c2:	80 95       	com	r24
    17c4:	90 95       	com	r25
    17c6:	bc 01       	movw	r22, r24
    17c8:	cd 01       	movw	r24, r26
    17ca:	08 95       	ret

000017cc <__udivmodsi4>:
    17cc:	a1 e2       	ldi	r26, 0x21	; 33
    17ce:	1a 2e       	mov	r1, r26
    17d0:	aa 1b       	sub	r26, r26
    17d2:	bb 1b       	sub	r27, r27
    17d4:	fd 01       	movw	r30, r26
    17d6:	0d c0       	rjmp	.+26     	; 0x17f2 <__udivmodsi4_ep>

000017d8 <__udivmodsi4_loop>:
    17d8:	aa 1f       	adc	r26, r26
    17da:	bb 1f       	adc	r27, r27
    17dc:	ee 1f       	adc	r30, r30
    17de:	ff 1f       	adc	r31, r31
    17e0:	a2 17       	cp	r26, r18
    17e2:	b3 07       	cpc	r27, r19
    17e4:	e4 07       	cpc	r30, r20
    17e6:	f5 07       	cpc	r31, r21
    17e8:	20 f0       	brcs	.+8      	; 0x17f2 <__udivmodsi4_ep>
    17ea:	a2 1b       	sub	r26, r18
    17ec:	b3 0b       	sbc	r27, r19
    17ee:	e4 0b       	sbc	r30, r20
    17f0:	f5 0b       	sbc	r31, r21

000017f2 <__udivmodsi4_ep>:
    17f2:	66 1f       	adc	r22, r22
    17f4:	77 1f       	adc	r23, r23
    17f6:	88 1f       	adc	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	1a 94       	dec	r1
    17fc:	69 f7       	brne	.-38     	; 0x17d8 <__udivmodsi4_loop>
    17fe:	60 95       	com	r22
    1800:	70 95       	com	r23
    1802:	80 95       	com	r24
    1804:	90 95       	com	r25
    1806:	9b 01       	movw	r18, r22
    1808:	ac 01       	movw	r20, r24
    180a:	bd 01       	movw	r22, r26
    180c:	cf 01       	movw	r24, r30
    180e:	08 95       	ret

00001810 <_exit>:
    1810:	f8 94       	cli

00001812 <__stop_program>:
    1812:	ff cf       	rjmp	.-2      	; 0x1812 <__stop_program>
