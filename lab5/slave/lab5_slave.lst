
lab5_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000f9a  0000102e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000115  00800100  00800100  0000102e  2**0
                  ALLOC
  3 .stab         0000321c  00000000  00000000  00001030  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015ec  00000000  00000000  0000424c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005838  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000584c  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00005888  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00006008  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00006720  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  0000673a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
   4:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
   8:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
   c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  10:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  14:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  18:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  1c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  20:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  24:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  28:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  2c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  30:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  34:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  38:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  3c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  40:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  44:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  48:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_18>
  4c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  50:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  54:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  58:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  5c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  60:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  64:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  68:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  6c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  70:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  74:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  78:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  7c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  80:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  84:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <__vector_33>
  88:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  8c:	5b 06       	cpc	r5, r27
  8e:	32 06       	cpc	r3, r18
  90:	32 06       	cpc	r3, r18
  92:	32 06       	cpc	r3, r18
  94:	32 06       	cpc	r3, r18
  96:	32 06       	cpc	r3, r18
  98:	32 06       	cpc	r3, r18
  9a:	32 06       	cpc	r3, r18
  9c:	5b 06       	cpc	r5, r27
  9e:	32 06       	cpc	r3, r18
  a0:	32 06       	cpc	r3, r18
  a2:	32 06       	cpc	r3, r18
  a4:	32 06       	cpc	r3, r18
  a6:	32 06       	cpc	r3, r18
  a8:	32 06       	cpc	r3, r18
  aa:	32 06       	cpc	r3, r18
  ac:	65 06       	cpc	r6, r21
  ae:	32 06       	cpc	r3, r18
  b0:	32 06       	cpc	r3, r18
  b2:	32 06       	cpc	r3, r18
  b4:	32 06       	cpc	r3, r18
  b6:	32 06       	cpc	r3, r18
  b8:	32 06       	cpc	r3, r18
  ba:	32 06       	cpc	r3, r18
  bc:	32 06       	cpc	r3, r18
  be:	32 06       	cpc	r3, r18
  c0:	32 06       	cpc	r3, r18
  c2:	32 06       	cpc	r3, r18
  c4:	32 06       	cpc	r3, r18
  c6:	32 06       	cpc	r3, r18
  c8:	32 06       	cpc	r3, r18
  ca:	32 06       	cpc	r3, r18
  cc:	65 06       	cpc	r6, r21
  ce:	32 06       	cpc	r3, r18
  d0:	32 06       	cpc	r3, r18
  d2:	32 06       	cpc	r3, r18
  d4:	32 06       	cpc	r3, r18
  d6:	32 06       	cpc	r3, r18
  d8:	32 06       	cpc	r3, r18
  da:	32 06       	cpc	r3, r18
  dc:	32 06       	cpc	r3, r18
  de:	32 06       	cpc	r3, r18
  e0:	32 06       	cpc	r3, r18
  e2:	32 06       	cpc	r3, r18
  e4:	32 06       	cpc	r3, r18
  e6:	32 06       	cpc	r3, r18
  e8:	32 06       	cpc	r3, r18
  ea:	32 06       	cpc	r3, r18
  ec:	7c 06       	cpc	r7, r28
  ee:	32 06       	cpc	r3, r18
  f0:	32 06       	cpc	r3, r18
  f2:	32 06       	cpc	r3, r18
  f4:	32 06       	cpc	r3, r18
  f6:	32 06       	cpc	r3, r18
  f8:	32 06       	cpc	r3, r18
  fa:	32 06       	cpc	r3, r18
  fc:	80 06       	cpc	r8, r16
  fe:	32 06       	cpc	r3, r18
 100:	32 06       	cpc	r3, r18
 102:	32 06       	cpc	r3, r18
 104:	32 06       	cpc	r3, r18
 106:	32 06       	cpc	r3, r18
 108:	32 06       	cpc	r3, r18
 10a:	32 06       	cpc	r3, r18
 10c:	32 06       	cpc	r3, r18
 10e:	32 06       	cpc	r3, r18
 110:	32 06       	cpc	r3, r18
 112:	32 06       	cpc	r3, r18
 114:	32 06       	cpc	r3, r18
 116:	32 06       	cpc	r3, r18
 118:	32 06       	cpc	r3, r18
 11a:	32 06       	cpc	r3, r18
 11c:	8e 06       	cpc	r8, r30
 11e:	32 06       	cpc	r3, r18
 120:	32 06       	cpc	r3, r18
 122:	32 06       	cpc	r3, r18
 124:	32 06       	cpc	r3, r18
 126:	32 06       	cpc	r3, r18
 128:	32 06       	cpc	r3, r18
 12a:	32 06       	cpc	r3, r18
 12c:	4c 06       	cpc	r4, r28

0000012e <__ctors_end>:
 12e:	11 24       	eor	r1, r1
 130:	1f be       	out	0x3f, r1	; 63
 132:	cf ef       	ldi	r28, 0xFF	; 255
 134:	d0 e1       	ldi	r29, 0x10	; 16
 136:	de bf       	out	0x3e, r29	; 62
 138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_clear_bss>:
 13a:	22 e0       	ldi	r18, 0x02	; 2
 13c:	a0 e0       	ldi	r26, 0x00	; 0
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	01 c0       	rjmp	.+2      	; 0x144 <.do_clear_bss_start>

00000142 <.do_clear_bss_loop>:
 142:	1d 92       	st	X+, r1

00000144 <.do_clear_bss_start>:
 144:	a5 31       	cpi	r26, 0x15	; 21
 146:	b2 07       	cpc	r27, r18
 148:	e1 f7       	brne	.-8      	; 0x142 <.do_clear_bss_loop>
 14a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <main>
 14e:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <_exit>

00000152 <__bad_interrupt>:
 152:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000156 <spi_init>:
uint8_t           send_seq=0;         //transmit sequence number
char              lcd_string[3];      //holds value of sequence number
char 		  uart_buf[16];

void spi_init(void){
  DDRB   = DDRB | 0x07;           //Turn on SS, MOSI, SCLK pins
 156:	87 b3       	in	r24, 0x17	; 23
 158:	87 60       	ori	r24, 0x07	; 7
 15a:	87 bb       	out	0x17, r24	; 23
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
 15c:	8d b1       	in	r24, 0x0d	; 13
 15e:	80 65       	ori	r24, 0x50	; 80
 160:	8d b9       	out	0x0d, r24	; 13
  SPSR  |= (1<<SPI2X);            //run at double speed 
 162:	70 9a       	sbi	0x0e, 0	; 14
 164:	08 95       	ret

00000166 <__vector_18>:
	  
	  
 }//while
}//main

ISR(USART0_RX_vect){
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	0b b6       	in	r0, 0x3b	; 59
 172:	0f 92       	push	r0
 174:	2f 93       	push	r18
 176:	3f 93       	push	r19
 178:	4f 93       	push	r20
 17a:	5f 93       	push	r21
 17c:	6f 93       	push	r22
 17e:	7f 93       	push	r23
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31
//char temp = uart_getc();
rx_char = UDR0;              //get character
 18c:	8c b1       	in	r24, 0x0c	; 12
 18e:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <rx_char>
     uart_puts(lcd_str_array);
 192:	8b e2       	ldi	r24, 0x2B	; 43
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <uart_puts>
    uart_putc('\0');
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <uart_putc>
	i++;	
	}
}	
}
*/
}
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	bf 91       	pop	r27
 1a6:	af 91       	pop	r26
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	7f 91       	pop	r23
 1ae:	6f 91       	pop	r22
 1b0:	5f 91       	pop	r21
 1b2:	4f 91       	pop	r20
 1b4:	3f 91       	pop	r19
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0b be       	out	0x3b, r0	; 59
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 1c6:	5d 9b       	sbis	0x0b, 5	; 11
 1c8:	fe cf       	rjmp	.-4      	; 0x1c6 <uart_putc>
    UDR0 = data;    // Send data byte
 1ca:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 1cc:	5d 9b       	sbis	0x0b, 5	; 11
 1ce:	fe cf       	rjmp	.-4      	; 0x1cc <uart_putc+0x6>
}
 1d0:	08 95       	ret

000001d2 <uart1_putc>:
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 1d2:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 1d6:	95 ff       	sbrs	r25, 5
 1d8:	fc cf       	rjmp	.-8      	; 0x1d2 <uart1_putc>
    UDR1 = data;    // Send data byte
 1da:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 1de:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 1e2:	85 ff       	sbrs	r24, 5
 1e4:	fc cf       	rjmp	.-8      	; 0x1de <uart1_putc+0xc>
}
 1e6:	08 95       	ret

000001e8 <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
 1e8:	fc 01       	movw	r30, r24
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 1ea:	90 81       	ld	r25, Z
 1ec:	99 23       	and	r25, r25
 1ee:	49 f0       	breq	.+18     	; 0x202 <uart_puts+0x1a>
 1f0:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 1f2:	5d 9b       	sbis	0x0b, 5	; 11
 1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
 1f6:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 1f8:	5d 9b       	sbis	0x0b, 5	; 11
 1fa:	fe cf       	rjmp	.-4      	; 0x1f8 <uart_puts+0x10>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 1fc:	91 91       	ld	r25, Z+
 1fe:	91 11       	cpse	r25, r1
 200:	f8 cf       	rjmp	.-16     	; 0x1f2 <uart_puts+0xa>
 202:	08 95       	ret

00000204 <uart1_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 204:	fc 01       	movw	r30, r24
 206:	20 81       	ld	r18, Z
 208:	22 23       	and	r18, r18
 20a:	71 f0       	breq	.+28     	; 0x228 <uart1_puts+0x24>
 20c:	31 96       	adiw	r30, 0x01	; 1
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 20e:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 212:	95 ff       	sbrs	r25, 5
 214:	fc cf       	rjmp	.-8      	; 0x20e <uart1_puts+0xa>
    UDR1 = data;    // Send data byte
 216:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 21a:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 21e:	95 ff       	sbrs	r25, 5
 220:	fc cf       	rjmp	.-8      	; 0x21a <uart1_puts+0x16>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 222:	21 91       	ld	r18, Z+
 224:	21 11       	cpse	r18, r1
 226:	f3 cf       	rjmp	.-26     	; 0x20e <uart1_puts+0xa>
 228:	08 95       	ret

0000022a <uart_puts_p>:
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 22a:	9c 01       	movw	r18, r24
 22c:	fc 01       	movw	r30, r24
 22e:	44 91       	lpm	r20, Z
 230:	44 23       	and	r20, r20
 232:	69 f0       	breq	.+26     	; 0x24e <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	f9 01       	movw	r30, r18
 238:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 23a:	5d 9b       	sbis	0x0b, 5	; 11
 23c:	fe cf       	rjmp	.-4      	; 0x23a <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
 23e:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 240:	5d 9b       	sbis	0x0b, 5	; 11
 242:	fe cf       	rjmp	.-4      	; 0x240 <uart_puts_p+0x16>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 244:	9c 01       	movw	r18, r24
 246:	fc 01       	movw	r30, r24
 248:	44 91       	lpm	r20, Z
 24a:	41 11       	cpse	r20, r1
 24c:	f3 cf       	rjmp	.-26     	; 0x234 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
 24e:	08 95       	ret

00000250 <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
 250:	8a b1       	in	r24, 0x0a	; 10
 252:	88 69       	ori	r24, 0x98	; 152
 254:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 256:	e5 e9       	ldi	r30, 0x95	; 149
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	86 60       	ori	r24, 0x06	; 6
 25e:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
 260:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
 264:	87 e6       	ldi	r24, 0x67	; 103
 266:	89 b9       	out	0x09, r24	; 9
 268:	08 95       	ret

0000026a <uart1_init>:
//must be in place for the MAX232 chip to get data.

void uart1_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//UCSR1B |= (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1); //INTERRUPTS ENABLED
  UCSR1B |= (1<<RXEN1) | (1<<TXEN1);               //INTERRUPS DISABLED
 26a:	ea e9       	ldi	r30, 0x9A	; 154
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	88 61       	ori	r24, 0x18	; 24
 272:	80 83       	st	Z, r24

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);
 274:	ed e9       	ldi	r30, 0x9D	; 157
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	86 60       	ori	r24, 0x06	; 6
 27c:	80 83       	st	Z, r24
  UBRR1H = (BAUDVALUE_1 >>8 ); //load upper byte of the baud rate into UBRR 
 27e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  UBRR1L =  BAUDVALUE_1;       //load lower byte of the baud rate into UBRR 
 282:	87 e6       	ldi	r24, 0x67	; 103
 284:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 288:	08 95       	ret

0000028a <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 28a:	80 e8       	ldi	r24, 0x80	; 128
 28c:	9e e3       	ldi	r25, 0x3E	; 62
 28e:	02 c0       	rjmp	.+4      	; 0x294 <uart_getc+0xa>
 290:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
 292:	21 f0       	breq	.+8      	; 0x29c <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 294:	5f 9b       	sbis	0x0b, 7	; 11
 296:	fc cf       	rjmp	.-8      	; 0x290 <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
 298:	8c b1       	in	r24, 0x0c	; 12
 29a:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
 29c:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
 29e:	08 95       	ret

000002a0 <uart1_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
 2a0:	80 e8       	ldi	r24, 0x80	; 128
 2a2:	9e e3       	ldi	r25, 0x3E	; 62
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <uart1_getc+0xa>
 2a6:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
 2a8:	39 f0       	breq	.+14     	; 0x2b8 <uart1_getc+0x18>
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
 2aa:	20 91 9b 00 	lds	r18, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 2ae:	27 ff       	sbrs	r18, 7
 2b0:	fa cf       	rjmp	.-12     	; 0x2a6 <uart1_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
 2b2:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 2b6:	08 95       	ret
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
  timer++;
  if(timer >= 16000){ return(0);}
 2b8:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
}
 2ba:	08 95       	ret

000002bc <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	81 11       	cpse	r24, r1
 2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <send_lcd+0x8>
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2c6:	77 9b       	sbis	0x0e, 7	; 14
 2c8:	fe cf       	rjmp	.-4      	; 0x2c6 <send_lcd+0xa>
  SPDR = byte;                        //send payload
 2ca:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2cc:	77 9b       	sbis	0x0e, 7	; 14
 2ce:	fe cf       	rjmp	.-4      	; 0x2cc <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 2d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2d4:	88 60       	ori	r24, 0x08	; 8
 2d6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2de:	87 7f       	andi	r24, 0xF7	; 247
 2e0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2e4:	08 95       	ret

000002e6 <refresh_lcd>:
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;
 2e6:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <i.2094>
 2ea:	82 0f       	add	r24, r18
 2ec:	91 1d       	adc	r25, r1
 2ee:	fc 01       	movw	r30, r24
 2f0:	80 81       	ld	r24, Z
 2f2:	81 11       	cpse	r24, r1
 2f4:	1f c0       	rjmp	.+62     	; 0x334 <refresh_lcd+0x4e>
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <null_flag.2095>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 300:	77 9b       	sbis	0x0e, 7	; 14
 302:	fe cf       	rjmp	.-4      	; 0x300 <refresh_lcd+0x1a>
  SPDR = byte;                        //send payload
 304:	80 e2       	ldi	r24, 0x20	; 32
 306:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 308:	77 9b       	sbis	0x0e, 7	; 14
 30a:	fe cf       	rjmp	.-4      	; 0x308 <refresh_lcd+0x22>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 30c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 310:	88 60       	ori	r24, 0x08	; 8
 312:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 316:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 31a:	87 7f       	andi	r24, 0xF7	; 247
 31c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
  else send_lcd(CHAR_BYTE,lcd_string_array[i]);

  i++;   //increment to next character
 320:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <i.2094>
 324:	8f 5f       	subi	r24, 0xFF	; 255
 326:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <i.2094>

  //delays are inserted to allow character to be written before moving
  //the cursor to the next line.
  if(i == 16)
 32a:	80 31       	cpi	r24, 0x10	; 16
 32c:	49 f1       	breq	.+82     	; 0x380 <refresh_lcd+0x9a>
  {
      // goto line2, 1st char
      _delay_us(40);
      line2_col1();
  }
  else if(i == 32)
 32e:	80 32       	cpi	r24, 0x20	; 32
 330:	69 f0       	breq	.+26     	; 0x34c <refresh_lcd+0x66>
 332:	08 95       	ret
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
 334:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <null_flag.2095>
 338:	91 11       	cpse	r25, r1
 33a:	e0 cf       	rjmp	.-64     	; 0x2fc <refresh_lcd+0x16>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 340:	77 9b       	sbis	0x0e, 7	; 14
 342:	fe cf       	rjmp	.-4      	; 0x340 <refresh_lcd+0x5a>
  SPDR = byte;                        //send payload
 344:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 346:	77 9b       	sbis	0x0e, 7	; 14
 348:	fe cf       	rjmp	.-4      	; 0x346 <refresh_lcd+0x60>
 34a:	e0 cf       	rjmp	.-64     	; 0x30c <refresh_lcd+0x26>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34c:	85 ed       	ldi	r24, 0xD5	; 213
 34e:	8a 95       	dec	r24
 350:	f1 f7       	brne	.-4      	; 0x34e <refresh_lcd+0x68>
 352:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 354:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 356:	77 9b       	sbis	0x0e, 7	; 14
 358:	fe cf       	rjmp	.-4      	; 0x356 <refresh_lcd+0x70>
  SPDR = byte;                        //send payload
 35a:	80 e8       	ldi	r24, 0x80	; 128
 35c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 35e:	77 9b       	sbis	0x0e, 7	; 14
 360:	fe cf       	rjmp	.-4      	; 0x35e <refresh_lcd+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 362:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 366:	88 60       	ori	r24, 0x08	; 8
 368:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 36c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 370:	87 7f       	andi	r24, 0xF7	; 247
 372:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  else if(i == 32)
  {
      // goto line1, 1st char
      _delay_us(40);
      line1_col1();
      null_flag=0;
 376:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <null_flag.2095>
      i=0;
 37a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <i.2094>
 37e:	08 95       	ret
 380:	f5 ed       	ldi	r31, 0xD5	; 213
 382:	fa 95       	dec	r31
 384:	f1 f7       	brne	.-4      	; 0x382 <refresh_lcd+0x9c>
 386:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 388:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 38a:	77 9b       	sbis	0x0e, 7	; 14
 38c:	fe cf       	rjmp	.-4      	; 0x38a <refresh_lcd+0xa4>
  SPDR = byte;                        //send payload
 38e:	80 ec       	ldi	r24, 0xC0	; 192
 390:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 392:	77 9b       	sbis	0x0e, 7	; 14
 394:	fe cf       	rjmp	.-4      	; 0x392 <refresh_lcd+0xac>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 396:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 39a:	88 60       	ori	r24, 0x08	; 8
 39c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3a0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3a4:	87 7f       	andi	r24, 0xF7	; 247
 3a6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3aa:	08 95       	ret

000003ac <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
 3ac:	66 0f       	add	r22, r22
 3ae:	66 0f       	add	r22, r22
 3b0:	66 0f       	add	r22, r22
 3b2:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 3b4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3b6:	77 9b       	sbis	0x0e, 7	; 14
 3b8:	fe cf       	rjmp	.-4      	; 0x3b6 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
 3ba:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3bc:	77 9b       	sbis	0x0e, 7	; 14
 3be:	fe cf       	rjmp	.-4      	; 0x3bc <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 3c0:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3c4:	28 60       	ori	r18, 0x08	; 8
 3c6:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3ca:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3ce:	27 7f       	andi	r18, 0xF7	; 247
 3d0:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3d4:	25 ed       	ldi	r18, 0xD5	; 213
 3d6:	2a 95       	dec	r18
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <set_custom_character+0x2a>
 3da:	00 00       	nop
 3dc:	fc 01       	movw	r30, r24
 3de:	9c 01       	movw	r18, r24
 3e0:	28 5f       	subi	r18, 0xF8	; 248
 3e2:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 3e4:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
 3e6:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 3e8:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3ea:	77 9b       	sbis	0x0e, 7	; 14
 3ec:	fe cf       	rjmp	.-4      	; 0x3ea <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
 3ee:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3f0:	77 9b       	sbis	0x0e, 7	; 14
 3f2:	fe cf       	rjmp	.-4      	; 0x3f0 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 3f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3f8:	88 60       	ori	r24, 0x08	; 8
 3fa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3fe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 402:	87 7f       	andi	r24, 0xF7	; 247
 404:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 408:	85 ed       	ldi	r24, 0xD5	; 213
 40a:	8a 95       	dec	r24
 40c:	f1 f7       	brne	.-4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40e:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
 410:	e2 17       	cp	r30, r18
 412:	f3 07       	cpc	r31, r19
 414:	41 f7       	brne	.-48     	; 0x3e6 <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
 416:	08 95       	ret

00000418 <set_cursor>:
//                          set_cursor
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
 418:	90 e4       	ldi	r25, 0x40	; 64
 41a:	89 9f       	mul	r24, r25
 41c:	60 0d       	add	r22, r0
 41e:	11 24       	eor	r1, r1
 420:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 422:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 424:	77 9b       	sbis	0x0e, 7	; 14
 426:	fe cf       	rjmp	.-4      	; 0x424 <set_cursor+0xc>
  SPDR = byte;                        //send payload
 428:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 42a:	77 9b       	sbis	0x0e, 7	; 14
 42c:	fe cf       	rjmp	.-4      	; 0x42a <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 42e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 432:	88 60       	ori	r24, 0x08	; 8
 434:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 438:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 43c:	87 7f       	andi	r24, 0xF7	; 247
 43e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 442:	08 95       	ret

00000444 <uint2lcd>:
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 444:	81 11       	cpse	r24, r1
 446:	13 c0       	rjmp	.+38     	; 0x46e <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 44c:	77 9b       	sbis	0x0e, 7	; 14
 44e:	fe cf       	rjmp	.-4      	; 0x44c <uint2lcd+0x8>
  SPDR = byte;                        //send payload
 450:	80 e3       	ldi	r24, 0x30	; 48
 452:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 454:	77 9b       	sbis	0x0e, 7	; 14
 456:	fe cf       	rjmp	.-4      	; 0x454 <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 458:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 45c:	88 60       	ori	r24, 0x08	; 8
 45e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 462:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 466:	87 7f       	andi	r24, 0xF7	; 247
 468:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 46c:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 46e:	84 36       	cpi	r24, 0x64	; 100
 470:	b0 f4       	brcc	.+44     	; 0x49e <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 472:	8a 30       	cpi	r24, 0x0A	; 10
 474:	60 f5       	brcc	.+88     	; 0x4ce <uint2lcd+0x8a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 47a:	77 9b       	sbis	0x0e, 7	; 14
 47c:	fe cf       	rjmp	.-4      	; 0x47a <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
 47e:	9d ec       	ldi	r25, 0xCD	; 205
 480:	89 9f       	mul	r24, r25
 482:	91 2d       	mov	r25, r1
 484:	11 24       	eor	r1, r1
 486:	96 95       	lsr	r25
 488:	96 95       	lsr	r25
 48a:	96 95       	lsr	r25
 48c:	2a e0       	ldi	r18, 0x0A	; 10
 48e:	92 9f       	mul	r25, r18
 490:	80 19       	sub	r24, r0
 492:	11 24       	eor	r1, r1
 494:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
 496:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 498:	77 9b       	sbis	0x0e, 7	; 14
 49a:	fe cf       	rjmp	.-4      	; 0x498 <uint2lcd+0x54>
 49c:	dd cf       	rjmp	.-70     	; 0x458 <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 49e:	99 e2       	ldi	r25, 0x29	; 41
 4a0:	89 9f       	mul	r24, r25
 4a2:	91 2d       	mov	r25, r1
 4a4:	11 24       	eor	r1, r1
 4a6:	92 95       	swap	r25
 4a8:	9f 70       	andi	r25, 0x0F	; 15
 4aa:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 4ac:	21 e0       	ldi	r18, 0x01	; 1
 4ae:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4b0:	77 9b       	sbis	0x0e, 7	; 14
 4b2:	fe cf       	rjmp	.-4      	; 0x4b0 <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
 4b4:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4b6:	77 9b       	sbis	0x0e, 7	; 14
 4b8:	fe cf       	rjmp	.-4      	; 0x4b6 <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 4ba:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4be:	98 60       	ori	r25, 0x08	; 8
 4c0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4c4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4c8:	97 7f       	andi	r25, 0xF7	; 247
 4ca:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 4ce:	99 e2       	ldi	r25, 0x29	; 41
 4d0:	89 9f       	mul	r24, r25
 4d2:	91 2d       	mov	r25, r1
 4d4:	11 24       	eor	r1, r1
 4d6:	92 95       	swap	r25
 4d8:	9f 70       	andi	r25, 0x0F	; 15
 4da:	38 2f       	mov	r19, r24
 4dc:	24 e6       	ldi	r18, 0x64	; 100
 4de:	92 9f       	mul	r25, r18
 4e0:	30 19       	sub	r19, r0
 4e2:	11 24       	eor	r1, r1
 4e4:	2d ec       	ldi	r18, 0xCD	; 205
 4e6:	32 9f       	mul	r19, r18
 4e8:	91 2d       	mov	r25, r1
 4ea:	11 24       	eor	r1, r1
 4ec:	96 95       	lsr	r25
 4ee:	96 95       	lsr	r25
 4f0:	96 95       	lsr	r25
 4f2:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 4f4:	21 e0       	ldi	r18, 0x01	; 1
 4f6:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4f8:	77 9b       	sbis	0x0e, 7	; 14
 4fa:	fe cf       	rjmp	.-4      	; 0x4f8 <uint2lcd+0xb4>
  SPDR = byte;                        //send payload
 4fc:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4fe:	77 9b       	sbis	0x0e, 7	; 14
 500:	fe cf       	rjmp	.-4      	; 0x4fe <uint2lcd+0xba>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 502:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 506:	98 60       	ori	r25, 0x08	; 8
 508:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 50c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 510:	97 7f       	andi	r25, 0xF7	; 247
 512:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 516:	af cf       	rjmp	.-162    	; 0x476 <uint2lcd+0x32>

00000518 <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
 518:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
 51a:	0c 94 22 02 	jmp	0x444	; 0x444 <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 522:	77 9b       	sbis	0x0e, 7	; 14
 524:	fe cf       	rjmp	.-4      	; 0x522 <int2lcd+0xa>
  SPDR = byte;                        //send payload
 526:	9d e2       	ldi	r25, 0x2D	; 45
 528:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 52a:	77 9b       	sbis	0x0e, 7	; 14
 52c:	fe cf       	rjmp	.-4      	; 0x52a <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 52e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 532:	98 60       	ori	r25, 0x08	; 8
 534:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 538:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 53c:	97 7f       	andi	r25, 0xF7	; 247
 53e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 542:	95 ed       	ldi	r25, 0xD5	; 213
 544:	9a 95       	dec	r25
 546:	f1 f7       	brne	.-4      	; 0x544 <int2lcd+0x2c>
 548:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
 54a:	81 95       	neg	r24
 54c:	0c 94 22 02 	jmp	0x444	; 0x444 <uint2lcd>

00000550 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 550:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 552:	77 9b       	sbis	0x0e, 7	; 14
 554:	fe cf       	rjmp	.-4      	; 0x552 <cursor_on+0x2>
  SPDR = byte;                        //send payload
 556:	8e e0       	ldi	r24, 0x0E	; 14
 558:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 55a:	77 9b       	sbis	0x0e, 7	; 14
 55c:	fe cf       	rjmp	.-4      	; 0x55a <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 55e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 562:	88 60       	ori	r24, 0x08	; 8
 564:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 568:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 56c:	87 7f       	andi	r24, 0xF7	; 247
 56e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 572:	08 95       	ret

00000574 <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 574:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 576:	77 9b       	sbis	0x0e, 7	; 14
 578:	fe cf       	rjmp	.-4      	; 0x576 <cursor_off+0x2>
  SPDR = byte;                        //send payload
 57a:	8c e0       	ldi	r24, 0x0C	; 12
 57c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 57e:	77 9b       	sbis	0x0e, 7	; 14
 580:	fe cf       	rjmp	.-4      	; 0x57e <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 582:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 586:	88 60       	ori	r24, 0x08	; 8
 588:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 58c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 590:	87 7f       	andi	r24, 0xF7	; 247
 592:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 596:	08 95       	ret

00000598 <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 598:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 59a:	77 9b       	sbis	0x0e, 7	; 14
 59c:	fe cf       	rjmp	.-4      	; 0x59a <shift_right+0x2>
  SPDR = byte;                        //send payload
 59e:	8e e1       	ldi	r24, 0x1E	; 30
 5a0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5a2:	77 9b       	sbis	0x0e, 7	; 14
 5a4:	fe cf       	rjmp	.-4      	; 0x5a2 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 5a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5aa:	88 60       	ori	r24, 0x08	; 8
 5ac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5b4:	87 7f       	andi	r24, 0xF7	; 247
 5b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5ba:	08 95       	ret

000005bc <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 5bc:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5be:	77 9b       	sbis	0x0e, 7	; 14
 5c0:	fe cf       	rjmp	.-4      	; 0x5be <shift_left+0x2>
  SPDR = byte;                        //send payload
 5c2:	88 e1       	ldi	r24, 0x18	; 24
 5c4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5c6:	77 9b       	sbis	0x0e, 7	; 14
 5c8:	fe cf       	rjmp	.-4      	; 0x5c6 <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 5ca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5ce:	88 60       	ori	r24, 0x08	; 8
 5d0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5d4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5d8:	87 7f       	andi	r24, 0xF7	; 247
 5da:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5de:	08 95       	ret

000005e0 <strobe_lcd>:
 5e0:	e2 e6       	ldi	r30, 0x62	; 98
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	80 81       	ld	r24, Z
 5e6:	88 60       	ori	r24, 0x08	; 8
 5e8:	80 83       	st	Z, r24
 5ea:	80 81       	ld	r24, Z
 5ec:	87 7f       	andi	r24, 0xF7	; 247
 5ee:	80 83       	st	Z, r24
 5f0:	08 95       	ret

000005f2 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 5f2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5f4:	77 9b       	sbis	0x0e, 7	; 14
 5f6:	fe cf       	rjmp	.-4      	; 0x5f4 <clear_display+0x2>
  SPDR = byte;                        //send payload
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5fc:	77 9b       	sbis	0x0e, 7	; 14
 5fe:	fe cf       	rjmp	.-4      	; 0x5fc <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 600:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 604:	88 60       	ori	r24, 0x08	; 8
 606:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 60a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 60e:	87 7f       	andi	r24, 0xF7	; 247
 610:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 614:	8f e1       	ldi	r24, 0x1F	; 31
 616:	9c e1       	ldi	r25, 0x1C	; 28
 618:	01 97       	sbiw	r24, 0x01	; 1
 61a:	f1 f7       	brne	.-4      	; 0x618 <clear_display+0x26>
 61c:	00 c0       	rjmp	.+0      	; 0x61e <clear_display+0x2c>
 61e:	00 00       	nop
 620:	08 95       	ret

00000622 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 622:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 624:	77 9b       	sbis	0x0e, 7	; 14
 626:	fe cf       	rjmp	.-4      	; 0x624 <cursor_home+0x2>
  SPDR = byte;                        //send payload
 628:	82 e0       	ldi	r24, 0x02	; 2
 62a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 62c:	77 9b       	sbis	0x0e, 7	; 14
 62e:	fe cf       	rjmp	.-4      	; 0x62c <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 630:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 634:	88 60       	ori	r24, 0x08	; 8
 636:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 63a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 63e:	87 7f       	andi	r24, 0xF7	; 247
 640:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 644:	8f e6       	ldi	r24, 0x6F	; 111
 646:	97 e1       	ldi	r25, 0x17	; 23
 648:	01 97       	sbiw	r24, 0x01	; 1
 64a:	f1 f7       	brne	.-4      	; 0x648 <cursor_home+0x26>
 64c:	00 c0       	rjmp	.+0      	; 0x64e <cursor_home+0x2c>
 64e:	00 00       	nop
 650:	08 95       	ret

00000652 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 652:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 654:	77 9b       	sbis	0x0e, 7	; 14
 656:	fe cf       	rjmp	.-4      	; 0x654 <line2_col1+0x2>
  SPDR = byte;                        //send payload
 658:	80 ec       	ldi	r24, 0xC0	; 192
 65a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 65c:	77 9b       	sbis	0x0e, 7	; 14
 65e:	fe cf       	rjmp	.-4      	; 0x65c <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 660:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 664:	88 60       	ori	r24, 0x08	; 8
 666:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 66a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 66e:	87 7f       	andi	r24, 0xF7	; 247
 670:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 674:	08 95       	ret

00000676 <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 676:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 678:	77 9b       	sbis	0x0e, 7	; 14
 67a:	fe cf       	rjmp	.-4      	; 0x678 <line1_col1+0x2>
  SPDR = byte;                        //send payload
 67c:	80 e8       	ldi	r24, 0x80	; 128
 67e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 680:	77 9b       	sbis	0x0e, 7	; 14
 682:	fe cf       	rjmp	.-4      	; 0x680 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 684:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 688:	88 60       	ori	r24, 0x08	; 8
 68a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 68e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 692:	87 7f       	andi	r24, 0xF7	; 247
 694:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 698:	08 95       	ret

0000069a <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
 69a:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 69c:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
 69e:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 6a0:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6a2:	77 9b       	sbis	0x0e, 7	; 14
 6a4:	fe cf       	rjmp	.-4      	; 0x6a2 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
 6a6:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6a8:	77 9b       	sbis	0x0e, 7	; 14
 6aa:	fe cf       	rjmp	.-4      	; 0x6a8 <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 6ac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6b0:	88 60       	ori	r24, 0x08	; 8
 6b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6ba:	87 7f       	andi	r24, 0xF7	; 247
 6bc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6c0:	85 ed       	ldi	r24, 0xD5	; 213
 6c2:	8a 95       	dec	r24
 6c4:	f1 f7       	brne	.-4      	; 0x6c2 <fill_spaces+0x28>
 6c6:	00 00       	nop
 6c8:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
 6ca:	51 f7       	brne	.-44     	; 0x6a0 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ');
                _delay_us(40);  //40us wait between characters
	}
}
 6cc:	08 95       	ret

000006ce <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 6ce:	91 e0       	ldi	r25, 0x01	; 1
 6d0:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6d2:	77 9b       	sbis	0x0e, 7	; 14
 6d4:	fe cf       	rjmp	.-4      	; 0x6d2 <char2lcd+0x4>
  SPDR = byte;                        //send payload
 6d6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6d8:	77 9b       	sbis	0x0e, 7	; 14
 6da:	fe cf       	rjmp	.-4      	; 0x6d8 <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 6dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6e0:	88 60       	ori	r24, 0x08	; 8
 6e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6ea:	87 7f       	andi	r24, 0xF7	; 247
 6ec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6f0:	08 95       	ret

000006f2 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
 6f2:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 6f4:	40 e0       	ldi	r20, 0x00	; 0
 6f6:	50 e0       	ldi	r21, 0x00	; 0
 6f8:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 6fa:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 6fc:	df 01       	movw	r26, r30
 6fe:	a4 0f       	add	r26, r20
 700:	b5 1f       	adc	r27, r21
 702:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 704:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 706:	77 9b       	sbis	0x0e, 7	; 14
 708:	fe cf       	rjmp	.-4      	; 0x706 <string2lcd+0x14>
  SPDR = byte;                        //send payload
 70a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 70c:	77 9b       	sbis	0x0e, 7	; 14
 70e:	fe cf       	rjmp	.-4      	; 0x70c <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 710:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 714:	98 60       	ori	r25, 0x08	; 8
 716:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 71a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 71e:	97 7f       	andi	r25, 0xF7	; 247
 720:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 724:	85 ed       	ldi	r24, 0xD5	; 213
 726:	8a 95       	dec	r24
 728:	f1 f7       	brne	.-4      	; 0x726 <string2lcd+0x34>
 72a:	00 00       	nop
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 72c:	6f 5f       	subi	r22, 0xFF	; 255
 72e:	46 2f       	mov	r20, r22
 730:	50 e0       	ldi	r21, 0x00	; 0
 732:	df 01       	movw	r26, r30
 734:	0d 90       	ld	r0, X+
 736:	00 20       	and	r0, r0
 738:	e9 f7       	brne	.-6      	; 0x734 <string2lcd+0x42>
 73a:	9d 01       	movw	r18, r26
 73c:	2e 1b       	sub	r18, r30
 73e:	3f 0b       	sbc	r19, r31
 740:	22 50       	subi	r18, 0x02	; 2
 742:	31 09       	sbc	r19, r1
 744:	24 17       	cp	r18, r20
 746:	35 07       	cpc	r19, r21
 748:	c8 f6       	brcc	.-78     	; 0x6fc <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }
}
 74a:	08 95       	ret

0000074c <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 74c:	8f ef       	ldi	r24, 0xFF	; 255
 74e:	99 ef       	ldi	r25, 0xF9	; 249
 750:	01 97       	sbiw	r24, 0x01	; 1
 752:	f1 f7       	brne	.-4      	; 0x750 <lcd_init+0x4>
 754:	00 c0       	rjmp	.+0      	; 0x756 <lcd_init+0xa>
 756:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
 758:	88 e0       	ldi	r24, 0x08	; 8
 75a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 75e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 760:	77 9b       	sbis	0x0e, 7	; 14
 762:	fe cf       	rjmp	.-4      	; 0x760 <lcd_init+0x14>
  SPDR = byte;                        //send payload
 764:	80 e3       	ldi	r24, 0x30	; 48
 766:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 768:	77 9b       	sbis	0x0e, 7	; 14
 76a:	fe cf       	rjmp	.-4      	; 0x768 <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 76c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 770:	88 60       	ori	r24, 0x08	; 8
 772:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 776:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 77a:	87 7f       	andi	r24, 0xF7	; 247
 77c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 780:	8f e5       	ldi	r24, 0x5F	; 95
 782:	9d e6       	ldi	r25, 0x6D	; 109
 784:	01 97       	sbiw	r24, 0x01	; 1
 786:	f1 f7       	brne	.-4      	; 0x784 <lcd_init+0x38>
 788:	00 c0       	rjmp	.+0      	; 0x78a <lcd_init+0x3e>
 78a:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 78c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 78e:	77 9b       	sbis	0x0e, 7	; 14
 790:	fe cf       	rjmp	.-4      	; 0x78e <lcd_init+0x42>
  SPDR = byte;                        //send payload
 792:	80 e3       	ldi	r24, 0x30	; 48
 794:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 796:	77 9b       	sbis	0x0e, 7	; 14
 798:	fe cf       	rjmp	.-4      	; 0x796 <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 79a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 79e:	88 60       	ori	r24, 0x08	; 8
 7a0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7a4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7a8:	87 7f       	andi	r24, 0xF7	; 247
 7aa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7ae:	8f e5       	ldi	r24, 0x5F	; 95
 7b0:	9d e6       	ldi	r25, 0x6D	; 109
 7b2:	01 97       	sbiw	r24, 0x01	; 1
 7b4:	f1 f7       	brne	.-4      	; 0x7b2 <lcd_init+0x66>
 7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <lcd_init+0x6c>
 7b8:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 7ba:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7bc:	77 9b       	sbis	0x0e, 7	; 14
 7be:	fe cf       	rjmp	.-4      	; 0x7bc <lcd_init+0x70>
  SPDR = byte;                        //send payload
 7c0:	80 e3       	ldi	r24, 0x30	; 48
 7c2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7c4:	77 9b       	sbis	0x0e, 7	; 14
 7c6:	fe cf       	rjmp	.-4      	; 0x7c4 <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 7c8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7cc:	88 60       	ori	r24, 0x08	; 8
 7ce:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7d6:	87 7f       	andi	r24, 0xF7	; 247
 7d8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7dc:	8f e5       	ldi	r24, 0x5F	; 95
 7de:	9d e6       	ldi	r25, 0x6D	; 109
 7e0:	01 97       	sbiw	r24, 0x01	; 1
 7e2:	f1 f7       	brne	.-4      	; 0x7e0 <lcd_init+0x94>
 7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <lcd_init+0x9a>
 7e6:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 7e8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7ea:	77 9b       	sbis	0x0e, 7	; 14
 7ec:	fe cf       	rjmp	.-4      	; 0x7ea <lcd_init+0x9e>
  SPDR = byte;                        //send payload
 7ee:	88 e3       	ldi	r24, 0x38	; 56
 7f0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7f2:	77 9b       	sbis	0x0e, 7	; 14
 7f4:	fe cf       	rjmp	.-4      	; 0x7f2 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 7f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7fa:	88 60       	ori	r24, 0x08	; 8
 7fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 800:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 804:	87 7f       	andi	r24, 0xF7	; 247
 806:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 80a:	8f e1       	ldi	r24, 0x1F	; 31
 80c:	9e e4       	ldi	r25, 0x4E	; 78
 80e:	01 97       	sbiw	r24, 0x01	; 1
 810:	f1 f7       	brne	.-4      	; 0x80e <lcd_init+0xc2>
 812:	00 c0       	rjmp	.+0      	; 0x814 <lcd_init+0xc8>
 814:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 816:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 818:	77 9b       	sbis	0x0e, 7	; 14
 81a:	fe cf       	rjmp	.-4      	; 0x818 <lcd_init+0xcc>
  SPDR = byte;                        //send payload
 81c:	88 e0       	ldi	r24, 0x08	; 8
 81e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 820:	77 9b       	sbis	0x0e, 7	; 14
 822:	fe cf       	rjmp	.-4      	; 0x820 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 824:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 828:	88 60       	ori	r24, 0x08	; 8
 82a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 82e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 832:	87 7f       	andi	r24, 0xF7	; 247
 834:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 838:	8f e1       	ldi	r24, 0x1F	; 31
 83a:	9e e4       	ldi	r25, 0x4E	; 78
 83c:	01 97       	sbiw	r24, 0x01	; 1
 83e:	f1 f7       	brne	.-4      	; 0x83c <lcd_init+0xf0>
 840:	00 c0       	rjmp	.+0      	; 0x842 <lcd_init+0xf6>
 842:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 844:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 846:	77 9b       	sbis	0x0e, 7	; 14
 848:	fe cf       	rjmp	.-4      	; 0x846 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 84e:	77 9b       	sbis	0x0e, 7	; 14
 850:	fe cf       	rjmp	.-4      	; 0x84e <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 852:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 856:	88 60       	ori	r24, 0x08	; 8
 858:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 85c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 860:	87 7f       	andi	r24, 0xF7	; 247
 862:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 866:	8f e1       	ldi	r24, 0x1F	; 31
 868:	9e e4       	ldi	r25, 0x4E	; 78
 86a:	01 97       	sbiw	r24, 0x01	; 1
 86c:	f1 f7       	brne	.-4      	; 0x86a <lcd_init+0x11e>
 86e:	00 c0       	rjmp	.+0      	; 0x870 <lcd_init+0x124>
 870:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 872:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 874:	77 9b       	sbis	0x0e, 7	; 14
 876:	fe cf       	rjmp	.-4      	; 0x874 <lcd_init+0x128>
  SPDR = byte;                        //send payload
 878:	86 e0       	ldi	r24, 0x06	; 6
 87a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 87c:	77 9b       	sbis	0x0e, 7	; 14
 87e:	fe cf       	rjmp	.-4      	; 0x87c <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 880:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 884:	88 60       	ori	r24, 0x08	; 8
 886:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 88a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 88e:	87 7f       	andi	r24, 0xF7	; 247
 890:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 894:	8f e1       	ldi	r24, 0x1F	; 31
 896:	9e e4       	ldi	r25, 0x4E	; 78
 898:	01 97       	sbiw	r24, 0x01	; 1
 89a:	f1 f7       	brne	.-4      	; 0x898 <lcd_init+0x14c>
 89c:	00 c0       	rjmp	.+0      	; 0x89e <lcd_init+0x152>
 89e:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 8a0:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 8a2:	77 9b       	sbis	0x0e, 7	; 14
 8a4:	fe cf       	rjmp	.-4      	; 0x8a2 <lcd_init+0x156>
  SPDR = byte;                        //send payload
 8a6:	8c e0       	ldi	r24, 0x0C	; 12
 8a8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 8aa:	77 9b       	sbis	0x0e, 7	; 14
 8ac:	fe cf       	rjmp	.-4      	; 0x8aa <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 8ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 8b2:	88 60       	ori	r24, 0x08	; 8
 8b4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 8b8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 8bc:	87 7f       	andi	r24, 0xF7	; 247
 8be:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 8c2:	8f e1       	ldi	r24, 0x1F	; 31
 8c4:	9e e4       	ldi	r25, 0x4E	; 78
 8c6:	01 97       	sbiw	r24, 0x01	; 1
 8c8:	f1 f7       	brne	.-4      	; 0x8c6 <lcd_init+0x17a>
 8ca:	00 c0       	rjmp	.+0      	; 0x8cc <lcd_init+0x180>
 8cc:	00 00       	nop
 8ce:	08 95       	ret

000008d0 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
 8d0:	4f 92       	push	r4
 8d2:	5f 92       	push	r5
 8d4:	6f 92       	push	r6
 8d6:	7f 92       	push	r7
 8d8:	8f 92       	push	r8
 8da:	9f 92       	push	r9
 8dc:	af 92       	push	r10
 8de:	bf 92       	push	r11
 8e0:	cf 92       	push	r12
 8e2:	df 92       	push	r13
 8e4:	ef 92       	push	r14
 8e6:	ff 92       	push	r15
 8e8:	0f 93       	push	r16
 8ea:	1f 93       	push	r17
 8ec:	cf 93       	push	r28
 8ee:	df 93       	push	r29
 8f0:	cd b7       	in	r28, 0x3d	; 61
 8f2:	de b7       	in	r29, 0x3e	; 62
 8f4:	69 97       	sbiw	r28, 0x19	; 25
 8f6:	0f b6       	in	r0, 0x3f	; 63
 8f8:	f8 94       	cli
 8fa:	de bf       	out	0x3e, r29	; 62
 8fc:	0f be       	out	0x3f, r0	; 63
 8fe:	cd bf       	out	0x3d, r28	; 61
 900:	14 2f       	mov	r17, r20
 902:	42 2e       	mov	r4, r18
 904:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient

      if (bSigned){
 906:	00 23       	and	r16, r16
 908:	79 f0       	breq	.+30     	; 0x928 <lcd_int32+0x58>
        bSigned = (qr.quot<0);
 90a:	6b 01       	movw	r12, r22
 90c:	7c 01       	movw	r14, r24
 90e:	cc 24       	eor	r12, r12
 910:	f7 fc       	sbrc	r15, 7
 912:	c3 94       	inc	r12
 914:	dd 24       	eor	r13, r13
 916:	ee 24       	eor	r14, r14
 918:	ff 24       	eor	r15, r15
 91a:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
 91c:	6b 01       	movw	r12, r22
 91e:	7c 01       	movw	r14, r24
 920:	97 fd       	sbrc	r25, 7
 922:	a3 c0       	rjmp	.+326    	; 0xa6a <lcd_int32+0x19a>
 924:	c7 01       	movw	r24, r14
 926:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point
      if (decpos){
 928:	44 20       	and	r4, r4
 92a:	09 f4       	brne	.+2      	; 0x92e <lcd_int32+0x5e>
 92c:	96 c0       	rjmp	.+300    	; 0xa5a <lcd_int32+0x18a>
 92e:	9e 01       	movw	r18, r28
 930:	2f 5f       	subi	r18, 0xFF	; 255
 932:	3f 4f       	sbci	r19, 0xFF	; 255
 934:	59 01       	movw	r10, r18
 936:	49 01       	movw	r8, r18
 938:	66 24       	eor	r6, r6
 93a:	6a 94       	dec	r6
 93c:	64 0c       	add	r6, r4
 93e:	71 2c       	mov	r7, r1
 940:	3f ef       	ldi	r19, 0xFF	; 255
 942:	63 1a       	sub	r6, r19
 944:	73 0a       	sbc	r7, r19
 946:	6a 0c       	add	r6, r10
 948:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
 94a:	2a e0       	ldi	r18, 0x0A	; 10
 94c:	30 e0       	ldi	r19, 0x00	; 0
 94e:	40 e0       	ldi	r20, 0x00	; 0
 950:	50 e0       	ldi	r21, 0x00	; 0
 952:	0e 94 38 07 	call	0xe70	; 0xe70 <__divmodsi4>
 956:	e6 2f       	mov	r30, r22
 958:	2a 8b       	std	Y+18, r18	; 0x12
 95a:	3b 8b       	std	Y+19, r19	; 0x13
 95c:	4c 8b       	std	Y+20, r20	; 0x14
 95e:	5d 8b       	std	Y+21, r21	; 0x15
 960:	6a 89       	ldd	r22, Y+18	; 0x12
 962:	7b 89       	ldd	r23, Y+19	; 0x13
 964:	8c 89       	ldd	r24, Y+20	; 0x14
 966:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 968:	20 e3       	ldi	r18, 0x30	; 48
 96a:	2e 0f       	add	r18, r30
 96c:	f4 01       	movw	r30, r8
 96e:	21 93       	st	Z+, r18
 970:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point
      if (decpos){
        for (; decpos ; decpos--){
 972:	6e 16       	cp	r6, r30
 974:	7f 06       	cpc	r7, r31
 976:	49 f7       	brne	.-46     	; 0x94a <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
 978:	99 24       	eor	r9, r9
 97a:	93 94       	inc	r9
 97c:	94 0c       	add	r9, r4
 97e:	f5 01       	movw	r30, r10
 980:	e4 0d       	add	r30, r4
 982:	f1 1d       	adc	r31, r1
 984:	2e e2       	ldi	r18, 0x2E	; 46
 986:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point
      do{
          qr = ldiv(qr.quot, 10);
 988:	2a e0       	ldi	r18, 0x0A	; 10
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	40 e0       	ldi	r20, 0x00	; 0
 98e:	50 e0       	ldi	r21, 0x00	; 0
 990:	0e 94 38 07 	call	0xe70	; 0xe70 <__divmodsi4>
 994:	e6 2f       	mov	r30, r22
 996:	2a 8b       	std	Y+18, r18	; 0x12
 998:	3b 8b       	std	Y+19, r19	; 0x13
 99a:	4c 8b       	std	Y+20, r20	; 0x14
 99c:	5d 8b       	std	Y+21, r21	; 0x15
 99e:	6e 8b       	std	Y+22, r22	; 0x16
 9a0:	7f 8b       	std	Y+23, r23	; 0x17
 9a2:	88 8f       	std	Y+24, r24	; 0x18
 9a4:	99 8f       	std	Y+25, r25	; 0x19
 9a6:	6a 89       	ldd	r22, Y+18	; 0x12
 9a8:	7b 89       	ldd	r23, Y+19	; 0x13
 9aa:	8c 89       	ldd	r24, Y+20	; 0x14
 9ac:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 9ae:	31 e0       	ldi	r19, 0x01	; 1
 9b0:	39 0d       	add	r19, r9
 9b2:	d5 01       	movw	r26, r10
 9b4:	a9 0d       	add	r26, r9
 9b6:	b1 1d       	adc	r27, r1
 9b8:	e0 5d       	subi	r30, 0xD0	; 208
 9ba:	ec 93       	st	X, r30
 9bc:	93 2e       	mov	r9, r19
        }while(qr.quot);
 9be:	61 15       	cp	r22, r1
 9c0:	71 05       	cpc	r23, r1
 9c2:	81 05       	cpc	r24, r1
 9c4:	91 05       	cpc	r25, r1
 9c6:	01 f7       	brne	.-64     	; 0x988 <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
 9c8:	11 23       	and	r17, r17
 9ca:	61 f0       	breq	.+24     	; 0x9e4 <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
 9cc:	51 10       	cpse	r5, r1
 9ce:	4b c0       	rjmp	.+150    	; 0xa66 <lcd_int32+0x196>
 9d0:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
 9d2:	31 17       	cp	r19, r17
 9d4:	38 f4       	brcc	.+14     	; 0x9e4 <lcd_int32+0x114>
 9d6:	f5 01       	movw	r30, r10
 9d8:	e3 0f       	add	r30, r19
 9da:	f1 1d       	adc	r31, r1
 9dc:	90 83       	st	Z, r25
 9de:	3f 5f       	subi	r19, 0xFF	; 255
 9e0:	13 13       	cpse	r17, r19
 9e2:	f9 cf       	rjmp	.-14     	; 0x9d6 <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
 9e4:	00 23       	and	r16, r16
 9e6:	31 f0       	breq	.+12     	; 0x9f4 <lcd_int32+0x124>
 9e8:	f5 01       	movw	r30, r10
 9ea:	e3 0f       	add	r30, r19
 9ec:	f1 1d       	adc	r31, r1
 9ee:	9d e2       	ldi	r25, 0x2D	; 45
 9f0:	90 83       	st	Z, r25
 9f2:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 9f4:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 9f6:	31 50       	subi	r19, 0x01	; 1
 9f8:	f5 01       	movw	r30, r10
 9fa:	e3 0f       	add	r30, r19
 9fc:	f1 1d       	adc	r31, r1
 9fe:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 a00:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 a02:	77 9b       	sbis	0x0e, 7	; 14
 a04:	fe cf       	rjmp	.-4      	; 0xa02 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
 a06:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 a08:	77 9b       	sbis	0x0e, 7	; 14
 a0a:	fe cf       	rjmp	.-4      	; 0xa08 <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 a0c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 a10:	98 60       	ori	r25, 0x08	; 8
 a12:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 a16:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 a1a:	97 7f       	andi	r25, 0xF7	; 247
 a1c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a20:	85 ed       	ldi	r24, 0xD5	; 213
 a22:	8a 95       	dec	r24
 a24:	f1 f7       	brne	.-4      	; 0xa22 <lcd_int32+0x152>
 a26:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 a28:	31 11       	cpse	r19, r1
 a2a:	e5 cf       	rjmp	.-54     	; 0x9f6 <lcd_int32+0x126>

}
 a2c:	69 96       	adiw	r28, 0x19	; 25
 a2e:	0f b6       	in	r0, 0x3f	; 63
 a30:	f8 94       	cli
 a32:	de bf       	out	0x3e, r29	; 62
 a34:	0f be       	out	0x3f, r0	; 63
 a36:	cd bf       	out	0x3d, r28	; 61
 a38:	df 91       	pop	r29
 a3a:	cf 91       	pop	r28
 a3c:	1f 91       	pop	r17
 a3e:	0f 91       	pop	r16
 a40:	ff 90       	pop	r15
 a42:	ef 90       	pop	r14
 a44:	df 90       	pop	r13
 a46:	cf 90       	pop	r12
 a48:	bf 90       	pop	r11
 a4a:	af 90       	pop	r10
 a4c:	9f 90       	pop	r9
 a4e:	8f 90       	pop	r8
 a50:	7f 90       	pop	r7
 a52:	6f 90       	pop	r6
 a54:	5f 90       	pop	r5
 a56:	4f 90       	pop	r4
 a58:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
 a5a:	91 2c       	mov	r9, r1
 a5c:	9e 01       	movw	r18, r28
 a5e:	2f 5f       	subi	r18, 0xFF	; 255
 a60:	3f 4f       	sbci	r19, 0xFF	; 255
 a62:	59 01       	movw	r10, r18
 a64:	91 cf       	rjmp	.-222    	; 0x988 <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
 a66:	90 e3       	ldi	r25, 0x30	; 48
 a68:	b4 cf       	rjmp	.-152    	; 0x9d2 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
 a6a:	f0 94       	com	r15
 a6c:	e0 94       	com	r14
 a6e:	d0 94       	com	r13
 a70:	c0 94       	com	r12
 a72:	c1 1c       	adc	r12, r1
 a74:	d1 1c       	adc	r13, r1
 a76:	e1 1c       	adc	r14, r1
 a78:	f1 1c       	adc	r15, r1
 a7a:	54 cf       	rjmp	.-344    	; 0x924 <lcd_int32+0x54>

00000a7c <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l,
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
 a7c:	5f 92       	push	r5
 a7e:	6f 92       	push	r6
 a80:	7f 92       	push	r7
 a82:	8f 92       	push	r8
 a84:	9f 92       	push	r9
 a86:	af 92       	push	r10
 a88:	bf 92       	push	r11
 a8a:	cf 92       	push	r12
 a8c:	df 92       	push	r13
 a8e:	ef 92       	push	r14
 a90:	ff 92       	push	r15
 a92:	0f 93       	push	r16
 a94:	1f 93       	push	r17
 a96:	cf 93       	push	r28
 a98:	df 93       	push	r29
 a9a:	cd b7       	in	r28, 0x3d	; 61
 a9c:	de b7       	in	r29, 0x3e	; 62
 a9e:	61 97       	sbiw	r28, 0x11	; 17
 aa0:	0f b6       	in	r0, 0x3f	; 63
 aa2:	f8 94       	cli
 aa4:	de bf       	out	0x3e, r29	; 62
 aa6:	0f be       	out	0x3f, r0	; 63
 aa8:	cd bf       	out	0x3d, r28	; 61
 aaa:	5c 01       	movw	r10, r24
 aac:	96 2e       	mov	r9, r22
 aae:	54 2e       	mov	r5, r20
 ab0:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
 ab2:	8b 2c       	mov	r8, r11
 ab4:	88 1c       	adc	r8, r8
 ab6:	88 24       	eor	r8, r8
 ab8:	88 1c       	adc	r8, r8
 aba:	78 2c       	mov	r7, r8
 abc:	9c 01       	movw	r18, r24
 abe:	97 fd       	sbrc	r25, 7
 ac0:	9d c0       	rjmp	.+314    	; 0xbfc <lcd_int16+0x180>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
 ac2:	55 20       	and	r5, r5
 ac4:	09 f4       	brne	.+2      	; 0xac8 <lcd_int16+0x4c>
 ac6:	8e c0       	rjmp	.+284    	; 0xbe4 <lcd_int16+0x168>
 ac8:	8e 01       	movw	r16, r28
 aca:	0f 5f       	subi	r16, 0xFF	; 255
 acc:	1f 4f       	sbci	r17, 0xFF	; 255
 ace:	78 01       	movw	r14, r16
 ad0:	cc 24       	eor	r12, r12
 ad2:	ca 94       	dec	r12
 ad4:	c5 0c       	add	r12, r5
 ad6:	d1 2c       	mov	r13, r1
 ad8:	8f ef       	ldi	r24, 0xFF	; 255
 ada:	c8 1a       	sub	r12, r24
 adc:	d8 0a       	sbc	r13, r24
 ade:	c0 0e       	add	r12, r16
 ae0:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
 ae2:	6a e0       	ldi	r22, 0x0A	; 10
 ae4:	70 e0       	ldi	r23, 0x00	; 0
 ae6:	c9 01       	movw	r24, r18
 ae8:	0e 94 24 07 	call	0xe48	; 0xe48 <__divmodhi4>
 aec:	46 2f       	mov	r20, r22
 aee:	24 2f       	mov	r18, r20
 af0:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
 af2:	80 5d       	subi	r24, 0xD0	; 208
 af4:	f7 01       	movw	r30, r14
 af6:	81 93       	st	Z+, r24
 af8:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
          for (; decpos ; decpos--){
 afa:	ec 15       	cp	r30, r12
 afc:	fd 05       	cpc	r31, r13
 afe:	89 f7       	brne	.-30     	; 0xae2 <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
 b00:	ff 24       	eor	r15, r15
 b02:	f3 94       	inc	r15
 b04:	f5 0c       	add	r15, r5
 b06:	f8 01       	movw	r30, r16
 b08:	e5 0d       	add	r30, r5
 b0a:	f1 1d       	adc	r31, r1
 b0c:	8e e2       	ldi	r24, 0x2E	; 46
 b0e:	80 83       	st	Z, r24
 b10:	01 c0       	rjmp	.+2      	; 0xb14 <lcd_int16+0x98>

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
 b12:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
 b14:	6a e0       	ldi	r22, 0x0A	; 10
 b16:	70 e0       	ldi	r23, 0x00	; 0
 b18:	c9 01       	movw	r24, r18
 b1a:	0e 94 24 07 	call	0xe48	; 0xe48 <__divmodhi4>
 b1e:	46 2f       	mov	r20, r22
 b20:	24 2f       	mov	r18, r20
 b22:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
 b24:	91 e0       	ldi	r25, 0x01	; 1
 b26:	9f 0d       	add	r25, r15
 b28:	f8 01       	movw	r30, r16
 b2a:	ef 0d       	add	r30, r15
 b2c:	f1 1d       	adc	r31, r1
 b2e:	80 5d       	subi	r24, 0xD0	; 208
 b30:	80 83       	st	Z, r24
        }
        while(qr.quot);
 b32:	21 15       	cp	r18, r1
 b34:	31 05       	cpc	r19, r1
 b36:	69 f7       	brne	.-38     	; 0xb12 <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
 b38:	61 10       	cpse	r6, r1
 b3a:	59 c0       	rjmp	.+178    	; 0xbee <lcd_int16+0x172>
 b3c:	b7 fc       	sbrc	r11, 7
 b3e:	63 c0       	rjmp	.+198    	; 0xc06 <lcd_int16+0x18a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
 b40:	99 20       	and	r9, r9
 b42:	b1 f0       	breq	.+44     	; 0xb70 <lcd_int16+0xf4>
 b44:	68 2d       	mov	r22, r8
 b46:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
 b48:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 b4a:	29 2f       	mov	r18, r25
 b4c:	30 e0       	ldi	r19, 0x00	; 0
 b4e:	49 2d       	mov	r20, r9
 b50:	50 e0       	ldi	r21, 0x00	; 0
 b52:	46 1b       	sub	r20, r22
 b54:	57 0b       	sbc	r21, r23
 b56:	24 17       	cp	r18, r20
 b58:	35 07       	cpc	r19, r21
 b5a:	54 f4       	brge	.+20     	; 0xb70 <lcd_int16+0xf4>
 b5c:	9f 5f       	subi	r25, 0xFF	; 255
 b5e:	f8 01       	movw	r30, r16
 b60:	e2 0f       	add	r30, r18
 b62:	f3 1f       	adc	r31, r19
 b64:	80 83       	st	Z, r24
 b66:	29 2f       	mov	r18, r25
 b68:	30 e0       	ldi	r19, 0x00	; 0
 b6a:	24 17       	cp	r18, r20
 b6c:	35 07       	cpc	r19, r21
 b6e:	b4 f3       	brlt	.-20     	; 0xb5c <lcd_int16+0xe0>
        }

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}
 b70:	77 20       	and	r7, r7
 b72:	31 f0       	breq	.+12     	; 0xb80 <lcd_int16+0x104>
 b74:	f8 01       	movw	r30, r16
 b76:	e9 0f       	add	r30, r25
 b78:	f1 1d       	adc	r31, r1
 b7a:	8d e2       	ldi	r24, 0x2D	; 45
 b7c:	80 83       	st	Z, r24
 b7e:	9f 5f       	subi	r25, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 b80:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 b82:	91 50       	subi	r25, 0x01	; 1
 b84:	f8 01       	movw	r30, r16
 b86:	e9 0f       	add	r30, r25
 b88:	f1 1d       	adc	r31, r1
 b8a:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 b8c:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 b8e:	77 9b       	sbis	0x0e, 7	; 14
 b90:	fe cf       	rjmp	.-4      	; 0xb8e <lcd_int16+0x112>
  SPDR = byte;                        //send payload
 b92:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 b94:	77 9b       	sbis	0x0e, 7	; 14
 b96:	fe cf       	rjmp	.-4      	; 0xb94 <lcd_int16+0x118>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 b98:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 b9c:	88 60       	ori	r24, 0x08	; 8
 b9e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 ba2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 ba6:	87 7f       	andi	r24, 0xF7	; 247
 ba8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 bac:	f5 ed       	ldi	r31, 0xD5	; 213
 bae:	fa 95       	dec	r31
 bb0:	f1 f7       	brne	.-4      	; 0xbae <lcd_int16+0x132>
 bb2:	00 00       	nop

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 bb4:	91 11       	cpse	r25, r1
 bb6:	e5 cf       	rjmp	.-54     	; 0xb82 <lcd_int16+0x106>
}
 bb8:	61 96       	adiw	r28, 0x11	; 17
 bba:	0f b6       	in	r0, 0x3f	; 63
 bbc:	f8 94       	cli
 bbe:	de bf       	out	0x3e, r29	; 62
 bc0:	0f be       	out	0x3f, r0	; 63
 bc2:	cd bf       	out	0x3d, r28	; 61
 bc4:	df 91       	pop	r29
 bc6:	cf 91       	pop	r28
 bc8:	1f 91       	pop	r17
 bca:	0f 91       	pop	r16
 bcc:	ff 90       	pop	r15
 bce:	ef 90       	pop	r14
 bd0:	df 90       	pop	r13
 bd2:	cf 90       	pop	r12
 bd4:	bf 90       	pop	r11
 bd6:	af 90       	pop	r10
 bd8:	9f 90       	pop	r9
 bda:	8f 90       	pop	r8
 bdc:	7f 90       	pop	r7
 bde:	6f 90       	pop	r6
 be0:	5f 90       	pop	r5
 be2:	08 95       	ret
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
 be4:	f1 2c       	mov	r15, r1
 be6:	8e 01       	movw	r16, r28
 be8:	0f 5f       	subi	r16, 0xFF	; 255
 bea:	1f 4f       	sbci	r17, 0xFF	; 255
 bec:	93 cf       	rjmp	.-218    	; 0xb14 <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
 bee:	99 20       	and	r9, r9
 bf0:	09 f4       	brne	.+2      	; 0xbf4 <lcd_int16+0x178>
 bf2:	be cf       	rjmp	.-132    	; 0xb70 <lcd_int16+0xf4>
 bf4:	68 2d       	mov	r22, r8
 bf6:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
 bf8:	80 e3       	ldi	r24, 0x30	; 48
 bfa:	a7 cf       	rjmp	.-178    	; 0xb4a <lcd_int16+0xce>
 bfc:	22 27       	eor	r18, r18
 bfe:	33 27       	eor	r19, r19
 c00:	28 1b       	sub	r18, r24
 c02:	39 0b       	sbc	r19, r25
 c04:	5e cf       	rjmp	.-324    	; 0xac2 <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
 c06:	f3 94       	inc	r15
 c08:	f3 94       	inc	r15
 c0a:	f8 01       	movw	r30, r16
 c0c:	e9 0f       	add	r30, r25
 c0e:	f1 1d       	adc	r31, r1
 c10:	8d e2       	ldi	r24, 0x2D	; 45
 c12:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
 c14:	99 20       	and	r9, r9
 c16:	59 f0       	breq	.+22     	; 0xc2e <lcd_int16+0x1b2>
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 c18:	2f 2d       	mov	r18, r15
 c1a:	30 e0       	ldi	r19, 0x00	; 0
 c1c:	49 2d       	mov	r20, r9
 c1e:	50 e0       	ldi	r21, 0x00	; 0
 c20:	24 17       	cp	r18, r20
 c22:	35 07       	cpc	r19, r21
 c24:	24 f4       	brge	.+8      	; 0xc2e <lcd_int16+0x1b2>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
 c26:	9f 2d       	mov	r25, r15
                bSigned = 0;
 c28:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
 c2a:	80 e2       	ldi	r24, 0x20	; 32
 c2c:	97 cf       	rjmp	.-210    	; 0xb5c <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
 c2e:	9f 2d       	mov	r25, r15
 c30:	a7 cf       	rjmp	.-178    	; 0xb80 <lcd_int16+0x104>

00000c32 <lm73_temp_convert>:
//the buffer pointed to by the arguement.
//TODO:Returns what???(uint8_t)??? Probably a BUG?

//Yeah, this is for you to do! ;^)

}//lm73_temp_convert
 c32:	08 95       	ret

00000c34 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
 c34:	1f 92       	push	r1
 c36:	0f 92       	push	r0
 c38:	0f b6       	in	r0, 0x3f	; 63
 c3a:	0f 92       	push	r0
 c3c:	11 24       	eor	r1, r1
 c3e:	0b b6       	in	r0, 0x3b	; 59
 c40:	0f 92       	push	r0
 c42:	2f 93       	push	r18
 c44:	3f 93       	push	r19
 c46:	8f 93       	push	r24
 c48:	9f 93       	push	r25
 c4a:	af 93       	push	r26
 c4c:	bf 93       	push	r27
 c4e:	ef 93       	push	r30
 c50:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 c52:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 c56:	8e 2f       	mov	r24, r30
 c58:	90 e0       	ldi	r25, 0x00	; 0
 c5a:	fc 01       	movw	r30, r24
 c5c:	38 97       	sbiw	r30, 0x08	; 8
 c5e:	e1 35       	cpi	r30, 0x51	; 81
 c60:	f1 05       	cpc	r31, r1
 c62:	b0 f0       	brcs	.+44     	; 0xc90 <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
 c64:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 c68:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <twi_state>
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
 c6c:	84 e0       	ldi	r24, 0x04	; 4
 c6e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  }//switch
}//TWI_isr
 c72:	ff 91       	pop	r31
 c74:	ef 91       	pop	r30
 c76:	bf 91       	pop	r27
 c78:	af 91       	pop	r26
 c7a:	9f 91       	pop	r25
 c7c:	8f 91       	pop	r24
 c7e:	3f 91       	pop	r19
 c80:	2f 91       	pop	r18
 c82:	0f 90       	pop	r0
 c84:	0b be       	out	0x3b, r0	; 59
 c86:	0f 90       	pop	r0
 c88:	0f be       	out	0x3f, r0	; 63
 c8a:	0f 90       	pop	r0
 c8c:	1f 90       	pop	r1
 c8e:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 c90:	ea 5b       	subi	r30, 0xBA	; 186
 c92:	ff 4f       	sbci	r31, 0xFF	; 255
 c94:	0c 94 57 07 	jmp	0xeae	; 0xeae <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
 c98:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <twi_buf_ptr.1780>
 c9c:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <twi_buf>
 ca0:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <twi_buf+0x1>
 ca4:	e8 0f       	add	r30, r24
 ca6:	f1 1d       	adc	r31, r1
 ca8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 cac:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
 cae:	84 e9       	ldi	r24, 0x94	; 148
 cb0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;      
 cb4:	de cf       	rjmp	.-68     	; 0xc72 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
 cb6:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <twi_bus_addr>
 cba:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
      twi_buf_ptr = 0;      //initalize buffer pointer 
 cbe:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <twi_buf_ptr.1780>
      TWCR = TWCR_SEND;     //send SLA+RW
 cc2:	85 e8       	ldi	r24, 0x85	; 133
 cc4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
 cc8:	d4 cf       	rjmp	.-88     	; 0xc72 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
 cca:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <twi_buf_ptr.1780>
 cce:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <twi_msg_size>
 cd2:	89 17       	cp	r24, r25
 cd4:	60 f7       	brcc	.-40     	; 0xcae <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
 cd6:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <twi_buf>
 cda:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <twi_buf+0x1>
 cde:	91 e0       	ldi	r25, 0x01	; 1
 ce0:	98 0f       	add	r25, r24
 ce2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <twi_buf_ptr.1780>
 ce6:	e8 0f       	add	r30, r24
 ce8:	f1 1d       	adc	r31, r1
 cea:	80 81       	ld	r24, Z
 cec:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
        TWCR = TWCR_SEND;               //send next byte 
 cf0:	85 e8       	ldi	r24, 0x85	; 133
 cf2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 cf6:	bd cf       	rjmp	.-134    	; 0xc72 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
 cf8:	85 ea       	ldi	r24, 0xA5	; 165
 cfa:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
 cfe:	b9 cf       	rjmp	.-142    	; 0xc72 <__vector_33+0x3e>
 d00:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <twi_buf_ptr.1780>
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 d04:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <twi_msg_size>
 d08:	30 e0       	ldi	r19, 0x00	; 0
 d0a:	90 e0       	ldi	r25, 0x00	; 0
 d0c:	01 97       	sbiw	r24, 0x01	; 1
 d0e:	28 17       	cp	r18, r24
 d10:	39 07       	cpc	r19, r25
 d12:	dc f4       	brge	.+54     	; 0xd4a <__vector_33+0x116>
 d14:	85 ec       	ldi	r24, 0xC5	; 197
 d16:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 d1a:	ab cf       	rjmp	.-170    	; 0xc72 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
 d1c:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <twi_buf>
 d20:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <twi_buf+0x1>
 d24:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <twi_buf_ptr.1780>
 d28:	21 e0       	ldi	r18, 0x01	; 1
 d2a:	28 0f       	add	r18, r24
 d2c:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <twi_buf_ptr.1780>
 d30:	e8 0f       	add	r30, r24
 d32:	f1 1d       	adc	r31, r1
 d34:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 d38:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 d3a:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <twi_msg_size>
 d3e:	30 e0       	ldi	r19, 0x00	; 0
 d40:	90 e0       	ldi	r25, 0x00	; 0
 d42:	01 97       	sbiw	r24, 0x01	; 1
 d44:	28 17       	cp	r18, r24
 d46:	39 07       	cpc	r19, r25
 d48:	2c f3       	brlt	.-54     	; 0xd14 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
 d4a:	85 e8       	ldi	r24, 0x85	; 133
 d4c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 d50:	90 cf       	rjmp	.-224    	; 0xc72 <__vector_33+0x3e>

00000d52 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 d52:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
}
 d56:	81 70       	andi	r24, 0x01	; 1
 d58:	08 95       	ret

00000d5a <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 d5a:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
 d5e:	90 fd       	sbrc	r25, 0
 d60:	fc cf       	rjmp	.-8      	; 0xd5a <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
 d62:	8e 7f       	andi	r24, 0xFE	; 254
 d64:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <twi_bus_addr>
  twi_buf = twi_data;                   //load pointer to write buffer
 d68:	70 93 12 02 	sts	0x0212, r23	; 0x800212 <twi_buf+0x1>
 d6c:	60 93 11 02 	sts	0x0211, r22	; 0x800211 <twi_buf>
  twi_msg_size = byte_cnt;              //load size of xfer 
 d70:	40 93 14 02 	sts	0x0214, r20	; 0x800214 <twi_msg_size>
  TWCR = TWCR_START;                    //initiate START
 d74:	85 ea       	ldi	r24, 0xA5	; 165
 d76:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 d7a:	08 95       	ret

00000d7c <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 d7c:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
 d80:	90 fd       	sbrc	r25, 0
 d82:	fc cf       	rjmp	.-8      	; 0xd7c <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
 d84:	81 60       	ori	r24, 0x01	; 1
 d86:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <twi_bus_addr>
  twi_buf = twi_data;                  //load pointer to write buffer
 d8a:	70 93 12 02 	sts	0x0212, r23	; 0x800212 <twi_buf+0x1>
 d8e:	60 93 11 02 	sts	0x0211, r22	; 0x800211 <twi_buf>
  twi_msg_size = byte_cnt;             //load size of xfer 
 d92:	40 93 14 02 	sts	0x0214, r20	; 0x800214 <twi_msg_size>
  TWCR = TWCR_START;                   //initiate START
 d96:	85 ea       	ldi	r24, 0xA5	; 165
 d98:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 d9c:	08 95       	ret

00000d9e <init_twi>:
 d9e:	8f ef       	ldi	r24, 0xFF	; 255
 da0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 da4:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 da8:	8c e0       	ldi	r24, 0x0C	; 12
 daa:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 dae:	08 95       	ret

00000db0 <main>:
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
  SPSR  |= (1<<SPI2X);            //run at double speed 
}//spi_init    

int main(){
  DDRF |= 0x08; //lcd strobe bit
 db0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 db4:	88 60       	ori	r24, 0x08	; 8
 db6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  uart_init();  
 dba:	0e 94 28 01 	call	0x250	; 0x250 <uart_init>
uint8_t           send_seq=0;         //transmit sequence number
char              lcd_string[3];      //holds value of sequence number
char 		  uart_buf[16];

void spi_init(void){
  DDRB   = DDRB | 0x07;           //Turn on SS, MOSI, SCLK pins
 dbe:	87 b3       	in	r24, 0x17	; 23
 dc0:	87 60       	ori	r24, 0x07	; 7
 dc2:	87 bb       	out	0x17, r24	; 23
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
 dc4:	8d b1       	in	r24, 0x0d	; 13
 dc6:	80 65       	ori	r24, 0x50	; 80
 dc8:	8d b9       	out	0x0d, r24	; 13
  SPSR  |= (1<<SPI2X);            //run at double speed 
 dca:	70 9a       	sbi	0x0e, 0	; 14

int main(){
  DDRF |= 0x08; //lcd strobe bit
  uart_init();  
  spi_init();
  lcd_init();
 dcc:	0e 94 a6 03 	call	0x74c	; 0x74c <lcd_init>
  clear_display();
 dd0:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <clear_display>
  cursor_home();
 dd4:	0e 94 11 03 	call	0x622	; 0x622 <cursor_home>
  init_twi();
 dd8:	0e 94 cf 06 	call	0xd9e	; 0xd9e <init_twi>

  sei();
 ddc:	78 94       	sei

uint16_t lm73_temp;  //a place to assemble the temperature from the lm73


lm73_wr_buf[0] = LM73_PTR_TEMP; //load lm73_wr_buf[0] with temperature pointer address
 dde:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <lm73_wr_buf>

twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 1 ); //start the TWI write process
 de2:	41 e0       	ldi	r20, 0x01	; 1
 de4:	6c e0       	ldi	r22, 0x0C	; 12
 de6:	72 e0       	ldi	r23, 0x02	; 2
 de8:	80 e9       	ldi	r24, 0x90	; 144
 dea:	0e 94 ad 06 	call	0xd5a	; 0xd5a <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 dee:	8f e3       	ldi	r24, 0x3F	; 63
 df0:	9f e1       	ldi	r25, 0x1F	; 31
 df2:	01 97       	sbiw	r24, 0x01	; 1
 df4:	f1 f7       	brne	.-4      	; 0xdf2 <main+0x42>
 df6:	00 c0       	rjmp	.+0      	; 0xdf8 <main+0x48>
 df8:	00 00       	nop


  while(1){

 /************** reading temperature *************/
 twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2) ; //read temperature data from LM73 (2 bytes) 
 dfa:	42 e0       	ldi	r20, 0x02	; 2
 dfc:	6e e0       	ldi	r22, 0x0E	; 14
 dfe:	72 e0       	ldi	r23, 0x02	; 2
 e00:	80 e9       	ldi	r24, 0x90	; 144
 e02:	0e 94 be 06 	call	0xd7c	; 0xd7c <twi_start_rd>
 e06:	8f e3       	ldi	r24, 0x3F	; 63
 e08:	9f e1       	ldi	r25, 0x1F	; 31
 e0a:	01 97       	sbiw	r24, 0x01	; 1
 e0c:	f1 f7       	brne	.-4      	; 0xe0a <main+0x5a>
 e0e:	00 c0       	rjmp	.+0      	; 0xe10 <main+0x60>
 e10:	00 00       	nop
 e12:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <lm73_rd_buf>
 e16:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <lm73_rd_buf+0x1>
 e1a:	98 27       	eor	r25, r24
 e1c:	89 27       	eor	r24, r25
 e1e:	98 27       	eor	r25, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 e20:	4a e0       	ldi	r20, 0x0A	; 10
 e22:	6b e2       	ldi	r22, 0x2B	; 43
 e24:	71 e0       	ldi	r23, 0x01	; 1
 e26:	88 0f       	add	r24, r24
 e28:	89 2f       	mov	r24, r25
 e2a:	88 1f       	adc	r24, r24
 e2c:	99 0b       	sbc	r25, r25
 e2e:	91 95       	neg	r25
 e30:	0e 94 96 07 	call	0xf2c	; 0xf2c <__itoa_ncheck>
 e34:	9f ef       	ldi	r25, 0xFF	; 255
 e36:	21 ee       	ldi	r18, 0xE1	; 225
 e38:	84 e0       	ldi	r24, 0x04	; 4
 e3a:	91 50       	subi	r25, 0x01	; 1
 e3c:	20 40       	sbci	r18, 0x00	; 0
 e3e:	80 40       	sbci	r24, 0x00	; 0
 e40:	e1 f7       	brne	.-8      	; 0xe3a <main+0x8a>
 e42:	00 c0       	rjmp	.+0      	; 0xe44 <main+0x94>
 e44:	00 00       	nop
 e46:	d9 cf       	rjmp	.-78     	; 0xdfa <main+0x4a>

00000e48 <__divmodhi4>:
 e48:	97 fb       	bst	r25, 7
 e4a:	07 2e       	mov	r0, r23
 e4c:	16 f4       	brtc	.+4      	; 0xe52 <__divmodhi4+0xa>
 e4e:	00 94       	com	r0
 e50:	07 d0       	rcall	.+14     	; 0xe60 <__divmodhi4_neg1>
 e52:	77 fd       	sbrc	r23, 7
 e54:	09 d0       	rcall	.+18     	; 0xe68 <__divmodhi4_neg2>
 e56:	0e 94 60 07 	call	0xec0	; 0xec0 <__udivmodhi4>
 e5a:	07 fc       	sbrc	r0, 7
 e5c:	05 d0       	rcall	.+10     	; 0xe68 <__divmodhi4_neg2>
 e5e:	3e f4       	brtc	.+14     	; 0xe6e <__divmodhi4_exit>

00000e60 <__divmodhi4_neg1>:
 e60:	90 95       	com	r25
 e62:	81 95       	neg	r24
 e64:	9f 4f       	sbci	r25, 0xFF	; 255
 e66:	08 95       	ret

00000e68 <__divmodhi4_neg2>:
 e68:	70 95       	com	r23
 e6a:	61 95       	neg	r22
 e6c:	7f 4f       	sbci	r23, 0xFF	; 255

00000e6e <__divmodhi4_exit>:
 e6e:	08 95       	ret

00000e70 <__divmodsi4>:
 e70:	05 2e       	mov	r0, r21
 e72:	97 fb       	bst	r25, 7
 e74:	1e f4       	brtc	.+6      	; 0xe7c <__divmodsi4+0xc>
 e76:	00 94       	com	r0
 e78:	0e 94 4f 07 	call	0xe9e	; 0xe9e <__negsi2>
 e7c:	57 fd       	sbrc	r21, 7
 e7e:	07 d0       	rcall	.+14     	; 0xe8e <__divmodsi4_neg2>
 e80:	0e 94 74 07 	call	0xee8	; 0xee8 <__udivmodsi4>
 e84:	07 fc       	sbrc	r0, 7
 e86:	03 d0       	rcall	.+6      	; 0xe8e <__divmodsi4_neg2>
 e88:	4e f4       	brtc	.+18     	; 0xe9c <__divmodsi4_exit>
 e8a:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <__negsi2>

00000e8e <__divmodsi4_neg2>:
 e8e:	50 95       	com	r21
 e90:	40 95       	com	r20
 e92:	30 95       	com	r19
 e94:	21 95       	neg	r18
 e96:	3f 4f       	sbci	r19, 0xFF	; 255
 e98:	4f 4f       	sbci	r20, 0xFF	; 255
 e9a:	5f 4f       	sbci	r21, 0xFF	; 255

00000e9c <__divmodsi4_exit>:
 e9c:	08 95       	ret

00000e9e <__negsi2>:
 e9e:	90 95       	com	r25
 ea0:	80 95       	com	r24
 ea2:	70 95       	com	r23
 ea4:	61 95       	neg	r22
 ea6:	7f 4f       	sbci	r23, 0xFF	; 255
 ea8:	8f 4f       	sbci	r24, 0xFF	; 255
 eaa:	9f 4f       	sbci	r25, 0xFF	; 255
 eac:	08 95       	ret

00000eae <__tablejump2__>:
 eae:	ee 0f       	add	r30, r30
 eb0:	ff 1f       	adc	r31, r31
 eb2:	00 24       	eor	r0, r0
 eb4:	00 1c       	adc	r0, r0
 eb6:	0b be       	out	0x3b, r0	; 59
 eb8:	07 90       	elpm	r0, Z+
 eba:	f6 91       	elpm	r31, Z
 ebc:	e0 2d       	mov	r30, r0
 ebe:	09 94       	ijmp

00000ec0 <__udivmodhi4>:
 ec0:	aa 1b       	sub	r26, r26
 ec2:	bb 1b       	sub	r27, r27
 ec4:	51 e1       	ldi	r21, 0x11	; 17
 ec6:	07 c0       	rjmp	.+14     	; 0xed6 <__udivmodhi4_ep>

00000ec8 <__udivmodhi4_loop>:
 ec8:	aa 1f       	adc	r26, r26
 eca:	bb 1f       	adc	r27, r27
 ecc:	a6 17       	cp	r26, r22
 ece:	b7 07       	cpc	r27, r23
 ed0:	10 f0       	brcs	.+4      	; 0xed6 <__udivmodhi4_ep>
 ed2:	a6 1b       	sub	r26, r22
 ed4:	b7 0b       	sbc	r27, r23

00000ed6 <__udivmodhi4_ep>:
 ed6:	88 1f       	adc	r24, r24
 ed8:	99 1f       	adc	r25, r25
 eda:	5a 95       	dec	r21
 edc:	a9 f7       	brne	.-22     	; 0xec8 <__udivmodhi4_loop>
 ede:	80 95       	com	r24
 ee0:	90 95       	com	r25
 ee2:	bc 01       	movw	r22, r24
 ee4:	cd 01       	movw	r24, r26
 ee6:	08 95       	ret

00000ee8 <__udivmodsi4>:
 ee8:	a1 e2       	ldi	r26, 0x21	; 33
 eea:	1a 2e       	mov	r1, r26
 eec:	aa 1b       	sub	r26, r26
 eee:	bb 1b       	sub	r27, r27
 ef0:	fd 01       	movw	r30, r26
 ef2:	0d c0       	rjmp	.+26     	; 0xf0e <__udivmodsi4_ep>

00000ef4 <__udivmodsi4_loop>:
 ef4:	aa 1f       	adc	r26, r26
 ef6:	bb 1f       	adc	r27, r27
 ef8:	ee 1f       	adc	r30, r30
 efa:	ff 1f       	adc	r31, r31
 efc:	a2 17       	cp	r26, r18
 efe:	b3 07       	cpc	r27, r19
 f00:	e4 07       	cpc	r30, r20
 f02:	f5 07       	cpc	r31, r21
 f04:	20 f0       	brcs	.+8      	; 0xf0e <__udivmodsi4_ep>
 f06:	a2 1b       	sub	r26, r18
 f08:	b3 0b       	sbc	r27, r19
 f0a:	e4 0b       	sbc	r30, r20
 f0c:	f5 0b       	sbc	r31, r21

00000f0e <__udivmodsi4_ep>:
 f0e:	66 1f       	adc	r22, r22
 f10:	77 1f       	adc	r23, r23
 f12:	88 1f       	adc	r24, r24
 f14:	99 1f       	adc	r25, r25
 f16:	1a 94       	dec	r1
 f18:	69 f7       	brne	.-38     	; 0xef4 <__udivmodsi4_loop>
 f1a:	60 95       	com	r22
 f1c:	70 95       	com	r23
 f1e:	80 95       	com	r24
 f20:	90 95       	com	r25
 f22:	9b 01       	movw	r18, r22
 f24:	ac 01       	movw	r20, r24
 f26:	bd 01       	movw	r22, r26
 f28:	cf 01       	movw	r24, r30
 f2a:	08 95       	ret

00000f2c <__itoa_ncheck>:
 f2c:	bb 27       	eor	r27, r27
 f2e:	4a 30       	cpi	r20, 0x0A	; 10
 f30:	31 f4       	brne	.+12     	; 0xf3e <__itoa_ncheck+0x12>
 f32:	99 23       	and	r25, r25
 f34:	22 f4       	brpl	.+8      	; 0xf3e <__itoa_ncheck+0x12>
 f36:	bd e2       	ldi	r27, 0x2D	; 45
 f38:	90 95       	com	r25
 f3a:	81 95       	neg	r24
 f3c:	9f 4f       	sbci	r25, 0xFF	; 255
 f3e:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__utoa_common>

00000f42 <__utoa_ncheck>:
 f42:	bb 27       	eor	r27, r27

00000f44 <__utoa_common>:
 f44:	fb 01       	movw	r30, r22
 f46:	55 27       	eor	r21, r21
 f48:	aa 27       	eor	r26, r26
 f4a:	88 0f       	add	r24, r24
 f4c:	99 1f       	adc	r25, r25
 f4e:	aa 1f       	adc	r26, r26
 f50:	a4 17       	cp	r26, r20
 f52:	10 f0       	brcs	.+4      	; 0xf58 <__utoa_common+0x14>
 f54:	a4 1b       	sub	r26, r20
 f56:	83 95       	inc	r24
 f58:	50 51       	subi	r21, 0x10	; 16
 f5a:	b9 f7       	brne	.-18     	; 0xf4a <__utoa_common+0x6>
 f5c:	a0 5d       	subi	r26, 0xD0	; 208
 f5e:	aa 33       	cpi	r26, 0x3A	; 58
 f60:	08 f0       	brcs	.+2      	; 0xf64 <__utoa_common+0x20>
 f62:	a9 5d       	subi	r26, 0xD9	; 217
 f64:	a1 93       	st	Z+, r26
 f66:	00 97       	sbiw	r24, 0x00	; 0
 f68:	79 f7       	brne	.-34     	; 0xf48 <__utoa_common+0x4>
 f6a:	b1 11       	cpse	r27, r1
 f6c:	b1 93       	st	Z+, r27
 f6e:	11 92       	st	Z+, r1
 f70:	cb 01       	movw	r24, r22
 f72:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <strrev>

00000f76 <strrev>:
 f76:	dc 01       	movw	r26, r24
 f78:	fc 01       	movw	r30, r24
 f7a:	67 2f       	mov	r22, r23
 f7c:	71 91       	ld	r23, Z+
 f7e:	77 23       	and	r23, r23
 f80:	e1 f7       	brne	.-8      	; 0xf7a <strrev+0x4>
 f82:	32 97       	sbiw	r30, 0x02	; 2
 f84:	04 c0       	rjmp	.+8      	; 0xf8e <strrev+0x18>
 f86:	7c 91       	ld	r23, X
 f88:	6d 93       	st	X+, r22
 f8a:	70 83       	st	Z, r23
 f8c:	62 91       	ld	r22, -Z
 f8e:	ae 17       	cp	r26, r30
 f90:	bf 07       	cpc	r27, r31
 f92:	c8 f3       	brcs	.-14     	; 0xf86 <strrev+0x10>
 f94:	08 95       	ret

00000f96 <_exit>:
 f96:	f8 94       	cli

00000f98 <__stop_program>:
 f98:	ff cf       	rjmp	.-2      	; 0xf98 <__stop_program>
