
uart_rxtx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000d7a  00000e0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ea  00800106  00800106  00000e14  2**0
                  ALLOC
  3 .stab         00002880  00000000  00000000  00000e14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013a5  00000000  00000000  00003694  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004a39  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004a4c  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00004a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00005208  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00005920  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  0000593a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 3f       	cpi	r26, 0xF0	; 240
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 d3 05 	call	0xba6	; 0xba6 <main>
  c6:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <spi_init>:
char              lcd_str_array[16];  //holds string to send to lcd
uint8_t           send_seq=0;         //transmit sequence number
char              lcd_string[3];      //holds value of sequence number

void spi_init(void){
  DDRB   = DDRB | 0x07;           //Turn on SS, MOSI, SCLK pins
  ce:	87 b3       	in	r24, 0x17	; 23
  d0:	87 60       	ori	r24, 0x07	; 7
  d2:	87 bb       	out	0x17, r24	; 23
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
  d4:	8d b1       	in	r24, 0x0d	; 13
  d6:	80 65       	ori	r24, 0x50	; 80
  d8:	8d b9       	out	0x0d, r24	; 13
  SPSR  |= (1<<SPI2X);            //run at double speed 
  da:	70 9a       	sbi	0x0e, 0	; 14
  dc:	08 95       	ret

000000de <__vector_18>:
    send_seq=(send_seq%20);
//**************  end tx portion ***************
  }//while
}//main

ISR(USART0_RX_vect){
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	0b b6       	in	r0, 0x3b	; 59
  ea:	0f 92       	push	r0
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
static  uint8_t  i;
  rx_char = UDR0;              //get character
  f4:	8c b1       	in	r24, 0x0c	; 12
  f6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <rx_char>
  lcd_str_array[i++]=rx_char;  //store in array 
  fa:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <i.2115>
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	9e 0f       	add	r25, r30
 102:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <i.2115>
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	e1 5f       	subi	r30, 0xF1	; 241
 10a:	fe 4f       	sbci	r31, 0xFE	; 254
 10c:	80 83       	st	Z, r24
 //if entire string has arrived, set flag, reset index
  if(rx_char == '\0'){
 10e:	81 11       	cpse	r24, r1
 110:	09 c0       	rjmp	.+18     	; 0x124 <__vector_18+0x46>
    rcv_rdy=1; 
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <rcv_rdy>
    lcd_str_array[--i]  = (' ');     //clear the count field
 118:	80 e2       	ldi	r24, 0x20	; 32
 11a:	80 83       	st	Z, r24
    lcd_str_array[i+1]  = (' ');
 11c:	81 83       	std	Z+1, r24	; 0x01
    lcd_str_array[i+2]  = (' ');
 11e:	82 83       	std	Z+2, r24	; 0x02
    i=0;  
 120:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <i.2115>
  }
}
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0b be       	out	0x3b, r0	; 59
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 13a:	5d 9b       	sbis	0x0b, 5	; 11
 13c:	fe cf       	rjmp	.-4      	; 0x13a <uart_putc>
    UDR0 = data;    // Send data byte
 13e:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 140:	5d 9b       	sbis	0x0b, 5	; 11
 142:	fe cf       	rjmp	.-4      	; 0x140 <uart_putc+0x6>
}
 144:	08 95       	ret

00000146 <uart1_putc>:
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 146:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 14a:	95 ff       	sbrs	r25, 5
 14c:	fc cf       	rjmp	.-8      	; 0x146 <uart1_putc>
    UDR1 = data;    // Send data byte
 14e:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 152:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 156:	85 ff       	sbrs	r24, 5
 158:	fc cf       	rjmp	.-8      	; 0x152 <uart1_putc+0xc>
}
 15a:	08 95       	ret

0000015c <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
 15c:	fc 01       	movw	r30, r24
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 15e:	90 81       	ld	r25, Z
 160:	99 23       	and	r25, r25
 162:	49 f0       	breq	.+18     	; 0x176 <uart_puts+0x1a>
 164:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 166:	5d 9b       	sbis	0x0b, 5	; 11
 168:	fe cf       	rjmp	.-4      	; 0x166 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
 16a:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 16c:	5d 9b       	sbis	0x0b, 5	; 11
 16e:	fe cf       	rjmp	.-4      	; 0x16c <uart_puts+0x10>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 170:	91 91       	ld	r25, Z+
 172:	91 11       	cpse	r25, r1
 174:	f8 cf       	rjmp	.-16     	; 0x166 <uart_puts+0xa>
 176:	08 95       	ret

00000178 <uart1_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 178:	fc 01       	movw	r30, r24
 17a:	20 81       	ld	r18, Z
 17c:	22 23       	and	r18, r18
 17e:	71 f0       	breq	.+28     	; 0x19c <uart1_puts+0x24>
 180:	31 96       	adiw	r30, 0x01	; 1
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 182:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 186:	95 ff       	sbrs	r25, 5
 188:	fc cf       	rjmp	.-8      	; 0x182 <uart1_puts+0xa>
    UDR1 = data;    // Send data byte
 18a:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
 18e:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 192:	95 ff       	sbrs	r25, 5
 194:	fc cf       	rjmp	.-8      	; 0x18e <uart1_puts+0x16>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
 196:	21 91       	ld	r18, Z+
 198:	21 11       	cpse	r18, r1
 19a:	f3 cf       	rjmp	.-26     	; 0x182 <uart1_puts+0xa>
 19c:	08 95       	ret

0000019e <uart_puts_p>:
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 19e:	9c 01       	movw	r18, r24
 1a0:	fc 01       	movw	r30, r24
 1a2:	44 91       	lpm	r20, Z
 1a4:	44 23       	and	r20, r20
 1a6:	69 f0       	breq	.+26     	; 0x1c2 <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	f9 01       	movw	r30, r18
 1ac:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 1ae:	5d 9b       	sbis	0x0b, 5	; 11
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
 1b2:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 1b4:	5d 9b       	sbis	0x0b, 5	; 11
 1b6:	fe cf       	rjmp	.-4      	; 0x1b4 <uart_puts_p+0x16>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
 1b8:	9c 01       	movw	r18, r24
 1ba:	fc 01       	movw	r30, r24
 1bc:	44 91       	lpm	r20, Z
 1be:	41 11       	cpse	r20, r1
 1c0:	f3 cf       	rjmp	.-26     	; 0x1a8 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
 1c2:	08 95       	ret

000001c4 <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
 1c4:	8a b1       	in	r24, 0x0a	; 10
 1c6:	88 69       	ori	r24, 0x98	; 152
 1c8:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 1ca:	e5 e9       	ldi	r30, 0x95	; 149
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	86 60       	ori	r24, 0x06	; 6
 1d2:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
 1d4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
 1d8:	87 e6       	ldi	r24, 0x67	; 103
 1da:	89 b9       	out	0x09, r24	; 9
 1dc:	08 95       	ret

000001de <uart1_init>:
//must be in place for the MAX232 chip to get data.

void uart1_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//UCSR1B |= (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1); //INTERRUPTS ENABLED
  UCSR1B |= (1<<RXEN1) | (1<<TXEN1);               //INTERRUPS DISABLED
 1de:	ea e9       	ldi	r30, 0x9A	; 154
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	88 61       	ori	r24, 0x18	; 24
 1e6:	80 83       	st	Z, r24

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);
 1e8:	ed e9       	ldi	r30, 0x9D	; 157
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	86 60       	ori	r24, 0x06	; 6
 1f0:	80 83       	st	Z, r24
  UBRR1H = (BAUDVALUE_1 >>8 ); //load upper byte of the baud rate into UBRR 
 1f2:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  UBRR1L =  BAUDVALUE_1;       //load lower byte of the baud rate into UBRR 
 1f6:	87 e6       	ldi	r24, 0x67	; 103
 1f8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 1fc:	08 95       	ret

000001fe <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 1fe:	80 e8       	ldi	r24, 0x80	; 128
 200:	9e e3       	ldi	r25, 0x3E	; 62
 202:	02 c0       	rjmp	.+4      	; 0x208 <uart_getc+0xa>
 204:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
 206:	21 f0       	breq	.+8      	; 0x210 <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
 208:	5f 9b       	sbis	0x0b, 7	; 11
 20a:	fc cf       	rjmp	.-8      	; 0x204 <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
 20c:	8c b1       	in	r24, 0x0c	; 12
 20e:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
 210:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
 212:	08 95       	ret

00000214 <uart1_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	9e e3       	ldi	r25, 0x3E	; 62
 218:	02 c0       	rjmp	.+4      	; 0x21e <uart1_getc+0xa>
 21a:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
 21c:	39 f0       	breq	.+14     	; 0x22c <uart1_getc+0x18>
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
 21e:	20 91 9b 00 	lds	r18, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 222:	27 ff       	sbrs	r18, 7
 224:	fa cf       	rjmp	.-12     	; 0x21a <uart1_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
 226:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 22a:	08 95       	ret
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
  timer++;
  if(timer >= 16000){ return(0);}
 22c:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
}
 22e:	08 95       	ret

00000230 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	81 11       	cpse	r24, r1
 234:	01 c0       	rjmp	.+2      	; 0x238 <send_lcd+0x8>
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 23a:	77 9b       	sbis	0x0e, 7	; 14
 23c:	fe cf       	rjmp	.-4      	; 0x23a <send_lcd+0xa>
  SPDR = byte;                        //send payload
 23e:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 240:	77 9b       	sbis	0x0e, 7	; 14
 242:	fe cf       	rjmp	.-4      	; 0x240 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 244:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 248:	88 60       	ori	r24, 0x08	; 8
 24a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 24e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 252:	87 7f       	andi	r24, 0xF7	; 247
 254:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 258:	08 95       	ret

0000025a <refresh_lcd>:
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;
 25a:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <i.2094>
 25e:	82 0f       	add	r24, r18
 260:	91 1d       	adc	r25, r1
 262:	fc 01       	movw	r30, r24
 264:	80 81       	ld	r24, Z
 266:	81 11       	cpse	r24, r1
 268:	1f c0       	rjmp	.+62     	; 0x2a8 <refresh_lcd+0x4e>
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <null_flag.2095>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 274:	77 9b       	sbis	0x0e, 7	; 14
 276:	fe cf       	rjmp	.-4      	; 0x274 <refresh_lcd+0x1a>
  SPDR = byte;                        //send payload
 278:	80 e2       	ldi	r24, 0x20	; 32
 27a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 27c:	77 9b       	sbis	0x0e, 7	; 14
 27e:	fe cf       	rjmp	.-4      	; 0x27c <refresh_lcd+0x22>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 280:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 284:	88 60       	ori	r24, 0x08	; 8
 286:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 28a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 28e:	87 7f       	andi	r24, 0xF7	; 247
 290:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
  else send_lcd(CHAR_BYTE,lcd_string_array[i]);

  i++;   //increment to next character
 294:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <i.2094>
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <i.2094>

  //delays are inserted to allow character to be written before moving
  //the cursor to the next line.
  if(i == 16)
 29e:	80 31       	cpi	r24, 0x10	; 16
 2a0:	49 f1       	breq	.+82     	; 0x2f4 <refresh_lcd+0x9a>
  {
      // goto line2, 1st char
      _delay_us(40);
      line2_col1();
  }
  else if(i == 32)
 2a2:	80 32       	cpi	r24, 0x20	; 32
 2a4:	69 f0       	breq	.+26     	; 0x2c0 <refresh_lcd+0x66>
 2a6:	08 95       	ret
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
 2a8:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <null_flag.2095>
 2ac:	91 11       	cpse	r25, r1
 2ae:	e0 cf       	rjmp	.-64     	; 0x270 <refresh_lcd+0x16>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2b4:	77 9b       	sbis	0x0e, 7	; 14
 2b6:	fe cf       	rjmp	.-4      	; 0x2b4 <refresh_lcd+0x5a>
  SPDR = byte;                        //send payload
 2b8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2ba:	77 9b       	sbis	0x0e, 7	; 14
 2bc:	fe cf       	rjmp	.-4      	; 0x2ba <refresh_lcd+0x60>
 2be:	e0 cf       	rjmp	.-64     	; 0x280 <refresh_lcd+0x26>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c0:	85 ed       	ldi	r24, 0xD5	; 213
 2c2:	8a 95       	dec	r24
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <refresh_lcd+0x68>
 2c6:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 2c8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2ca:	77 9b       	sbis	0x0e, 7	; 14
 2cc:	fe cf       	rjmp	.-4      	; 0x2ca <refresh_lcd+0x70>
  SPDR = byte;                        //send payload
 2ce:	80 e8       	ldi	r24, 0x80	; 128
 2d0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2d2:	77 9b       	sbis	0x0e, 7	; 14
 2d4:	fe cf       	rjmp	.-4      	; 0x2d2 <refresh_lcd+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 2d6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2da:	88 60       	ori	r24, 0x08	; 8
 2dc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2e4:	87 7f       	andi	r24, 0xF7	; 247
 2e6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  else if(i == 32)
  {
      // goto line1, 1st char
      _delay_us(40);
      line1_col1();
      null_flag=0;
 2ea:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <null_flag.2095>
      i=0;
 2ee:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <i.2094>
 2f2:	08 95       	ret
 2f4:	f5 ed       	ldi	r31, 0xD5	; 213
 2f6:	fa 95       	dec	r31
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <refresh_lcd+0x9c>
 2fa:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 2fc:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2fe:	77 9b       	sbis	0x0e, 7	; 14
 300:	fe cf       	rjmp	.-4      	; 0x2fe <refresh_lcd+0xa4>
  SPDR = byte;                        //send payload
 302:	80 ec       	ldi	r24, 0xC0	; 192
 304:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 306:	77 9b       	sbis	0x0e, 7	; 14
 308:	fe cf       	rjmp	.-4      	; 0x306 <refresh_lcd+0xac>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 30a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 30e:	88 60       	ori	r24, 0x08	; 8
 310:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 314:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 318:	87 7f       	andi	r24, 0xF7	; 247
 31a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 31e:	08 95       	ret

00000320 <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
 320:	66 0f       	add	r22, r22
 322:	66 0f       	add	r22, r22
 324:	66 0f       	add	r22, r22
 326:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 328:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 32a:	77 9b       	sbis	0x0e, 7	; 14
 32c:	fe cf       	rjmp	.-4      	; 0x32a <set_custom_character+0xa>
  SPDR = byte;                        //send payload
 32e:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 330:	77 9b       	sbis	0x0e, 7	; 14
 332:	fe cf       	rjmp	.-4      	; 0x330 <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 334:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 338:	28 60       	ori	r18, 0x08	; 8
 33a:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 33e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 342:	27 7f       	andi	r18, 0xF7	; 247
 344:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 348:	25 ed       	ldi	r18, 0xD5	; 213
 34a:	2a 95       	dec	r18
 34c:	f1 f7       	brne	.-4      	; 0x34a <set_custom_character+0x2a>
 34e:	00 00       	nop
 350:	fc 01       	movw	r30, r24
 352:	9c 01       	movw	r18, r24
 354:	28 5f       	subi	r18, 0xF8	; 248
 356:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 358:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
 35a:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 35c:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 35e:	77 9b       	sbis	0x0e, 7	; 14
 360:	fe cf       	rjmp	.-4      	; 0x35e <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
 362:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 364:	77 9b       	sbis	0x0e, 7	; 14
 366:	fe cf       	rjmp	.-4      	; 0x364 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 368:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 36c:	88 60       	ori	r24, 0x08	; 8
 36e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 372:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 376:	87 7f       	andi	r24, 0xF7	; 247
 378:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 37c:	85 ed       	ldi	r24, 0xD5	; 213
 37e:	8a 95       	dec	r24
 380:	f1 f7       	brne	.-4      	; 0x37e <set_custom_character+0x5e>
 382:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
 384:	e2 17       	cp	r30, r18
 386:	f3 07       	cpc	r31, r19
 388:	41 f7       	brne	.-48     	; 0x35a <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
 38a:	08 95       	ret

0000038c <set_cursor>:
//                          set_cursor
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
 38c:	90 e4       	ldi	r25, 0x40	; 64
 38e:	89 9f       	mul	r24, r25
 390:	60 0d       	add	r22, r0
 392:	11 24       	eor	r1, r1
 394:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 396:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 398:	77 9b       	sbis	0x0e, 7	; 14
 39a:	fe cf       	rjmp	.-4      	; 0x398 <set_cursor+0xc>
  SPDR = byte;                        //send payload
 39c:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 39e:	77 9b       	sbis	0x0e, 7	; 14
 3a0:	fe cf       	rjmp	.-4      	; 0x39e <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 3a2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3a6:	88 60       	ori	r24, 0x08	; 8
 3a8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3ac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3b0:	87 7f       	andi	r24, 0xF7	; 247
 3b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3b6:	08 95       	ret

000003b8 <uint2lcd>:
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 3b8:	81 11       	cpse	r24, r1
 3ba:	13 c0       	rjmp	.+38     	; 0x3e2 <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3c0:	77 9b       	sbis	0x0e, 7	; 14
 3c2:	fe cf       	rjmp	.-4      	; 0x3c0 <uint2lcd+0x8>
  SPDR = byte;                        //send payload
 3c4:	80 e3       	ldi	r24, 0x30	; 48
 3c6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3c8:	77 9b       	sbis	0x0e, 7	; 14
 3ca:	fe cf       	rjmp	.-4      	; 0x3c8 <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 3cc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3d0:	88 60       	ori	r24, 0x08	; 8
 3d2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3d6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3da:	87 7f       	andi	r24, 0xF7	; 247
 3dc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3e0:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 3e2:	84 36       	cpi	r24, 0x64	; 100
 3e4:	b0 f4       	brcc	.+44     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 3e6:	8a 30       	cpi	r24, 0x0A	; 10
 3e8:	60 f5       	brcc	.+88     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3ee:	77 9b       	sbis	0x0e, 7	; 14
 3f0:	fe cf       	rjmp	.-4      	; 0x3ee <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
 3f2:	9d ec       	ldi	r25, 0xCD	; 205
 3f4:	89 9f       	mul	r24, r25
 3f6:	91 2d       	mov	r25, r1
 3f8:	11 24       	eor	r1, r1
 3fa:	96 95       	lsr	r25
 3fc:	96 95       	lsr	r25
 3fe:	96 95       	lsr	r25
 400:	2a e0       	ldi	r18, 0x0A	; 10
 402:	92 9f       	mul	r25, r18
 404:	80 19       	sub	r24, r0
 406:	11 24       	eor	r1, r1
 408:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
 40a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 40c:	77 9b       	sbis	0x0e, 7	; 14
 40e:	fe cf       	rjmp	.-4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 410:	dd cf       	rjmp	.-70     	; 0x3cc <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 412:	99 e2       	ldi	r25, 0x29	; 41
 414:	89 9f       	mul	r24, r25
 416:	91 2d       	mov	r25, r1
 418:	11 24       	eor	r1, r1
 41a:	92 95       	swap	r25
 41c:	9f 70       	andi	r25, 0x0F	; 15
 41e:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 420:	21 e0       	ldi	r18, 0x01	; 1
 422:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 424:	77 9b       	sbis	0x0e, 7	; 14
 426:	fe cf       	rjmp	.-4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
  SPDR = byte;                        //send payload
 428:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 42a:	77 9b       	sbis	0x0e, 7	; 14
 42c:	fe cf       	rjmp	.-4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 42e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 432:	98 60       	ori	r25, 0x08	; 8
 434:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 438:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 43c:	97 7f       	andi	r25, 0xF7	; 247
 43e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 442:	99 e2       	ldi	r25, 0x29	; 41
 444:	89 9f       	mul	r24, r25
 446:	91 2d       	mov	r25, r1
 448:	11 24       	eor	r1, r1
 44a:	92 95       	swap	r25
 44c:	9f 70       	andi	r25, 0x0F	; 15
 44e:	38 2f       	mov	r19, r24
 450:	24 e6       	ldi	r18, 0x64	; 100
 452:	92 9f       	mul	r25, r18
 454:	30 19       	sub	r19, r0
 456:	11 24       	eor	r1, r1
 458:	2d ec       	ldi	r18, 0xCD	; 205
 45a:	32 9f       	mul	r19, r18
 45c:	91 2d       	mov	r25, r1
 45e:	11 24       	eor	r1, r1
 460:	96 95       	lsr	r25
 462:	96 95       	lsr	r25
 464:	96 95       	lsr	r25
 466:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 468:	21 e0       	ldi	r18, 0x01	; 1
 46a:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 46c:	77 9b       	sbis	0x0e, 7	; 14
 46e:	fe cf       	rjmp	.-4      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
  SPDR = byte;                        //send payload
 470:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 472:	77 9b       	sbis	0x0e, 7	; 14
 474:	fe cf       	rjmp	.-4      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 476:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 47a:	98 60       	ori	r25, 0x08	; 8
 47c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 480:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 484:	97 7f       	andi	r25, 0xF7	; 247
 486:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 48a:	af cf       	rjmp	.-162    	; 0x3ea <uint2lcd+0x32>

0000048c <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
 48c:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
 48e:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 496:	77 9b       	sbis	0x0e, 7	; 14
 498:	fe cf       	rjmp	.-4      	; 0x496 <int2lcd+0xa>
  SPDR = byte;                        //send payload
 49a:	9d e2       	ldi	r25, 0x2D	; 45
 49c:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 49e:	77 9b       	sbis	0x0e, 7	; 14
 4a0:	fe cf       	rjmp	.-4      	; 0x49e <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 4a2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4a6:	98 60       	ori	r25, 0x08	; 8
 4a8:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4ac:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4b0:	97 7f       	andi	r25, 0xF7	; 247
 4b2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4b6:	95 ed       	ldi	r25, 0xD5	; 213
 4b8:	9a 95       	dec	r25
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <int2lcd+0x2c>
 4bc:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
 4be:	81 95       	neg	r24
 4c0:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <uint2lcd>

000004c4 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 4c4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4c6:	77 9b       	sbis	0x0e, 7	; 14
 4c8:	fe cf       	rjmp	.-4      	; 0x4c6 <cursor_on+0x2>
  SPDR = byte;                        //send payload
 4ca:	8e e0       	ldi	r24, 0x0E	; 14
 4cc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4ce:	77 9b       	sbis	0x0e, 7	; 14
 4d0:	fe cf       	rjmp	.-4      	; 0x4ce <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 4d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4d6:	88 60       	ori	r24, 0x08	; 8
 4d8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4e0:	87 7f       	andi	r24, 0xF7	; 247
 4e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4e6:	08 95       	ret

000004e8 <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 4e8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4ea:	77 9b       	sbis	0x0e, 7	; 14
 4ec:	fe cf       	rjmp	.-4      	; 0x4ea <cursor_off+0x2>
  SPDR = byte;                        //send payload
 4ee:	8c e0       	ldi	r24, 0x0C	; 12
 4f0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4f2:	77 9b       	sbis	0x0e, 7	; 14
 4f4:	fe cf       	rjmp	.-4      	; 0x4f2 <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 4f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4fa:	88 60       	ori	r24, 0x08	; 8
 4fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 500:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 504:	87 7f       	andi	r24, 0xF7	; 247
 506:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 50a:	08 95       	ret

0000050c <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 50c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 50e:	77 9b       	sbis	0x0e, 7	; 14
 510:	fe cf       	rjmp	.-4      	; 0x50e <shift_right+0x2>
  SPDR = byte;                        //send payload
 512:	8e e1       	ldi	r24, 0x1E	; 30
 514:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 516:	77 9b       	sbis	0x0e, 7	; 14
 518:	fe cf       	rjmp	.-4      	; 0x516 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 51a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 51e:	88 60       	ori	r24, 0x08	; 8
 520:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 524:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 528:	87 7f       	andi	r24, 0xF7	; 247
 52a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 52e:	08 95       	ret

00000530 <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 530:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 532:	77 9b       	sbis	0x0e, 7	; 14
 534:	fe cf       	rjmp	.-4      	; 0x532 <shift_left+0x2>
  SPDR = byte;                        //send payload
 536:	88 e1       	ldi	r24, 0x18	; 24
 538:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 53a:	77 9b       	sbis	0x0e, 7	; 14
 53c:	fe cf       	rjmp	.-4      	; 0x53a <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 53e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 542:	88 60       	ori	r24, 0x08	; 8
 544:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 548:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 54c:	87 7f       	andi	r24, 0xF7	; 247
 54e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 552:	08 95       	ret

00000554 <strobe_lcd>:
 554:	e2 e6       	ldi	r30, 0x62	; 98
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	80 81       	ld	r24, Z
 55a:	88 60       	ori	r24, 0x08	; 8
 55c:	80 83       	st	Z, r24
 55e:	80 81       	ld	r24, Z
 560:	87 7f       	andi	r24, 0xF7	; 247
 562:	80 83       	st	Z, r24
 564:	08 95       	ret

00000566 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 566:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 568:	77 9b       	sbis	0x0e, 7	; 14
 56a:	fe cf       	rjmp	.-4      	; 0x568 <clear_display+0x2>
  SPDR = byte;                        //send payload
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 570:	77 9b       	sbis	0x0e, 7	; 14
 572:	fe cf       	rjmp	.-4      	; 0x570 <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 574:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 578:	88 60       	ori	r24, 0x08	; 8
 57a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 57e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 582:	87 7f       	andi	r24, 0xF7	; 247
 584:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 588:	8f e1       	ldi	r24, 0x1F	; 31
 58a:	9c e1       	ldi	r25, 0x1C	; 28
 58c:	01 97       	sbiw	r24, 0x01	; 1
 58e:	f1 f7       	brne	.-4      	; 0x58c <clear_display+0x26>
 590:	00 c0       	rjmp	.+0      	; 0x592 <clear_display+0x2c>
 592:	00 00       	nop
 594:	08 95       	ret

00000596 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 596:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 598:	77 9b       	sbis	0x0e, 7	; 14
 59a:	fe cf       	rjmp	.-4      	; 0x598 <cursor_home+0x2>
  SPDR = byte;                        //send payload
 59c:	82 e0       	ldi	r24, 0x02	; 2
 59e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5a0:	77 9b       	sbis	0x0e, 7	; 14
 5a2:	fe cf       	rjmp	.-4      	; 0x5a0 <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 5a4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5a8:	88 60       	ori	r24, 0x08	; 8
 5aa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5b2:	87 7f       	andi	r24, 0xF7	; 247
 5b4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5b8:	8f e6       	ldi	r24, 0x6F	; 111
 5ba:	97 e1       	ldi	r25, 0x17	; 23
 5bc:	01 97       	sbiw	r24, 0x01	; 1
 5be:	f1 f7       	brne	.-4      	; 0x5bc <cursor_home+0x26>
 5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <cursor_home+0x2c>
 5c2:	00 00       	nop
 5c4:	08 95       	ret

000005c6 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 5c6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5c8:	77 9b       	sbis	0x0e, 7	; 14
 5ca:	fe cf       	rjmp	.-4      	; 0x5c8 <line2_col1+0x2>
  SPDR = byte;                        //send payload
 5cc:	80 ec       	ldi	r24, 0xC0	; 192
 5ce:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5d0:	77 9b       	sbis	0x0e, 7	; 14
 5d2:	fe cf       	rjmp	.-4      	; 0x5d0 <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 5d4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5d8:	88 60       	ori	r24, 0x08	; 8
 5da:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5e2:	87 7f       	andi	r24, 0xF7	; 247
 5e4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5e8:	08 95       	ret

000005ea <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 5ea:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5ec:	77 9b       	sbis	0x0e, 7	; 14
 5ee:	fe cf       	rjmp	.-4      	; 0x5ec <line1_col1+0x2>
  SPDR = byte;                        //send payload
 5f0:	80 e8       	ldi	r24, 0x80	; 128
 5f2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5f4:	77 9b       	sbis	0x0e, 7	; 14
 5f6:	fe cf       	rjmp	.-4      	; 0x5f4 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 5f8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5fc:	88 60       	ori	r24, 0x08	; 8
 5fe:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 602:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 606:	87 7f       	andi	r24, 0xF7	; 247
 608:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 60c:	08 95       	ret

0000060e <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
 60e:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 610:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
 612:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 614:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 616:	77 9b       	sbis	0x0e, 7	; 14
 618:	fe cf       	rjmp	.-4      	; 0x616 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
 61a:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 61c:	77 9b       	sbis	0x0e, 7	; 14
 61e:	fe cf       	rjmp	.-4      	; 0x61c <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 620:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 624:	88 60       	ori	r24, 0x08	; 8
 626:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 62a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 62e:	87 7f       	andi	r24, 0xF7	; 247
 630:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 634:	85 ed       	ldi	r24, 0xD5	; 213
 636:	8a 95       	dec	r24
 638:	f1 f7       	brne	.-4      	; 0x636 <fill_spaces+0x28>
 63a:	00 00       	nop
 63c:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
 63e:	51 f7       	brne	.-44     	; 0x614 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ');
                _delay_us(40);  //40us wait between characters
	}
}
 640:	08 95       	ret

00000642 <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 642:	91 e0       	ldi	r25, 0x01	; 1
 644:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 646:	77 9b       	sbis	0x0e, 7	; 14
 648:	fe cf       	rjmp	.-4      	; 0x646 <char2lcd+0x4>
  SPDR = byte;                        //send payload
 64a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 64c:	77 9b       	sbis	0x0e, 7	; 14
 64e:	fe cf       	rjmp	.-4      	; 0x64c <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 650:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 654:	88 60       	ori	r24, 0x08	; 8
 656:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 65a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 65e:	87 7f       	andi	r24, 0xF7	; 247
 660:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 664:	08 95       	ret

00000666 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
 666:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 668:	40 e0       	ldi	r20, 0x00	; 0
 66a:	50 e0       	ldi	r21, 0x00	; 0
 66c:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 66e:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 670:	df 01       	movw	r26, r30
 672:	a4 0f       	add	r26, r20
 674:	b5 1f       	adc	r27, r21
 676:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 678:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 67a:	77 9b       	sbis	0x0e, 7	; 14
 67c:	fe cf       	rjmp	.-4      	; 0x67a <string2lcd+0x14>
  SPDR = byte;                        //send payload
 67e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 680:	77 9b       	sbis	0x0e, 7	; 14
 682:	fe cf       	rjmp	.-4      	; 0x680 <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 684:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 688:	98 60       	ori	r25, 0x08	; 8
 68a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 68e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 692:	97 7f       	andi	r25, 0xF7	; 247
 694:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 698:	85 ed       	ldi	r24, 0xD5	; 213
 69a:	8a 95       	dec	r24
 69c:	f1 f7       	brne	.-4      	; 0x69a <string2lcd+0x34>
 69e:	00 00       	nop
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 6a0:	6f 5f       	subi	r22, 0xFF	; 255
 6a2:	46 2f       	mov	r20, r22
 6a4:	50 e0       	ldi	r21, 0x00	; 0
 6a6:	df 01       	movw	r26, r30
 6a8:	0d 90       	ld	r0, X+
 6aa:	00 20       	and	r0, r0
 6ac:	e9 f7       	brne	.-6      	; 0x6a8 <string2lcd+0x42>
 6ae:	9d 01       	movw	r18, r26
 6b0:	2e 1b       	sub	r18, r30
 6b2:	3f 0b       	sbc	r19, r31
 6b4:	22 50       	subi	r18, 0x02	; 2
 6b6:	31 09       	sbc	r19, r1
 6b8:	24 17       	cp	r18, r20
 6ba:	35 07       	cpc	r19, r21
 6bc:	c8 f6       	brcc	.-78     	; 0x670 <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }
}
 6be:	08 95       	ret

000006c0 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6c0:	8f ef       	ldi	r24, 0xFF	; 255
 6c2:	99 ef       	ldi	r25, 0xF9	; 249
 6c4:	01 97       	sbiw	r24, 0x01	; 1
 6c6:	f1 f7       	brne	.-4      	; 0x6c4 <lcd_init+0x4>
 6c8:	00 c0       	rjmp	.+0      	; 0x6ca <lcd_init+0xa>
 6ca:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
 6cc:	88 e0       	ldi	r24, 0x08	; 8
 6ce:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 6d2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6d4:	77 9b       	sbis	0x0e, 7	; 14
 6d6:	fe cf       	rjmp	.-4      	; 0x6d4 <lcd_init+0x14>
  SPDR = byte;                        //send payload
 6d8:	80 e3       	ldi	r24, 0x30	; 48
 6da:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6dc:	77 9b       	sbis	0x0e, 7	; 14
 6de:	fe cf       	rjmp	.-4      	; 0x6dc <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 6e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6e4:	88 60       	ori	r24, 0x08	; 8
 6e6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6ee:	87 7f       	andi	r24, 0xF7	; 247
 6f0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6f4:	8f e5       	ldi	r24, 0x5F	; 95
 6f6:	9d e6       	ldi	r25, 0x6D	; 109
 6f8:	01 97       	sbiw	r24, 0x01	; 1
 6fa:	f1 f7       	brne	.-4      	; 0x6f8 <lcd_init+0x38>
 6fc:	00 c0       	rjmp	.+0      	; 0x6fe <lcd_init+0x3e>
 6fe:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 700:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 702:	77 9b       	sbis	0x0e, 7	; 14
 704:	fe cf       	rjmp	.-4      	; 0x702 <lcd_init+0x42>
  SPDR = byte;                        //send payload
 706:	80 e3       	ldi	r24, 0x30	; 48
 708:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 70a:	77 9b       	sbis	0x0e, 7	; 14
 70c:	fe cf       	rjmp	.-4      	; 0x70a <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 70e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 712:	88 60       	ori	r24, 0x08	; 8
 714:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 718:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 71c:	87 7f       	andi	r24, 0xF7	; 247
 71e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 722:	8f e5       	ldi	r24, 0x5F	; 95
 724:	9d e6       	ldi	r25, 0x6D	; 109
 726:	01 97       	sbiw	r24, 0x01	; 1
 728:	f1 f7       	brne	.-4      	; 0x726 <lcd_init+0x66>
 72a:	00 c0       	rjmp	.+0      	; 0x72c <lcd_init+0x6c>
 72c:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 72e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 730:	77 9b       	sbis	0x0e, 7	; 14
 732:	fe cf       	rjmp	.-4      	; 0x730 <lcd_init+0x70>
  SPDR = byte;                        //send payload
 734:	80 e3       	ldi	r24, 0x30	; 48
 736:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 738:	77 9b       	sbis	0x0e, 7	; 14
 73a:	fe cf       	rjmp	.-4      	; 0x738 <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 73c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 740:	88 60       	ori	r24, 0x08	; 8
 742:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 746:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 74a:	87 7f       	andi	r24, 0xF7	; 247
 74c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 750:	8f e5       	ldi	r24, 0x5F	; 95
 752:	9d e6       	ldi	r25, 0x6D	; 109
 754:	01 97       	sbiw	r24, 0x01	; 1
 756:	f1 f7       	brne	.-4      	; 0x754 <lcd_init+0x94>
 758:	00 c0       	rjmp	.+0      	; 0x75a <lcd_init+0x9a>
 75a:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 75c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 75e:	77 9b       	sbis	0x0e, 7	; 14
 760:	fe cf       	rjmp	.-4      	; 0x75e <lcd_init+0x9e>
  SPDR = byte;                        //send payload
 762:	88 e3       	ldi	r24, 0x38	; 56
 764:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 766:	77 9b       	sbis	0x0e, 7	; 14
 768:	fe cf       	rjmp	.-4      	; 0x766 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 76a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 76e:	88 60       	ori	r24, 0x08	; 8
 770:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 774:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 778:	87 7f       	andi	r24, 0xF7	; 247
 77a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 77e:	8f e1       	ldi	r24, 0x1F	; 31
 780:	9e e4       	ldi	r25, 0x4E	; 78
 782:	01 97       	sbiw	r24, 0x01	; 1
 784:	f1 f7       	brne	.-4      	; 0x782 <lcd_init+0xc2>
 786:	00 c0       	rjmp	.+0      	; 0x788 <lcd_init+0xc8>
 788:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 78a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 78c:	77 9b       	sbis	0x0e, 7	; 14
 78e:	fe cf       	rjmp	.-4      	; 0x78c <lcd_init+0xcc>
  SPDR = byte;                        //send payload
 790:	88 e0       	ldi	r24, 0x08	; 8
 792:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 794:	77 9b       	sbis	0x0e, 7	; 14
 796:	fe cf       	rjmp	.-4      	; 0x794 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 798:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 79c:	88 60       	ori	r24, 0x08	; 8
 79e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7a2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7a6:	87 7f       	andi	r24, 0xF7	; 247
 7a8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7ac:	8f e1       	ldi	r24, 0x1F	; 31
 7ae:	9e e4       	ldi	r25, 0x4E	; 78
 7b0:	01 97       	sbiw	r24, 0x01	; 1
 7b2:	f1 f7       	brne	.-4      	; 0x7b0 <lcd_init+0xf0>
 7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <lcd_init+0xf6>
 7b6:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 7b8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7ba:	77 9b       	sbis	0x0e, 7	; 14
 7bc:	fe cf       	rjmp	.-4      	; 0x7ba <lcd_init+0xfa>
  SPDR = byte;                        //send payload
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7c2:	77 9b       	sbis	0x0e, 7	; 14
 7c4:	fe cf       	rjmp	.-4      	; 0x7c2 <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 7c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7ca:	88 60       	ori	r24, 0x08	; 8
 7cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7d4:	87 7f       	andi	r24, 0xF7	; 247
 7d6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7da:	8f e1       	ldi	r24, 0x1F	; 31
 7dc:	9e e4       	ldi	r25, 0x4E	; 78
 7de:	01 97       	sbiw	r24, 0x01	; 1
 7e0:	f1 f7       	brne	.-4      	; 0x7de <lcd_init+0x11e>
 7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <lcd_init+0x124>
 7e4:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 7e6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7e8:	77 9b       	sbis	0x0e, 7	; 14
 7ea:	fe cf       	rjmp	.-4      	; 0x7e8 <lcd_init+0x128>
  SPDR = byte;                        //send payload
 7ec:	86 e0       	ldi	r24, 0x06	; 6
 7ee:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7f0:	77 9b       	sbis	0x0e, 7	; 14
 7f2:	fe cf       	rjmp	.-4      	; 0x7f0 <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 7f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7f8:	88 60       	ori	r24, 0x08	; 8
 7fa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7fe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 802:	87 7f       	andi	r24, 0xF7	; 247
 804:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 808:	8f e1       	ldi	r24, 0x1F	; 31
 80a:	9e e4       	ldi	r25, 0x4E	; 78
 80c:	01 97       	sbiw	r24, 0x01	; 1
 80e:	f1 f7       	brne	.-4      	; 0x80c <lcd_init+0x14c>
 810:	00 c0       	rjmp	.+0      	; 0x812 <lcd_init+0x152>
 812:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 814:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 816:	77 9b       	sbis	0x0e, 7	; 14
 818:	fe cf       	rjmp	.-4      	; 0x816 <lcd_init+0x156>
  SPDR = byte;                        //send payload
 81a:	8c e0       	ldi	r24, 0x0C	; 12
 81c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 81e:	77 9b       	sbis	0x0e, 7	; 14
 820:	fe cf       	rjmp	.-4      	; 0x81e <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 822:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 826:	88 60       	ori	r24, 0x08	; 8
 828:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 82c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 830:	87 7f       	andi	r24, 0xF7	; 247
 832:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 836:	8f e1       	ldi	r24, 0x1F	; 31
 838:	9e e4       	ldi	r25, 0x4E	; 78
 83a:	01 97       	sbiw	r24, 0x01	; 1
 83c:	f1 f7       	brne	.-4      	; 0x83a <lcd_init+0x17a>
 83e:	00 c0       	rjmp	.+0      	; 0x840 <lcd_init+0x180>
 840:	00 00       	nop
 842:	08 95       	ret

00000844 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
 844:	4f 92       	push	r4
 846:	5f 92       	push	r5
 848:	6f 92       	push	r6
 84a:	7f 92       	push	r7
 84c:	8f 92       	push	r8
 84e:	9f 92       	push	r9
 850:	af 92       	push	r10
 852:	bf 92       	push	r11
 854:	cf 92       	push	r12
 856:	df 92       	push	r13
 858:	ef 92       	push	r14
 85a:	ff 92       	push	r15
 85c:	0f 93       	push	r16
 85e:	1f 93       	push	r17
 860:	cf 93       	push	r28
 862:	df 93       	push	r29
 864:	cd b7       	in	r28, 0x3d	; 61
 866:	de b7       	in	r29, 0x3e	; 62
 868:	69 97       	sbiw	r28, 0x19	; 25
 86a:	0f b6       	in	r0, 0x3f	; 63
 86c:	f8 94       	cli
 86e:	de bf       	out	0x3e, r29	; 62
 870:	0f be       	out	0x3f, r0	; 63
 872:	cd bf       	out	0x3d, r28	; 61
 874:	14 2f       	mov	r17, r20
 876:	42 2e       	mov	r4, r18
 878:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient

      if (bSigned){
 87a:	00 23       	and	r16, r16
 87c:	79 f0       	breq	.+30     	; 0x89c <lcd_int32+0x58>
        bSigned = (qr.quot<0);
 87e:	6b 01       	movw	r12, r22
 880:	7c 01       	movw	r14, r24
 882:	cc 24       	eor	r12, r12
 884:	f7 fc       	sbrc	r15, 7
 886:	c3 94       	inc	r12
 888:	dd 24       	eor	r13, r13
 88a:	ee 24       	eor	r14, r14
 88c:	ff 24       	eor	r15, r15
 88e:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
 890:	6b 01       	movw	r12, r22
 892:	7c 01       	movw	r14, r24
 894:	97 fd       	sbrc	r25, 7
 896:	a3 c0       	rjmp	.+326    	; 0x9de <lcd_int32+0x19a>
 898:	c7 01       	movw	r24, r14
 89a:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point
      if (decpos){
 89c:	44 20       	and	r4, r4
 89e:	09 f4       	brne	.+2      	; 0x8a2 <lcd_int32+0x5e>
 8a0:	96 c0       	rjmp	.+300    	; 0x9ce <lcd_int32+0x18a>
 8a2:	9e 01       	movw	r18, r28
 8a4:	2f 5f       	subi	r18, 0xFF	; 255
 8a6:	3f 4f       	sbci	r19, 0xFF	; 255
 8a8:	59 01       	movw	r10, r18
 8aa:	49 01       	movw	r8, r18
 8ac:	66 24       	eor	r6, r6
 8ae:	6a 94       	dec	r6
 8b0:	64 0c       	add	r6, r4
 8b2:	71 2c       	mov	r7, r1
 8b4:	3f ef       	ldi	r19, 0xFF	; 255
 8b6:	63 1a       	sub	r6, r19
 8b8:	73 0a       	sbc	r7, r19
 8ba:	6a 0c       	add	r6, r10
 8bc:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
 8be:	2a e0       	ldi	r18, 0x0A	; 10
 8c0:	30 e0       	ldi	r19, 0x00	; 0
 8c2:	40 e0       	ldi	r20, 0x00	; 0
 8c4:	50 e0       	ldi	r21, 0x00	; 0
 8c6:	0e 94 31 06 	call	0xc62	; 0xc62 <__divmodsi4>
 8ca:	e6 2f       	mov	r30, r22
 8cc:	2a 8b       	std	Y+18, r18	; 0x12
 8ce:	3b 8b       	std	Y+19, r19	; 0x13
 8d0:	4c 8b       	std	Y+20, r20	; 0x14
 8d2:	5d 8b       	std	Y+21, r21	; 0x15
 8d4:	6a 89       	ldd	r22, Y+18	; 0x12
 8d6:	7b 89       	ldd	r23, Y+19	; 0x13
 8d8:	8c 89       	ldd	r24, Y+20	; 0x14
 8da:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 8dc:	20 e3       	ldi	r18, 0x30	; 48
 8de:	2e 0f       	add	r18, r30
 8e0:	f4 01       	movw	r30, r8
 8e2:	21 93       	st	Z+, r18
 8e4:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point
      if (decpos){
        for (; decpos ; decpos--){
 8e6:	6e 16       	cp	r6, r30
 8e8:	7f 06       	cpc	r7, r31
 8ea:	49 f7       	brne	.-46     	; 0x8be <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
 8ec:	99 24       	eor	r9, r9
 8ee:	93 94       	inc	r9
 8f0:	94 0c       	add	r9, r4
 8f2:	f5 01       	movw	r30, r10
 8f4:	e4 0d       	add	r30, r4
 8f6:	f1 1d       	adc	r31, r1
 8f8:	2e e2       	ldi	r18, 0x2E	; 46
 8fa:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point
      do{
          qr = ldiv(qr.quot, 10);
 8fc:	2a e0       	ldi	r18, 0x0A	; 10
 8fe:	30 e0       	ldi	r19, 0x00	; 0
 900:	40 e0       	ldi	r20, 0x00	; 0
 902:	50 e0       	ldi	r21, 0x00	; 0
 904:	0e 94 31 06 	call	0xc62	; 0xc62 <__divmodsi4>
 908:	e6 2f       	mov	r30, r22
 90a:	2a 8b       	std	Y+18, r18	; 0x12
 90c:	3b 8b       	std	Y+19, r19	; 0x13
 90e:	4c 8b       	std	Y+20, r20	; 0x14
 910:	5d 8b       	std	Y+21, r21	; 0x15
 912:	6e 8b       	std	Y+22, r22	; 0x16
 914:	7f 8b       	std	Y+23, r23	; 0x17
 916:	88 8f       	std	Y+24, r24	; 0x18
 918:	99 8f       	std	Y+25, r25	; 0x19
 91a:	6a 89       	ldd	r22, Y+18	; 0x12
 91c:	7b 89       	ldd	r23, Y+19	; 0x13
 91e:	8c 89       	ldd	r24, Y+20	; 0x14
 920:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 922:	31 e0       	ldi	r19, 0x01	; 1
 924:	39 0d       	add	r19, r9
 926:	d5 01       	movw	r26, r10
 928:	a9 0d       	add	r26, r9
 92a:	b1 1d       	adc	r27, r1
 92c:	e0 5d       	subi	r30, 0xD0	; 208
 92e:	ec 93       	st	X, r30
 930:	93 2e       	mov	r9, r19
        }while(qr.quot);
 932:	61 15       	cp	r22, r1
 934:	71 05       	cpc	r23, r1
 936:	81 05       	cpc	r24, r1
 938:	91 05       	cpc	r25, r1
 93a:	01 f7       	brne	.-64     	; 0x8fc <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
 93c:	11 23       	and	r17, r17
 93e:	61 f0       	breq	.+24     	; 0x958 <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
 940:	51 10       	cpse	r5, r1
 942:	4b c0       	rjmp	.+150    	; 0x9da <lcd_int32+0x196>
 944:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
 946:	31 17       	cp	r19, r17
 948:	38 f4       	brcc	.+14     	; 0x958 <lcd_int32+0x114>
 94a:	f5 01       	movw	r30, r10
 94c:	e3 0f       	add	r30, r19
 94e:	f1 1d       	adc	r31, r1
 950:	90 83       	st	Z, r25
 952:	3f 5f       	subi	r19, 0xFF	; 255
 954:	13 13       	cpse	r17, r19
 956:	f9 cf       	rjmp	.-14     	; 0x94a <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
 958:	00 23       	and	r16, r16
 95a:	31 f0       	breq	.+12     	; 0x968 <lcd_int32+0x124>
 95c:	f5 01       	movw	r30, r10
 95e:	e3 0f       	add	r30, r19
 960:	f1 1d       	adc	r31, r1
 962:	9d e2       	ldi	r25, 0x2D	; 45
 964:	90 83       	st	Z, r25
 966:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 968:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 96a:	31 50       	subi	r19, 0x01	; 1
 96c:	f5 01       	movw	r30, r10
 96e:	e3 0f       	add	r30, r19
 970:	f1 1d       	adc	r31, r1
 972:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 974:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 976:	77 9b       	sbis	0x0e, 7	; 14
 978:	fe cf       	rjmp	.-4      	; 0x976 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
 97a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 97c:	77 9b       	sbis	0x0e, 7	; 14
 97e:	fe cf       	rjmp	.-4      	; 0x97c <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 980:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 984:	98 60       	ori	r25, 0x08	; 8
 986:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 98a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 98e:	97 7f       	andi	r25, 0xF7	; 247
 990:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 994:	85 ed       	ldi	r24, 0xD5	; 213
 996:	8a 95       	dec	r24
 998:	f1 f7       	brne	.-4      	; 0x996 <lcd_int32+0x152>
 99a:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 99c:	31 11       	cpse	r19, r1
 99e:	e5 cf       	rjmp	.-54     	; 0x96a <lcd_int32+0x126>

}
 9a0:	69 96       	adiw	r28, 0x19	; 25
 9a2:	0f b6       	in	r0, 0x3f	; 63
 9a4:	f8 94       	cli
 9a6:	de bf       	out	0x3e, r29	; 62
 9a8:	0f be       	out	0x3f, r0	; 63
 9aa:	cd bf       	out	0x3d, r28	; 61
 9ac:	df 91       	pop	r29
 9ae:	cf 91       	pop	r28
 9b0:	1f 91       	pop	r17
 9b2:	0f 91       	pop	r16
 9b4:	ff 90       	pop	r15
 9b6:	ef 90       	pop	r14
 9b8:	df 90       	pop	r13
 9ba:	cf 90       	pop	r12
 9bc:	bf 90       	pop	r11
 9be:	af 90       	pop	r10
 9c0:	9f 90       	pop	r9
 9c2:	8f 90       	pop	r8
 9c4:	7f 90       	pop	r7
 9c6:	6f 90       	pop	r6
 9c8:	5f 90       	pop	r5
 9ca:	4f 90       	pop	r4
 9cc:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
 9ce:	91 2c       	mov	r9, r1
 9d0:	9e 01       	movw	r18, r28
 9d2:	2f 5f       	subi	r18, 0xFF	; 255
 9d4:	3f 4f       	sbci	r19, 0xFF	; 255
 9d6:	59 01       	movw	r10, r18
 9d8:	91 cf       	rjmp	.-222    	; 0x8fc <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
 9da:	90 e3       	ldi	r25, 0x30	; 48
 9dc:	b4 cf       	rjmp	.-152    	; 0x946 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
 9de:	f0 94       	com	r15
 9e0:	e0 94       	com	r14
 9e2:	d0 94       	com	r13
 9e4:	c0 94       	com	r12
 9e6:	c1 1c       	adc	r12, r1
 9e8:	d1 1c       	adc	r13, r1
 9ea:	e1 1c       	adc	r14, r1
 9ec:	f1 1c       	adc	r15, r1
 9ee:	54 cf       	rjmp	.-344    	; 0x898 <lcd_int32+0x54>

000009f0 <lcd_int16>:
 9f0:	5f 92       	push	r5
 9f2:	6f 92       	push	r6
 9f4:	7f 92       	push	r7
 9f6:	8f 92       	push	r8
 9f8:	9f 92       	push	r9
 9fa:	af 92       	push	r10
 9fc:	bf 92       	push	r11
 9fe:	cf 92       	push	r12
 a00:	df 92       	push	r13
 a02:	ef 92       	push	r14
 a04:	ff 92       	push	r15
 a06:	0f 93       	push	r16
 a08:	1f 93       	push	r17
 a0a:	cf 93       	push	r28
 a0c:	df 93       	push	r29
 a0e:	cd b7       	in	r28, 0x3d	; 61
 a10:	de b7       	in	r29, 0x3e	; 62
 a12:	61 97       	sbiw	r28, 0x11	; 17
 a14:	0f b6       	in	r0, 0x3f	; 63
 a16:	f8 94       	cli
 a18:	de bf       	out	0x3e, r29	; 62
 a1a:	0f be       	out	0x3f, r0	; 63
 a1c:	cd bf       	out	0x3d, r28	; 61
 a1e:	5c 01       	movw	r10, r24
 a20:	96 2e       	mov	r9, r22
 a22:	54 2e       	mov	r5, r20
 a24:	62 2e       	mov	r6, r18
 a26:	8b 2c       	mov	r8, r11
 a28:	88 1c       	adc	r8, r8
 a2a:	88 24       	eor	r8, r8
 a2c:	88 1c       	adc	r8, r8
 a2e:	78 2c       	mov	r7, r8
 a30:	9c 01       	movw	r18, r24
 a32:	97 fd       	sbrc	r25, 7
 a34:	9d c0       	rjmp	.+314    	; 0xb70 <lcd_int16+0x180>
 a36:	55 20       	and	r5, r5
 a38:	09 f4       	brne	.+2      	; 0xa3c <lcd_int16+0x4c>
 a3a:	8e c0       	rjmp	.+284    	; 0xb58 <lcd_int16+0x168>
 a3c:	8e 01       	movw	r16, r28
 a3e:	0f 5f       	subi	r16, 0xFF	; 255
 a40:	1f 4f       	sbci	r17, 0xFF	; 255
 a42:	78 01       	movw	r14, r16
 a44:	cc 24       	eor	r12, r12
 a46:	ca 94       	dec	r12
 a48:	c5 0c       	add	r12, r5
 a4a:	d1 2c       	mov	r13, r1
 a4c:	8f ef       	ldi	r24, 0xFF	; 255
 a4e:	c8 1a       	sub	r12, r24
 a50:	d8 0a       	sbc	r13, r24
 a52:	c0 0e       	add	r12, r16
 a54:	d1 1e       	adc	r13, r17
 a56:	6a e0       	ldi	r22, 0x0A	; 10
 a58:	70 e0       	ldi	r23, 0x00	; 0
 a5a:	c9 01       	movw	r24, r18
 a5c:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__divmodhi4>
 a60:	46 2f       	mov	r20, r22
 a62:	24 2f       	mov	r18, r20
 a64:	37 2f       	mov	r19, r23
 a66:	80 5d       	subi	r24, 0xD0	; 208
 a68:	f7 01       	movw	r30, r14
 a6a:	81 93       	st	Z+, r24
 a6c:	7f 01       	movw	r14, r30
 a6e:	ec 15       	cp	r30, r12
 a70:	fd 05       	cpc	r31, r13
 a72:	89 f7       	brne	.-30     	; 0xa56 <lcd_int16+0x66>
 a74:	ff 24       	eor	r15, r15
 a76:	f3 94       	inc	r15
 a78:	f5 0c       	add	r15, r5
 a7a:	f8 01       	movw	r30, r16
 a7c:	e5 0d       	add	r30, r5
 a7e:	f1 1d       	adc	r31, r1
 a80:	8e e2       	ldi	r24, 0x2E	; 46
 a82:	80 83       	st	Z, r24
 a84:	01 c0       	rjmp	.+2      	; 0xa88 <lcd_int16+0x98>
 a86:	f9 2e       	mov	r15, r25
 a88:	6a e0       	ldi	r22, 0x0A	; 10
 a8a:	70 e0       	ldi	r23, 0x00	; 0
 a8c:	c9 01       	movw	r24, r18
 a8e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__divmodhi4>
 a92:	46 2f       	mov	r20, r22
 a94:	24 2f       	mov	r18, r20
 a96:	37 2f       	mov	r19, r23
 a98:	91 e0       	ldi	r25, 0x01	; 1
 a9a:	9f 0d       	add	r25, r15
 a9c:	f8 01       	movw	r30, r16
 a9e:	ef 0d       	add	r30, r15
 aa0:	f1 1d       	adc	r31, r1
 aa2:	80 5d       	subi	r24, 0xD0	; 208
 aa4:	80 83       	st	Z, r24
 aa6:	21 15       	cp	r18, r1
 aa8:	31 05       	cpc	r19, r1
 aaa:	69 f7       	brne	.-38     	; 0xa86 <lcd_int16+0x96>
 aac:	61 10       	cpse	r6, r1
 aae:	59 c0       	rjmp	.+178    	; 0xb62 <lcd_int16+0x172>
 ab0:	b7 fc       	sbrc	r11, 7
 ab2:	63 c0       	rjmp	.+198    	; 0xb7a <lcd_int16+0x18a>
 ab4:	99 20       	and	r9, r9
 ab6:	b1 f0       	breq	.+44     	; 0xae4 <lcd_int16+0xf4>
 ab8:	68 2d       	mov	r22, r8
 aba:	70 e0       	ldi	r23, 0x00	; 0
 abc:	80 e2       	ldi	r24, 0x20	; 32
 abe:	29 2f       	mov	r18, r25
 ac0:	30 e0       	ldi	r19, 0x00	; 0
 ac2:	49 2d       	mov	r20, r9
 ac4:	50 e0       	ldi	r21, 0x00	; 0
 ac6:	46 1b       	sub	r20, r22
 ac8:	57 0b       	sbc	r21, r23
 aca:	24 17       	cp	r18, r20
 acc:	35 07       	cpc	r19, r21
 ace:	54 f4       	brge	.+20     	; 0xae4 <lcd_int16+0xf4>
 ad0:	9f 5f       	subi	r25, 0xFF	; 255
 ad2:	f8 01       	movw	r30, r16
 ad4:	e2 0f       	add	r30, r18
 ad6:	f3 1f       	adc	r31, r19
 ad8:	80 83       	st	Z, r24
 ada:	29 2f       	mov	r18, r25
 adc:	30 e0       	ldi	r19, 0x00	; 0
 ade:	24 17       	cp	r18, r20
 ae0:	35 07       	cpc	r19, r21
 ae2:	b4 f3       	brlt	.-20     	; 0xad0 <lcd_int16+0xe0>
 ae4:	77 20       	and	r7, r7
 ae6:	31 f0       	breq	.+12     	; 0xaf4 <lcd_int16+0x104>
 ae8:	f8 01       	movw	r30, r16
 aea:	e9 0f       	add	r30, r25
 aec:	f1 1d       	adc	r31, r1
 aee:	8d e2       	ldi	r24, 0x2D	; 45
 af0:	80 83       	st	Z, r24
 af2:	9f 5f       	subi	r25, 0xFF	; 255
 af4:	21 e0       	ldi	r18, 0x01	; 1
 af6:	91 50       	subi	r25, 0x01	; 1
 af8:	f8 01       	movw	r30, r16
 afa:	e9 0f       	add	r30, r25
 afc:	f1 1d       	adc	r31, r1
 afe:	80 81       	ld	r24, Z
 b00:	2f b9       	out	0x0f, r18	; 15
 b02:	77 9b       	sbis	0x0e, 7	; 14
 b04:	fe cf       	rjmp	.-4      	; 0xb02 <lcd_int16+0x112>
 b06:	8f b9       	out	0x0f, r24	; 15
 b08:	77 9b       	sbis	0x0e, 7	; 14
 b0a:	fe cf       	rjmp	.-4      	; 0xb08 <lcd_int16+0x118>
 b0c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 b10:	88 60       	ori	r24, 0x08	; 8
 b12:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 b16:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 b1a:	87 7f       	andi	r24, 0xF7	; 247
 b1c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 b20:	f5 ed       	ldi	r31, 0xD5	; 213
 b22:	fa 95       	dec	r31
 b24:	f1 f7       	brne	.-4      	; 0xb22 <lcd_int16+0x132>
 b26:	00 00       	nop
 b28:	91 11       	cpse	r25, r1
 b2a:	e5 cf       	rjmp	.-54     	; 0xaf6 <lcd_int16+0x106>
 b2c:	61 96       	adiw	r28, 0x11	; 17
 b2e:	0f b6       	in	r0, 0x3f	; 63
 b30:	f8 94       	cli
 b32:	de bf       	out	0x3e, r29	; 62
 b34:	0f be       	out	0x3f, r0	; 63
 b36:	cd bf       	out	0x3d, r28	; 61
 b38:	df 91       	pop	r29
 b3a:	cf 91       	pop	r28
 b3c:	1f 91       	pop	r17
 b3e:	0f 91       	pop	r16
 b40:	ff 90       	pop	r15
 b42:	ef 90       	pop	r14
 b44:	df 90       	pop	r13
 b46:	cf 90       	pop	r12
 b48:	bf 90       	pop	r11
 b4a:	af 90       	pop	r10
 b4c:	9f 90       	pop	r9
 b4e:	8f 90       	pop	r8
 b50:	7f 90       	pop	r7
 b52:	6f 90       	pop	r6
 b54:	5f 90       	pop	r5
 b56:	08 95       	ret
 b58:	f1 2c       	mov	r15, r1
 b5a:	8e 01       	movw	r16, r28
 b5c:	0f 5f       	subi	r16, 0xFF	; 255
 b5e:	1f 4f       	sbci	r17, 0xFF	; 255
 b60:	93 cf       	rjmp	.-218    	; 0xa88 <lcd_int16+0x98>
 b62:	99 20       	and	r9, r9
 b64:	09 f4       	brne	.+2      	; 0xb68 <lcd_int16+0x178>
 b66:	be cf       	rjmp	.-132    	; 0xae4 <lcd_int16+0xf4>
 b68:	68 2d       	mov	r22, r8
 b6a:	70 e0       	ldi	r23, 0x00	; 0
 b6c:	80 e3       	ldi	r24, 0x30	; 48
 b6e:	a7 cf       	rjmp	.-178    	; 0xabe <lcd_int16+0xce>
 b70:	22 27       	eor	r18, r18
 b72:	33 27       	eor	r19, r19
 b74:	28 1b       	sub	r18, r24
 b76:	39 0b       	sbc	r19, r25
 b78:	5e cf       	rjmp	.-324    	; 0xa36 <lcd_int16+0x46>
 b7a:	f3 94       	inc	r15
 b7c:	f3 94       	inc	r15
 b7e:	f8 01       	movw	r30, r16
 b80:	e9 0f       	add	r30, r25
 b82:	f1 1d       	adc	r31, r1
 b84:	8d e2       	ldi	r24, 0x2D	; 45
 b86:	80 83       	st	Z, r24
 b88:	99 20       	and	r9, r9
 b8a:	59 f0       	breq	.+22     	; 0xba2 <lcd_int16+0x1b2>
 b8c:	2f 2d       	mov	r18, r15
 b8e:	30 e0       	ldi	r19, 0x00	; 0
 b90:	49 2d       	mov	r20, r9
 b92:	50 e0       	ldi	r21, 0x00	; 0
 b94:	24 17       	cp	r18, r20
 b96:	35 07       	cpc	r19, r21
 b98:	24 f4       	brge	.+8      	; 0xba2 <lcd_int16+0x1b2>
 b9a:	9f 2d       	mov	r25, r15
 b9c:	71 2c       	mov	r7, r1
 b9e:	80 e2       	ldi	r24, 0x20	; 32
 ba0:	97 cf       	rjmp	.-210    	; 0xad0 <lcd_int16+0xe0>
 ba2:	9f 2d       	mov	r25, r15
 ba4:	a7 cf       	rjmp	.-178    	; 0xaf4 <lcd_int16+0x104>

00000ba6 <main>:
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
  SPSR  |= (1<<SPI2X);            //run at double speed 
}//spi_init    

int main(){
  DDRF |= 0x08; //lcd strobe bit
 ba6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 baa:	88 60       	ori	r24, 0x08	; 8
 bac:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  uart_init();  
 bb0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <uart_init>
char              lcd_str_array[16];  //holds string to send to lcd
uint8_t           send_seq=0;         //transmit sequence number
char              lcd_string[3];      //holds value of sequence number

void spi_init(void){
  DDRB   = DDRB | 0x07;           //Turn on SS, MOSI, SCLK pins
 bb4:	87 b3       	in	r24, 0x17	; 23
 bb6:	87 60       	ori	r24, 0x07	; 7
 bb8:	87 bb       	out	0x17, r24	; 23
  SPCR  |= (1<<SPE) | (1<<MSTR);  //set up SPI mode
 bba:	8d b1       	in	r24, 0x0d	; 13
 bbc:	80 65       	ori	r24, 0x50	; 80
 bbe:	8d b9       	out	0x0d, r24	; 13
  SPSR  |= (1<<SPI2X);            //run at double speed 
 bc0:	70 9a       	sbi	0x0e, 0	; 14

int main(){
  DDRF |= 0x08; //lcd strobe bit
  uart_init();  
  spi_init();
  lcd_init();
 bc2:	0e 94 60 03 	call	0x6c0	; 0x6c0 <lcd_init>
  clear_display();
 bc6:	0e 94 b3 02 	call	0x566	; 0x566 <clear_display>
  cursor_home();
 bca:	0e 94 cb 02 	call	0x596	; 0x596 <cursor_home>

  sei();
 bce:	78 94       	sei
    itoa(send_seq,lcd_string,10);
    uart_puts(lcd_string);
    uart_putc('\0');
    for(i=0;i<=9;i++){_delay_ms(100);}
    send_seq++;
    send_seq=(send_seq%20);
 bd0:	cd ec       	ldi	r28, 0xCD	; 205
//**************  end rcv portion ***************

//reads in the temperature from TWI converts it to F then sends it to Master

//**************  start tx portion ***************
    uart_puts("test");
 bd2:	80 e0       	ldi	r24, 0x00	; 0
 bd4:	91 e0       	ldi	r25, 0x01	; 1
 bd6:	0e 94 ae 00 	call	0x15c	; 0x15c <uart_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 bda:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 bde:	4a e0       	ldi	r20, 0x0A	; 10
 be0:	6c e0       	ldi	r22, 0x0C	; 12
 be2:	71 e0       	ldi	r23, 0x01	; 1
 be4:	90 e0       	ldi	r25, 0x00	; 0
 be6:	0e 94 86 06 	call	0xd0c	; 0xd0c <__itoa_ncheck>
    itoa(send_seq,lcd_string,10);
    uart_puts(lcd_string);
 bea:	8c e0       	ldi	r24, 0x0C	; 12
 bec:	91 e0       	ldi	r25, 0x01	; 1
 bee:	0e 94 ae 00 	call	0x15c	; 0x15c <uart_puts>
    uart_putc('\0');
 bf2:	80 e0       	ldi	r24, 0x00	; 0
 bf4:	0e 94 9d 00 	call	0x13a	; 0x13a <uart_putc>
    for(i=0;i<=9;i++){_delay_ms(100);}
 bf8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <i>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 bfc:	2f ef       	ldi	r18, 0xFF	; 255
 bfe:	81 ee       	ldi	r24, 0xE1	; 225
 c00:	94 e0       	ldi	r25, 0x04	; 4
 c02:	21 50       	subi	r18, 0x01	; 1
 c04:	80 40       	sbci	r24, 0x00	; 0
 c06:	90 40       	sbci	r25, 0x00	; 0
 c08:	e1 f7       	brne	.-8      	; 0xc02 <main+0x5c>
 c0a:	00 c0       	rjmp	.+0      	; 0xc0c <main+0x66>
 c0c:	00 00       	nop
 c0e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <i>
 c12:	8f 5f       	subi	r24, 0xFF	; 255
 c14:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <i>
 c18:	8a 30       	cpi	r24, 0x0A	; 10
 c1a:	80 f3       	brcs	.-32     	; 0xbfc <main+0x56>
    send_seq++;
    send_seq=(send_seq%20);
 c1c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 c20:	8f 5f       	subi	r24, 0xFF	; 255
 c22:	8c 9f       	mul	r24, r28
 c24:	91 2d       	mov	r25, r1
 c26:	11 24       	eor	r1, r1
 c28:	92 95       	swap	r25
 c2a:	9f 70       	andi	r25, 0x0F	; 15
 c2c:	24 e1       	ldi	r18, 0x14	; 20
 c2e:	92 9f       	mul	r25, r18
 c30:	80 19       	sub	r24, r0
 c32:	11 24       	eor	r1, r1
 c34:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
//**************  end tx portion ***************
  }//while
 c38:	cc cf       	rjmp	.-104    	; 0xbd2 <main+0x2c>

00000c3a <__divmodhi4>:
 c3a:	97 fb       	bst	r25, 7
 c3c:	07 2e       	mov	r0, r23
 c3e:	16 f4       	brtc	.+4      	; 0xc44 <__divmodhi4+0xa>
 c40:	00 94       	com	r0
 c42:	07 d0       	rcall	.+14     	; 0xc52 <__divmodhi4_neg1>
 c44:	77 fd       	sbrc	r23, 7
 c46:	09 d0       	rcall	.+18     	; 0xc5a <__divmodhi4_neg2>
 c48:	0e 94 50 06 	call	0xca0	; 0xca0 <__udivmodhi4>
 c4c:	07 fc       	sbrc	r0, 7
 c4e:	05 d0       	rcall	.+10     	; 0xc5a <__divmodhi4_neg2>
 c50:	3e f4       	brtc	.+14     	; 0xc60 <__divmodhi4_exit>

00000c52 <__divmodhi4_neg1>:
 c52:	90 95       	com	r25
 c54:	81 95       	neg	r24
 c56:	9f 4f       	sbci	r25, 0xFF	; 255
 c58:	08 95       	ret

00000c5a <__divmodhi4_neg2>:
 c5a:	70 95       	com	r23
 c5c:	61 95       	neg	r22
 c5e:	7f 4f       	sbci	r23, 0xFF	; 255

00000c60 <__divmodhi4_exit>:
 c60:	08 95       	ret

00000c62 <__divmodsi4>:
 c62:	05 2e       	mov	r0, r21
 c64:	97 fb       	bst	r25, 7
 c66:	1e f4       	brtc	.+6      	; 0xc6e <__divmodsi4+0xc>
 c68:	00 94       	com	r0
 c6a:	0e 94 48 06 	call	0xc90	; 0xc90 <__negsi2>
 c6e:	57 fd       	sbrc	r21, 7
 c70:	07 d0       	rcall	.+14     	; 0xc80 <__divmodsi4_neg2>
 c72:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__udivmodsi4>
 c76:	07 fc       	sbrc	r0, 7
 c78:	03 d0       	rcall	.+6      	; 0xc80 <__divmodsi4_neg2>
 c7a:	4e f4       	brtc	.+18     	; 0xc8e <__divmodsi4_exit>
 c7c:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__negsi2>

00000c80 <__divmodsi4_neg2>:
 c80:	50 95       	com	r21
 c82:	40 95       	com	r20
 c84:	30 95       	com	r19
 c86:	21 95       	neg	r18
 c88:	3f 4f       	sbci	r19, 0xFF	; 255
 c8a:	4f 4f       	sbci	r20, 0xFF	; 255
 c8c:	5f 4f       	sbci	r21, 0xFF	; 255

00000c8e <__divmodsi4_exit>:
 c8e:	08 95       	ret

00000c90 <__negsi2>:
 c90:	90 95       	com	r25
 c92:	80 95       	com	r24
 c94:	70 95       	com	r23
 c96:	61 95       	neg	r22
 c98:	7f 4f       	sbci	r23, 0xFF	; 255
 c9a:	8f 4f       	sbci	r24, 0xFF	; 255
 c9c:	9f 4f       	sbci	r25, 0xFF	; 255
 c9e:	08 95       	ret

00000ca0 <__udivmodhi4>:
 ca0:	aa 1b       	sub	r26, r26
 ca2:	bb 1b       	sub	r27, r27
 ca4:	51 e1       	ldi	r21, 0x11	; 17
 ca6:	07 c0       	rjmp	.+14     	; 0xcb6 <__udivmodhi4_ep>

00000ca8 <__udivmodhi4_loop>:
 ca8:	aa 1f       	adc	r26, r26
 caa:	bb 1f       	adc	r27, r27
 cac:	a6 17       	cp	r26, r22
 cae:	b7 07       	cpc	r27, r23
 cb0:	10 f0       	brcs	.+4      	; 0xcb6 <__udivmodhi4_ep>
 cb2:	a6 1b       	sub	r26, r22
 cb4:	b7 0b       	sbc	r27, r23

00000cb6 <__udivmodhi4_ep>:
 cb6:	88 1f       	adc	r24, r24
 cb8:	99 1f       	adc	r25, r25
 cba:	5a 95       	dec	r21
 cbc:	a9 f7       	brne	.-22     	; 0xca8 <__udivmodhi4_loop>
 cbe:	80 95       	com	r24
 cc0:	90 95       	com	r25
 cc2:	bc 01       	movw	r22, r24
 cc4:	cd 01       	movw	r24, r26
 cc6:	08 95       	ret

00000cc8 <__udivmodsi4>:
 cc8:	a1 e2       	ldi	r26, 0x21	; 33
 cca:	1a 2e       	mov	r1, r26
 ccc:	aa 1b       	sub	r26, r26
 cce:	bb 1b       	sub	r27, r27
 cd0:	fd 01       	movw	r30, r26
 cd2:	0d c0       	rjmp	.+26     	; 0xcee <__udivmodsi4_ep>

00000cd4 <__udivmodsi4_loop>:
 cd4:	aa 1f       	adc	r26, r26
 cd6:	bb 1f       	adc	r27, r27
 cd8:	ee 1f       	adc	r30, r30
 cda:	ff 1f       	adc	r31, r31
 cdc:	a2 17       	cp	r26, r18
 cde:	b3 07       	cpc	r27, r19
 ce0:	e4 07       	cpc	r30, r20
 ce2:	f5 07       	cpc	r31, r21
 ce4:	20 f0       	brcs	.+8      	; 0xcee <__udivmodsi4_ep>
 ce6:	a2 1b       	sub	r26, r18
 ce8:	b3 0b       	sbc	r27, r19
 cea:	e4 0b       	sbc	r30, r20
 cec:	f5 0b       	sbc	r31, r21

00000cee <__udivmodsi4_ep>:
 cee:	66 1f       	adc	r22, r22
 cf0:	77 1f       	adc	r23, r23
 cf2:	88 1f       	adc	r24, r24
 cf4:	99 1f       	adc	r25, r25
 cf6:	1a 94       	dec	r1
 cf8:	69 f7       	brne	.-38     	; 0xcd4 <__udivmodsi4_loop>
 cfa:	60 95       	com	r22
 cfc:	70 95       	com	r23
 cfe:	80 95       	com	r24
 d00:	90 95       	com	r25
 d02:	9b 01       	movw	r18, r22
 d04:	ac 01       	movw	r20, r24
 d06:	bd 01       	movw	r22, r26
 d08:	cf 01       	movw	r24, r30
 d0a:	08 95       	ret

00000d0c <__itoa_ncheck>:
 d0c:	bb 27       	eor	r27, r27
 d0e:	4a 30       	cpi	r20, 0x0A	; 10
 d10:	31 f4       	brne	.+12     	; 0xd1e <__itoa_ncheck+0x12>
 d12:	99 23       	and	r25, r25
 d14:	22 f4       	brpl	.+8      	; 0xd1e <__itoa_ncheck+0x12>
 d16:	bd e2       	ldi	r27, 0x2D	; 45
 d18:	90 95       	com	r25
 d1a:	81 95       	neg	r24
 d1c:	9f 4f       	sbci	r25, 0xFF	; 255
 d1e:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__utoa_common>

00000d22 <__utoa_ncheck>:
 d22:	bb 27       	eor	r27, r27

00000d24 <__utoa_common>:
 d24:	fb 01       	movw	r30, r22
 d26:	55 27       	eor	r21, r21
 d28:	aa 27       	eor	r26, r26
 d2a:	88 0f       	add	r24, r24
 d2c:	99 1f       	adc	r25, r25
 d2e:	aa 1f       	adc	r26, r26
 d30:	a4 17       	cp	r26, r20
 d32:	10 f0       	brcs	.+4      	; 0xd38 <__utoa_common+0x14>
 d34:	a4 1b       	sub	r26, r20
 d36:	83 95       	inc	r24
 d38:	50 51       	subi	r21, 0x10	; 16
 d3a:	b9 f7       	brne	.-18     	; 0xd2a <__utoa_common+0x6>
 d3c:	a0 5d       	subi	r26, 0xD0	; 208
 d3e:	aa 33       	cpi	r26, 0x3A	; 58
 d40:	08 f0       	brcs	.+2      	; 0xd44 <__utoa_common+0x20>
 d42:	a9 5d       	subi	r26, 0xD9	; 217
 d44:	a1 93       	st	Z+, r26
 d46:	00 97       	sbiw	r24, 0x00	; 0
 d48:	79 f7       	brne	.-34     	; 0xd28 <__utoa_common+0x4>
 d4a:	b1 11       	cpse	r27, r1
 d4c:	b1 93       	st	Z+, r27
 d4e:	11 92       	st	Z+, r1
 d50:	cb 01       	movw	r24, r22
 d52:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <strrev>

00000d56 <strrev>:
 d56:	dc 01       	movw	r26, r24
 d58:	fc 01       	movw	r30, r24
 d5a:	67 2f       	mov	r22, r23
 d5c:	71 91       	ld	r23, Z+
 d5e:	77 23       	and	r23, r23
 d60:	e1 f7       	brne	.-8      	; 0xd5a <strrev+0x4>
 d62:	32 97       	sbiw	r30, 0x02	; 2
 d64:	04 c0       	rjmp	.+8      	; 0xd6e <strrev+0x18>
 d66:	7c 91       	ld	r23, X
 d68:	6d 93       	st	X+, r22
 d6a:	70 83       	st	Z, r23
 d6c:	62 91       	ld	r22, -Z
 d6e:	ae 17       	cp	r26, r30
 d70:	bf 07       	cpc	r27, r31
 d72:	c8 f3       	brcs	.-14     	; 0xd66 <strrev+0x10>
 d74:	08 95       	ret

00000d76 <_exit>:
 d76:	f8 94       	cli

00000d78 <__stop_program>:
 d78:	ff cf       	rjmp	.-2      	; 0xd78 <__stop_program>
