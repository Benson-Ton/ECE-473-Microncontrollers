
Main_lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00001d36  00001dca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000156  0080015a  0080015a  00001e24  2**0
                  ALLOC
  3 .stab         000049d4  00000000  00000000  00001e24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c60  00000000  00000000  000067f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00008458  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000846c  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  000084a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00008c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00009340  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  0000935a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      20:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      24:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_9>
      28:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      30:	0c 94 12 02 	jmp	0x424	; 0x424 <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      3c:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__vector_15>
      40:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      48:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__vector_18>
      4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      84:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <__vector_33>
      88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      8c:	e3 0b       	sbc	r30, r19
      8e:	ba 0b       	sbc	r27, r26
      90:	ba 0b       	sbc	r27, r26
      92:	ba 0b       	sbc	r27, r26
      94:	ba 0b       	sbc	r27, r26
      96:	ba 0b       	sbc	r27, r26
      98:	ba 0b       	sbc	r27, r26
      9a:	ba 0b       	sbc	r27, r26
      9c:	e3 0b       	sbc	r30, r19
      9e:	ba 0b       	sbc	r27, r26
      a0:	ba 0b       	sbc	r27, r26
      a2:	ba 0b       	sbc	r27, r26
      a4:	ba 0b       	sbc	r27, r26
      a6:	ba 0b       	sbc	r27, r26
      a8:	ba 0b       	sbc	r27, r26
      aa:	ba 0b       	sbc	r27, r26
      ac:	ed 0b       	sbc	r30, r29
      ae:	ba 0b       	sbc	r27, r26
      b0:	ba 0b       	sbc	r27, r26
      b2:	ba 0b       	sbc	r27, r26
      b4:	ba 0b       	sbc	r27, r26
      b6:	ba 0b       	sbc	r27, r26
      b8:	ba 0b       	sbc	r27, r26
      ba:	ba 0b       	sbc	r27, r26
      bc:	ba 0b       	sbc	r27, r26
      be:	ba 0b       	sbc	r27, r26
      c0:	ba 0b       	sbc	r27, r26
      c2:	ba 0b       	sbc	r27, r26
      c4:	ba 0b       	sbc	r27, r26
      c6:	ba 0b       	sbc	r27, r26
      c8:	ba 0b       	sbc	r27, r26
      ca:	ba 0b       	sbc	r27, r26
      cc:	ed 0b       	sbc	r30, r29
      ce:	ba 0b       	sbc	r27, r26
      d0:	ba 0b       	sbc	r27, r26
      d2:	ba 0b       	sbc	r27, r26
      d4:	ba 0b       	sbc	r27, r26
      d6:	ba 0b       	sbc	r27, r26
      d8:	ba 0b       	sbc	r27, r26
      da:	ba 0b       	sbc	r27, r26
      dc:	ba 0b       	sbc	r27, r26
      de:	ba 0b       	sbc	r27, r26
      e0:	ba 0b       	sbc	r27, r26
      e2:	ba 0b       	sbc	r27, r26
      e4:	ba 0b       	sbc	r27, r26
      e6:	ba 0b       	sbc	r27, r26
      e8:	ba 0b       	sbc	r27, r26
      ea:	ba 0b       	sbc	r27, r26
      ec:	04 0c       	add	r0, r4
      ee:	ba 0b       	sbc	r27, r26
      f0:	ba 0b       	sbc	r27, r26
      f2:	ba 0b       	sbc	r27, r26
      f4:	ba 0b       	sbc	r27, r26
      f6:	ba 0b       	sbc	r27, r26
      f8:	ba 0b       	sbc	r27, r26
      fa:	ba 0b       	sbc	r27, r26
      fc:	08 0c       	add	r0, r8
      fe:	ba 0b       	sbc	r27, r26
     100:	ba 0b       	sbc	r27, r26
     102:	ba 0b       	sbc	r27, r26
     104:	ba 0b       	sbc	r27, r26
     106:	ba 0b       	sbc	r27, r26
     108:	ba 0b       	sbc	r27, r26
     10a:	ba 0b       	sbc	r27, r26
     10c:	ba 0b       	sbc	r27, r26
     10e:	ba 0b       	sbc	r27, r26
     110:	ba 0b       	sbc	r27, r26
     112:	ba 0b       	sbc	r27, r26
     114:	ba 0b       	sbc	r27, r26
     116:	ba 0b       	sbc	r27, r26
     118:	ba 0b       	sbc	r27, r26
     11a:	ba 0b       	sbc	r27, r26
     11c:	16 0c       	add	r1, r6
     11e:	ba 0b       	sbc	r27, r26
     120:	ba 0b       	sbc	r27, r26
     122:	ba 0b       	sbc	r27, r26
     124:	ba 0b       	sbc	r27, r26
     126:	ba 0b       	sbc	r27, r26
     128:	ba 0b       	sbc	r27, r26
     12a:	ba 0b       	sbc	r27, r26
     12c:	d4 0b       	sbc	r29, r20

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d0 e1       	ldi	r29, 0x10	; 16
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	e6 e3       	ldi	r30, 0x36	; 54
     142:	fd e1       	ldi	r31, 0x1D	; 29
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	aa 35       	cpi	r26, 0x5A	; 90
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	22 e0       	ldi	r18, 0x02	; 2
     156:	aa e5       	ldi	r26, 0x5A	; 90
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a0 3b       	cpi	r26, 0xB0	; 176
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <main>
     168:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <_exit>

0000016c <__bad_interrupt>:
     16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <chk_buttons>:
// Checks the state of pushbutton S0 It shifts in ones till the button is pushed. 
// Function returns a 1 only once per debounced button push so a debounce and toggle 
// function can be implemented at the same time. Expects active low pushbutton on 
// Port A  bit zero. Debounce time is determined by external loop delay times 12. 
//*******************************************************************************
uint8_t chk_buttons(int button) {
     170:	ac 01       	movw	r20, r24
static uint16_t states[8] = {0}; // an array to store the states of all buttons on the button board

// states[0] corresponds to S1 on the board and states[7] corresponds to S8
states[button] = (states[button]<<1 | (! bit_is_clear(PINA, button)) | 0xE000); //first extract the bit that corresponds to the button
     172:	99 b3       	in	r25, 0x19	; 25
     174:	fa 01       	movw	r30, r20
     176:	ee 0f       	add	r30, r30
     178:	ff 1f       	adc	r31, r31
     17a:	e6 58       	subi	r30, 0x86	; 134
     17c:	fe 4f       	sbci	r31, 0xFE	; 254
     17e:	20 81       	ld	r18, Z
     180:	31 81       	ldd	r19, Z+1	; 0x01
     182:	22 0f       	add	r18, r18
     184:	33 1f       	adc	r19, r19
     186:	30 6e       	ori	r19, 0xE0	; 224
     188:	89 2f       	mov	r24, r25
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	02 c0       	rjmp	.+4      	; 0x192 <chk_buttons+0x22>
     18e:	95 95       	asr	r25
     190:	87 95       	ror	r24
     192:	4a 95       	dec	r20
     194:	e2 f7       	brpl	.-8      	; 0x18e <chk_buttons+0x1e>
     196:	81 70       	andi	r24, 0x01	; 1
     198:	99 27       	eor	r25, r25
     19a:	28 2b       	or	r18, r24
     19c:	39 2b       	or	r19, r25
     19e:	31 83       	std	Z+1, r19	; 0x01
     1a0:	20 83       	st	Z, r18
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	21 15       	cp	r18, r1
     1a6:	30 4f       	sbci	r19, 0xF0	; 240
     1a8:	09 f0       	breq	.+2      	; 0x1ac <chk_buttons+0x3c>
     1aa:	80 e0       	ldi	r24, 0x00	; 0
//Check if button is pressed
if (states[button] == 0xF000) {return TRUE;} 
return FALSE;
}
     1ac:	08 95       	ret

000001ae <process_EN>:
 *
 * once the state machine completes all 4 cycles then it means the knob has been shifted once
 * encoder function for the left and right knobs 
 * Handles all cases of any rotation of the encoders
 **********************************************************************/
int process_EN(void){
     1ae:	cf 93       	push	r28
//Breaking up the raw data from the encoder into a and b pins

uint8_t new_A = ((raw_encoder_val & 0x01) ==0) ? 0:1;
     1b0:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <raw_encoder_val>
     1b4:	91 70       	andi	r25, 0x01	; 1
uint8_t new_B = ((raw_encoder_val & 0x02) ==0) ? 0:1;
     1b6:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <raw_encoder_val>
     1ba:	41 e0       	ldi	r20, 0x01	; 1
     1bc:	c8 2f       	mov	r28, r24
     1be:	c2 70       	andi	r28, 0x02	; 2
     1c0:	81 ff       	sbrs	r24, 1
     1c2:	40 e0       	ldi	r20, 0x00	; 0

//process the right encoder
uint8_t new_C = ((raw_encoder_val & 0x04) ==0) ? 0:1;
     1c4:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <raw_encoder_val>
     1c8:	84 70       	andi	r24, 0x04	; 4
uint8_t new_D = ((raw_encoder_val & 0x08) ==0) ? 0:1;
     1ca:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <raw_encoder_val>
     1ce:	31 e0       	ldi	r19, 0x01	; 1
     1d0:	52 2f       	mov	r21, r18
     1d2:	58 70       	andi	r21, 0x08	; 8
     1d4:	23 ff       	sbrs	r18, 3
     1d6:	30 e0       	ldi	r19, 0x00	; 0
int en_val = 0;

en_val = -1; // default return value , no change

// process the right encoder inputs and determine the position movement
if (( new_C != old_C ) || ( new_D != old_D )){ // if change occurred
     1d8:	e1 e0       	ldi	r30, 0x01	; 1
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	81 11       	cpse	r24, r1
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <process_EN+0x36>
     1e0:	e0 e0       	ldi	r30, 0x00	; 0
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <old_C>
     1e8:	70 91 95 01 	lds	r23, 0x0195	; 0x800195 <old_C+0x1>
     1ec:	23 2f       	mov	r18, r19
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	e6 17       	cp	r30, r22
     1f2:	f7 07       	cpc	r31, r23
     1f4:	09 f4       	brne	.+2      	; 0x1f8 <process_EN+0x4a>
     1f6:	72 c0       	rjmp	.+228    	; 0x2dc <process_EN+0x12e>

if (( new_C == 0) && ( new_D == 0)) { // once the state has been moved either right or left from current state
	if ( old_C == 1){ r_counter++;}
     1f8:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <old_C>
     1fc:	70 91 95 01 	lds	r23, 0x0195	; 0x800195 <old_C+0x1>
en_val = -1; // default return value , no change

// process the right encoder inputs and determine the position movement
if (( new_C != old_C ) || ( new_D != old_D )){ // if change occurred

if (( new_C == 0) && ( new_D == 0)) { // once the state has been moved either right or left from current state
     200:	81 11       	cpse	r24, r1
     202:	11 c0       	rjmp	.+34     	; 0x226 <process_EN+0x78>
     204:	55 23       	and	r21, r21
     206:	89 f0       	breq	.+34     	; 0x22a <process_EN+0x7c>
	if ( old_C == 1){ r_counter++;}
	else { r_counter--;}
}
else if (( new_C == 0) && ( new_D == 1)) { // update state if it has been moved from position from left to right 
	if ( old_C == 0){ r_counter++;}
     208:	67 2b       	or	r22, r23
     20a:	91 f4       	brne	.+36     	; 0x230 <process_EN+0x82>

// process the right encoder inputs and determine the position movement
if (( new_C != old_C ) || ( new_D != old_D )){ // if change occurred

if (( new_C == 0) && ( new_D == 0)) { // once the state has been moved either right or left from current state
	if ( old_C == 1){ r_counter++;}
     20c:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <__data_end>
     210:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <__data_end+0x1>
     214:	6f 5f       	subi	r22, 0xFF	; 255
     216:	7f 4f       	sbci	r23, 0xFF	; 255
     218:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <__data_end+0x1>
     21c:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <__data_end>
uint8_t new_C = ((raw_encoder_val & 0x04) ==0) ? 0:1;
uint8_t new_D = ((raw_encoder_val & 0x08) ==0) ? 0:1;

int en_val = 0;

en_val = -1; // default return value , no change
     220:	af ef       	ldi	r26, 0xFF	; 255
     222:	bf ef       	ldi	r27, 0xFF	; 255
     224:	11 c0       	rjmp	.+34     	; 0x248 <process_EN+0x9a>
else if (( new_C == 0) && ( new_D == 1)) { // update state if it has been moved from position from left to right 
	if ( old_C == 0){ r_counter++;}
	else { r_counter--;}
}

else if (( new_C == 1) && ( new_D == 1)) {// detent position
     226:	51 11       	cpse	r21, r1
     228:	71 c0       	rjmp	.+226    	; 0x30c <process_EN+0x15e>

// process the right encoder inputs and determine the position movement
if (( new_C != old_C ) || ( new_D != old_D )){ // if change occurred

if (( new_C == 0) && ( new_D == 0)) { // once the state has been moved either right or left from current state
	if ( old_C == 1){ r_counter++;}
     22a:	61 30       	cpi	r22, 0x01	; 1
     22c:	71 05       	cpc	r23, r1
     22e:	71 f3       	breq	.-36     	; 0x20c <process_EN+0x5e>
	else { r_counter--;}
     230:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <__data_end>
     234:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <__data_end+0x1>
     238:	61 50       	subi	r22, 0x01	; 1
     23a:	71 09       	sbc	r23, r1
     23c:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <__data_end+0x1>
     240:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <__data_end>
uint8_t new_C = ((raw_encoder_val & 0x04) ==0) ? 0:1;
uint8_t new_D = ((raw_encoder_val & 0x08) ==0) ? 0:1;

int en_val = 0;

en_val = -1; // default return value , no change
     244:	af ef       	ldi	r26, 0xFF	; 255
     246:	bf ef       	ldi	r27, 0xFF	; 255
}
else if (( new_C == 1) && ( new_D == 0)) {
	if ( old_C == 1) { r_counter++;}
	else { r_counter--;}
}
	old_C = new_C ; // save what are now old values
     248:	f0 93 95 01 	sts	0x0195, r31	; 0x800195 <old_C+0x1>
     24c:	e0 93 94 01 	sts	0x0194, r30	; 0x800194 <old_C>
	old_D = new_D ;
     250:	30 93 ab 01 	sts	0x01AB, r19	; 0x8001ab <old_D+0x1>
     254:	20 93 aa 01 	sts	0x01AA, r18	; 0x8001aa <old_D>

	} // if change occurred


// process the left encoder inputs and determine the position movement
if (( new_A != old_A ) || ( new_B != old_B )){ // if change occurred
     258:	29 2f       	mov	r18, r25
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <old_A>
     260:	70 91 90 01 	lds	r23, 0x0190	; 0x800190 <old_A+0x1>
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	26 17       	cp	r18, r22
     268:	37 07       	cpc	r19, r23
     26a:	81 f1       	breq	.+96     	; 0x2cc <process_EN+0x11e>

if (( new_A == 0) && ( new_B == 0)) { // once the state has been moved either right or left from current state
     26c:	99 23       	and	r25, r25
     26e:	e1 f0       	breq	.+56     	; 0x2a8 <process_EN+0xfa>
	else { state_counter--;}
}

else if (( new_A == 1) && ( new_B == 1)) {// detent position
	
	if ( old_A == 0){ if( state_counter == 3){ en_val =0;}} // one direction. Increment 
     270:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <old_A>
     274:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <old_A+0x1>
else if (( new_A == 0) && ( new_B == 1)) { // update state if it has been moved from position from left to right 
	if ( old_A == 0){ state_counter++;}
	else { state_counter--;}
}

else if (( new_A == 1) && ( new_B == 1)) {// detent position
     278:	c1 11       	cpse	r28, r1
     27a:	3b c0       	rjmp	.+118    	; 0x2f2 <process_EN+0x144>
	else {if( state_counter == -3){ en_val =1;}} // or the other. Decrement
	
	state_counter = 0; // count is always reset in detent position
}
else if (( new_A == 1) && ( new_B == 0)) {
	if ( old_A == 1) { state_counter++;}
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	e1 f0       	breq	.+56     	; 0x2b8 <process_EN+0x10a>
	else { state_counter--;}
     280:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <state_counter>
     284:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <state_counter+0x1>
     288:	01 97       	sbiw	r24, 0x01	; 1
     28a:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <state_counter+0x1>
     28e:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <state_counter>
}
	old_A = new_A ; // save what are now old values
     292:	30 93 90 01 	sts	0x0190, r19	; 0x800190 <old_A+0x1>
     296:	20 93 8f 01 	sts	0x018F, r18	; 0x80018f <old_A>
	old_B = new_B ;
     29a:	50 93 92 01 	sts	0x0192, r21	; 0x800192 <old_B+0x1>
     29e:	40 93 91 01 	sts	0x0191, r20	; 0x800191 <old_B>
	} // if change occurred


return ( en_val ); // return encoder state

}
     2a2:	cd 01       	movw	r24, r26
     2a4:	cf 91       	pop	r28
     2a6:	08 95       	ret

// process the left encoder inputs and determine the position movement
if (( new_A != old_A ) || ( new_B != old_B )){ // if change occurred

if (( new_A == 0) && ( new_B == 0)) { // once the state has been moved either right or left from current state
	if ( old_A == 1){ state_counter++;}
     2a8:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <old_A>
     2ac:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <old_A+0x1>


// process the left encoder inputs and determine the position movement
if (( new_A != old_A ) || ( new_B != old_B )){ // if change occurred

if (( new_A == 0) && ( new_B == 0)) { // once the state has been moved either right or left from current state
     2b0:	cc 23       	and	r28, r28
     2b2:	21 f3       	breq	.-56     	; 0x27c <process_EN+0xce>
	if ( old_A == 1){ state_counter++;}
	else { state_counter--;}
}
else if (( new_A == 0) && ( new_B == 1)) { // update state if it has been moved from position from left to right 
	if ( old_A == 0){ state_counter++;}
     2b4:	89 2b       	or	r24, r25
     2b6:	21 f7       	brne	.-56     	; 0x280 <process_EN+0xd2>
	else {if( state_counter == -3){ en_val =1;}} // or the other. Decrement
	
	state_counter = 0; // count is always reset in detent position
}
else if (( new_A == 1) && ( new_B == 0)) {
	if ( old_A == 1) { state_counter++;}
     2b8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <state_counter>
     2bc:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <state_counter+0x1>
     2c0:	01 96       	adiw	r24, 0x01	; 1
     2c2:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <state_counter+0x1>
     2c6:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <state_counter>
     2ca:	e3 cf       	rjmp	.-58     	; 0x292 <process_EN+0xe4>

	} // if change occurred


// process the left encoder inputs and determine the position movement
if (( new_A != old_A ) || ( new_B != old_B )){ // if change occurred
     2cc:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <old_B>
     2d0:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <old_B+0x1>
     2d4:	46 17       	cp	r20, r22
     2d6:	57 07       	cpc	r21, r23
     2d8:	49 f6       	brne	.-110    	; 0x26c <process_EN+0xbe>
     2da:	e3 cf       	rjmp	.-58     	; 0x2a2 <process_EN+0xf4>
int en_val = 0;

en_val = -1; // default return value , no change

// process the right encoder inputs and determine the position movement
if (( new_C != old_C ) || ( new_D != old_D )){ // if change occurred
     2dc:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <old_D>
     2e0:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <old_D+0x1>
     2e4:	26 17       	cp	r18, r22
     2e6:	37 07       	cpc	r19, r23
     2e8:	09 f0       	breq	.+2      	; 0x2ec <process_EN+0x13e>
     2ea:	86 cf       	rjmp	.-244    	; 0x1f8 <process_EN+0x4a>
uint8_t new_C = ((raw_encoder_val & 0x04) ==0) ? 0:1;
uint8_t new_D = ((raw_encoder_val & 0x08) ==0) ? 0:1;

int en_val = 0;

en_val = -1; // default return value , no change
     2ec:	af ef       	ldi	r26, 0xFF	; 255
     2ee:	bf ef       	ldi	r27, 0xFF	; 255
     2f0:	b3 cf       	rjmp	.-154    	; 0x258 <process_EN+0xaa>
	else { state_counter--;}
}

else if (( new_A == 1) && ( new_B == 1)) {// detent position
	
	if ( old_A == 0){ if( state_counter == 3){ en_val =0;}} // one direction. Increment 
     2f2:	89 2b       	or	r24, r25
     2f4:	d9 f4       	brne	.+54     	; 0x32c <process_EN+0x17e>
     2f6:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <state_counter>
     2fa:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <state_counter+0x1>
     2fe:	03 97       	sbiw	r24, 0x03	; 3
     300:	41 f1       	breq	.+80     	; 0x352 <process_EN+0x1a4>

	else {if( state_counter == -3){ en_val =1;}} // or the other. Decrement
	
	state_counter = 0; // count is always reset in detent position
     302:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <state_counter+0x1>
     306:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <state_counter>
     30a:	c3 cf       	rjmp	.-122    	; 0x292 <process_EN+0xe4>
	else { r_counter--;}
}

else if (( new_C == 1) && ( new_D == 1)) {// detent position
	
	if ( old_C == 0){ if( r_counter == 3){ en_val =2;}} // one direction. Increment 
     30c:	67 2b       	or	r22, r23
     30e:	b9 f4       	brne	.+46     	; 0x33e <process_EN+0x190>
     310:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <__data_end>
     314:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <__data_end+0x1>
     318:	63 30       	cpi	r22, 0x03	; 3
     31a:	71 05       	cpc	r23, r1
     31c:	e9 f0       	breq	.+58     	; 0x358 <process_EN+0x1aa>
uint8_t new_C = ((raw_encoder_val & 0x04) ==0) ? 0:1;
uint8_t new_D = ((raw_encoder_val & 0x08) ==0) ? 0:1;

int en_val = 0;

en_val = -1; // default return value , no change
     31e:	af ef       	ldi	r26, 0xFF	; 255
     320:	bf ef       	ldi	r27, 0xFF	; 255
	
	if ( old_C == 0){ if( r_counter == 3){ en_val =2;}} // one direction. Increment 

	else {if( r_counter == -3){ en_val =3;}} // or the other. Decrement
	
	r_counter = 0; // count is always reset in detent position
     322:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <__data_end+0x1>
     326:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <__data_end>
     32a:	8e cf       	rjmp	.-228    	; 0x248 <process_EN+0x9a>

else if (( new_A == 1) && ( new_B == 1)) {// detent position
	
	if ( old_A == 0){ if( state_counter == 3){ en_val =0;}} // one direction. Increment 

	else {if( state_counter == -3){ en_val =1;}} // or the other. Decrement
     32c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <state_counter>
     330:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <state_counter+0x1>
     334:	03 96       	adiw	r24, 0x03	; 3
     336:	29 f7       	brne	.-54     	; 0x302 <process_EN+0x154>
     338:	a1 e0       	ldi	r26, 0x01	; 1
     33a:	b0 e0       	ldi	r27, 0x00	; 0
     33c:	e2 cf       	rjmp	.-60     	; 0x302 <process_EN+0x154>

else if (( new_C == 1) && ( new_D == 1)) {// detent position
	
	if ( old_C == 0){ if( r_counter == 3){ en_val =2;}} // one direction. Increment 

	else {if( r_counter == -3){ en_val =3;}} // or the other. Decrement
     33e:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <__data_end>
     342:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <__data_end+0x1>
     346:	6d 3f       	cpi	r22, 0xFD	; 253
     348:	7f 4f       	sbci	r23, 0xFF	; 255
     34a:	49 f7       	brne	.-46     	; 0x31e <process_EN+0x170>
     34c:	a3 e0       	ldi	r26, 0x03	; 3
     34e:	b0 e0       	ldi	r27, 0x00	; 0
     350:	e8 cf       	rjmp	.-48     	; 0x322 <process_EN+0x174>
	else { state_counter--;}
}

else if (( new_A == 1) && ( new_B == 1)) {// detent position
	
	if ( old_A == 0){ if( state_counter == 3){ en_val =0;}} // one direction. Increment 
     352:	a0 e0       	ldi	r26, 0x00	; 0
     354:	b0 e0       	ldi	r27, 0x00	; 0
     356:	d5 cf       	rjmp	.-86     	; 0x302 <process_EN+0x154>
	else { r_counter--;}
}

else if (( new_C == 1) && ( new_D == 1)) {// detent position
	
	if ( old_C == 0){ if( r_counter == 3){ en_val =2;}} // one direction. Increment 
     358:	a2 e0       	ldi	r26, 0x02	; 2
     35a:	b0 e0       	ldi	r27, 0x00	; 0
     35c:	e2 cf       	rjmp	.-60     	; 0x322 <process_EN+0x174>

0000035e <update_EN>:
 *				update_encoder
 ********************************************************************/

void update_EN(int val_rot){
//changes the real time without affecting alarm time
	if(val_rot == 1){ time += (100*incr_time);} //if rotating to the right for left encoder then increment 
     35e:	81 30       	cpi	r24, 0x01	; 1
     360:	91 05       	cpc	r25, r1
     362:	61 f1       	breq	.+88     	; 0x3bc <update_EN+0x5e>
	else if(val_rot ==0){time -= (100*incr_time);}//if rotating to the left for left encoder then decrement
     364:	00 97       	sbiw	r24, 0x00	; 0
     366:	31 f0       	breq	.+12     	; 0x374 <update_EN+0x16>
	else if(val_rot == 2){time -= incr_time;} // if rotating to the left for right encoder then decrement
     368:	82 30       	cpi	r24, 0x02	; 2
     36a:	91 05       	cpc	r25, r1
     36c:	e1 f1       	breq	.+120    	; 0x3e6 <update_EN+0x88>
	else if(val_rot == 3){time += incr_time;}// if rotatiing to the right for right encoder then increment
     36e:	03 97       	sbiw	r24, 0x03	; 3
     370:	b1 f0       	breq	.+44     	; 0x39e <update_EN+0x40>
     372:	08 95       	ret
 ********************************************************************/

void update_EN(int val_rot){
//changes the real time without affecting alarm time
	if(val_rot == 1){ time += (100*incr_time);} //if rotating to the right for left encoder then increment 
	else if(val_rot ==0){time -= (100*incr_time);}//if rotating to the left for left encoder then decrement
     374:	40 91 64 01 	lds	r20, 0x0164	; 0x800164 <incr_time>
     378:	50 91 65 01 	lds	r21, 0x0165	; 0x800165 <incr_time+0x1>
     37c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     380:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     384:	64 e6       	ldi	r22, 0x64	; 100
     386:	64 9f       	mul	r22, r20
     388:	90 01       	movw	r18, r0
     38a:	65 9f       	mul	r22, r21
     38c:	30 0d       	add	r19, r0
     38e:	11 24       	eor	r1, r1
     390:	82 1b       	sub	r24, r18
     392:	93 0b       	sbc	r25, r19
     394:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     398:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
     39c:	08 95       	ret
	else if(val_rot == 2){time -= incr_time;} // if rotating to the left for right encoder then decrement
	else if(val_rot == 3){time += incr_time;}// if rotatiing to the right for right encoder then increment
     39e:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <incr_time>
     3a2:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <incr_time+0x1>
     3a6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     3aa:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     3ae:	82 0f       	add	r24, r18
     3b0:	93 1f       	adc	r25, r19
     3b2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     3b6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
     3ba:	08 95       	ret
 *				update_encoder
 ********************************************************************/

void update_EN(int val_rot){
//changes the real time without affecting alarm time
	if(val_rot == 1){ time += (100*incr_time);} //if rotating to the right for left encoder then increment 
     3bc:	40 91 64 01 	lds	r20, 0x0164	; 0x800164 <incr_time>
     3c0:	50 91 65 01 	lds	r21, 0x0165	; 0x800165 <incr_time+0x1>
     3c4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     3c8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     3cc:	64 e6       	ldi	r22, 0x64	; 100
     3ce:	64 9f       	mul	r22, r20
     3d0:	90 01       	movw	r18, r0
     3d2:	65 9f       	mul	r22, r21
     3d4:	30 0d       	add	r19, r0
     3d6:	11 24       	eor	r1, r1
     3d8:	82 0f       	add	r24, r18
     3da:	93 1f       	adc	r25, r19
     3dc:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     3e0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
     3e4:	08 95       	ret
	else if(val_rot ==0){time -= (100*incr_time);}//if rotating to the left for left encoder then decrement
	else if(val_rot == 2){time -= incr_time;} // if rotating to the left for right encoder then decrement
     3e6:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <incr_time>
     3ea:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <incr_time+0x1>
     3ee:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     3f2:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     3f6:	82 1b       	sub	r24, r18
     3f8:	93 0b       	sbc	r25, r19
     3fa:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     3fe:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
     402:	08 95       	ret

00000404 <read_SPI>:
 *				read_SPI
 ********************************************************************/
void read_SPI(void){

//shift clock register
PORTE &= ~(1 << PE6);//falling edge
     404:	1e 98       	cbi	0x03, 6	; 3
PORTE |= (1 << PE6); //rising edge
     406:	1e 9a       	sbi	0x03, 6	; 3
SPDR = 0x20; //send junk data to read in from SPI
     408:	80 e2       	ldi	r24, 0x20	; 32
     40a:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){} // read data in
     40c:	77 9b       	sbis	0x0e, 7	; 14
     40e:	fe cf       	rjmp	.-4      	; 0x40c <read_SPI+0x8>
raw_encoder_val = SPDR;//save the data
     410:	8f b1       	in	r24, 0x0f	; 15
     412:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <raw_encoder_val>
     416:	08 95       	ret

00000418 <write_SPI>:
/********************************************************************
 *				write_SPI
 ********************************************************************/
void write_SPI(uint8_t value){

SPDR = value; // take in which mode it is currently on and display it 
     418:	8f b9       	out	0x0f, r24	; 15
	while (bit_is_clear(SPSR,SPIF)) {} //wait till data is sent out
     41a:	77 9b       	sbis	0x0e, 7	; 14
     41c:	fe cf       	rjmp	.-4      	; 0x41a <write_SPI+0x2>
PORTD |= (1 << PD2); //SEND data to bargraph, rising edge
     41e:	92 9a       	sbi	0x12, 2	; 18
PORTD &= ~(1<<PD2); // falling edge
     420:	92 98       	cbi	0x12, 2	; 18
     422:	08 95       	ret

00000424 <__vector_12>:
}


//oscilator tone
ISR(TIMER1_COMPA_vect){
     424:	1f 92       	push	r1
     426:	0f 92       	push	r0
     428:	0f b6       	in	r0, 0x3f	; 63
     42a:	0f 92       	push	r0
     42c:	11 24       	eor	r1, r1
     42e:	8f 93       	push	r24
     430:	9f 93       	push	r25


	DDRE |= 1 << PE3; // PE1 will output for volume
     432:	13 9a       	sbi	0x02, 3	; 2
	PORTC ^= 1 << PC0; // PC0 will toggle tone
     434:	95 b3       	in	r25, 0x15	; 21
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	89 27       	eor	r24, r25
     43a:	85 bb       	out	0x15, r24	; 21
}
     43c:	9f 91       	pop	r25
     43e:	8f 91       	pop	r24
     440:	0f 90       	pop	r0
     442:	0f be       	out	0x3f, r0	; 63
     444:	0f 90       	pop	r0
     446:	1f 90       	pop	r1
     448:	18 95       	reti

0000044a <__vector_9>:


//dimming for LED display 
ISR( TIMER2_COMP_vect){
     44a:	1f 92       	push	r1
     44c:	0f 92       	push	r0
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	0f 92       	push	r0
     452:	11 24       	eor	r1, r1
     454:	8f 93       	push	r24
	
//	if(adc_data > 70){OCR2 = 10;} // dim the light if it is bright
//	else{OCR2 = 200;} // brighten the light otherwise
	OCR2 = adc_data;
     456:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <adc_data>
     45a:	83 bd       	out	0x23, r24	; 35
}
     45c:	8f 91       	pop	r24
     45e:	0f 90       	pop	r0
     460:	0f be       	out	0x3f, r0	; 63
     462:	0f 90       	pop	r0
     464:	1f 90       	pop	r1
     466:	18 95       	reti

00000468 <disable_alarm>:
/********************************************************************
 *				disable_alarm
 *******************************************************************/
void disable_alarm(void){

		alarm = FALSE;	//alarm is off
     468:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <alarm+0x1>
     46c:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <alarm>
		dp = FALSE;	//turn off the decimal point
     470:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <dp+0x1>
     474:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <dp>
		tone = FALSE;	//turn off the tone
     478:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <tone+0x1>
     47c:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <tone>
		snooze_time = FALSE; //disable snooze
     480:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <snooze_time+0x1>
     484:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <snooze_time>
		int a = strlen(alarm_str);//get the length of the alarm string
     488:	e8 e3       	ldi	r30, 0x38	; 56
     48a:	f1 e0       	ldi	r31, 0x01	; 1
     48c:	01 90       	ld	r0, Z+
     48e:	00 20       	and	r0, r0
     490:	e9 f7       	brne	.-6      	; 0x48c <disable_alarm+0x24>
     492:	31 97       	sbiw	r30, 0x01	; 1
     494:	af 01       	movw	r20, r30
     496:	48 53       	subi	r20, 0x38	; 56
     498:	51 40       	sbci	r21, 0x01	; 1
		//clear alarm string
		for(i = 0; i < a; i++ ){
     49a:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <i+0x1>
     49e:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <i>
     4a2:	41 15       	cp	r20, r1
     4a4:	51 05       	cpc	r21, r1
     4a6:	71 f0       	breq	.+28     	; 0x4c4 <disable_alarm+0x5c>
     4a8:	e3 e2       	ldi	r30, 0x23	; 35
     4aa:	f1 e0       	ldi	r31, 0x01	; 1
     4ac:	9a 01       	movw	r18, r20
     4ae:	2d 5d       	subi	r18, 0xDD	; 221
     4b0:	3e 4f       	sbci	r19, 0xFE	; 254
			lcd_temp_array[11 + i] = ' ';
     4b2:	80 e2       	ldi	r24, 0x20	; 32
     4b4:	81 93       	st	Z+, r24
		dp = FALSE;	//turn off the decimal point
		tone = FALSE;	//turn off the tone
		snooze_time = FALSE; //disable snooze
		int a = strlen(alarm_str);//get the length of the alarm string
		//clear alarm string
		for(i = 0; i < a; i++ ){
     4b6:	e2 17       	cp	r30, r18
     4b8:	f3 07       	cpc	r31, r19
     4ba:	e1 f7       	brne	.-8      	; 0x4b4 <disable_alarm+0x4c>
     4bc:	50 93 a9 01 	sts	0x01A9, r21	; 0x8001a9 <i+0x1>
     4c0:	40 93 a8 01 	sts	0x01A8, r20	; 0x8001a8 <i>
			lcd_temp_array[11 + i] = ' ';
		}
//		clear_display(); //clear lcd screen
		refresh_lcd(lcd_temp_array);
     4c4:	88 e1       	ldi	r24, 0x18	; 24
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <refresh_lcd>
		OCR3A = 0;	// clear the compare
     4cc:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     4d0:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		TCCR1B &= ~(1 << CS10);	//clear the clock
     4d4:	8e b5       	in	r24, 0x2e	; 46
     4d6:	8e 7f       	andi	r24, 0xFE	; 254
     4d8:	8e bd       	out	0x2e, r24	; 46
		mode &= ~(1 << 5); // set conditions only once so clear the bit
     4da:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <mode>
     4de:	8f 7d       	andi	r24, 0xDF	; 223
     4e0:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <mode>
}
     4e4:	08 95       	ret

000004e6 <alarm_compare>:

/********************************************************************
 *				alarm_compare
 *******************************************************************/
void alarm_compare(void){
	if(( mode != 0x08 && mode != 0x40)){
     4e6:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <mode>
     4ea:	88 30       	cpi	r24, 0x08	; 8
     4ec:	79 f0       	breq	.+30     	; 0x50c <alarm_compare+0x26>
     4ee:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <mode>
     4f2:	80 34       	cpi	r24, 0x40	; 64
     4f4:	59 f0       	breq	.+22     	; 0x50c <alarm_compare+0x26>
		
		if((alarm_time == time) && (tone == TRUE)){
     4f6:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <alarm_time>
     4fa:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <alarm_time+0x1>
     4fe:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     502:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     506:	28 17       	cp	r18, r24
     508:	39 07       	cpc	r19, r25
     50a:	09 f0       	breq	.+2      	; 0x50e <alarm_compare+0x28>
     50c:	08 95       	ret
     50e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <tone>
     512:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <tone+0x1>
     516:	01 97       	sbiw	r24, 0x01	; 1
     518:	c9 f7       	brne	.-14     	; 0x50c <alarm_compare+0x26>
		OCR3A = 5; 
     51a:	85 e0       	ldi	r24, 0x05	; 5
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     522:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		TCCR1B |= 1 << CS10;
     526:	8e b5       	in	r24, 0x2e	; 46
     528:	81 60       	ori	r24, 0x01	; 1
     52a:	8e bd       	out	0x2e, r24	; 46
     52c:	08 95       	ret

0000052e <alarm_bound_24>:
     52e:	08 95       	ret

00000530 <alarm_bound_12>:
 *				alarm_bound_12
 * used to bound the alarm with respect to the time setting when setting
 * the alarm with the encoders.
 ********************************************************************/
void alarm_bound_12(void){
int hours = alarm_time/100;  // convert integer time into hours
     530:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <alarm_time>
     534:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <alarm_time+0x1>
     538:	64 e6       	ldi	r22, 0x64	; 100
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divmodhi4>
int minutes = alarm_time - (hours*100); // convert the integer time into minutes
     540:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <alarm_time>
     544:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <alarm_time+0x1>
     548:	4c e9       	ldi	r20, 0x9C	; 156
     54a:	46 03       	mulsu	r20, r22
     54c:	90 01       	movw	r18, r0
     54e:	47 9f       	mul	r20, r23
     550:	30 0d       	add	r19, r0
     552:	11 24       	eor	r1, r1
     554:	82 0f       	add	r24, r18
     556:	93 1f       	adc	r25, r19

if(minutes == 99){alarm_time -= 40;alarm_time+=100;} // decrement hours; ex (200 -> 159)
     558:	83 36       	cpi	r24, 0x63	; 99
     55a:	91 05       	cpc	r25, r1
     55c:	09 f4       	brne	.+2      	; 0x560 <alarm_bound_12+0x30>
     55e:	40 c0       	rjmp	.+128    	; 0x5e0 <alarm_bound_12+0xb0>

//bound the minutes from 0 to 60
if (minutes == 60){
     560:	8c 33       	cpi	r24, 0x3C	; 60
     562:	91 05       	cpc	r25, r1
     564:	41 f1       	breq	.+80     	; 0x5b6 <alarm_bound_12+0x86>
}


// bound the minutes from 60 to 0
//bound the hours from 12 to 1 and 1 to 12
if(hours > 12){alarm_time = 100;alarm_time += minutes;}
     566:	6d 30       	cpi	r22, 0x0D	; 13
     568:	71 05       	cpc	r23, r1
     56a:	8c f0       	brlt	.+34     	; 0x58e <alarm_bound_12+0x5e>
     56c:	24 e6       	ldi	r18, 0x64	; 100
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <alarm_time+0x1>
     574:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <alarm_time>
     578:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <alarm_time>
     57c:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <alarm_time+0x1>
     580:	82 0f       	add	r24, r18
     582:	93 1f       	adc	r25, r19
     584:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <alarm_time+0x1>
     588:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <alarm_time>
     58c:	08 95       	ret
if(hours < 1){alarm_time = 1200;alarm_time += minutes;}
     58e:	16 16       	cp	r1, r22
     590:	17 06       	cpc	r1, r23
     592:	84 f0       	brlt	.+32     	; 0x5b4 <alarm_bound_12+0x84>
     594:	20 eb       	ldi	r18, 0xB0	; 176
     596:	34 e0       	ldi	r19, 0x04	; 4
     598:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <alarm_time+0x1>
     59c:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <alarm_time>
     5a0:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <alarm_time>
     5a4:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <alarm_time+0x1>
     5a8:	82 0f       	add	r24, r18
     5aa:	93 1f       	adc	r25, r19
     5ac:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <alarm_time+0x1>
     5b0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <alarm_time>
     5b4:	08 95       	ret

if(minutes == 99){alarm_time -= 40;alarm_time+=100;} // decrement hours; ex (200 -> 159)

//bound the minutes from 0 to 60
if (minutes == 60){
	  alarm_time += 40;
     5b6:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <alarm_time>
     5ba:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <alarm_time+0x1>
     5be:	28 5d       	subi	r18, 0xD8	; 216
     5c0:	3f 4f       	sbci	r19, 0xFF	; 255
     5c2:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <alarm_time+0x1>
     5c6:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <alarm_time>
	  alarm_time -= 100;
     5ca:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <alarm_time>
     5ce:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <alarm_time+0x1>
     5d2:	24 56       	subi	r18, 0x64	; 100
     5d4:	31 09       	sbc	r19, r1
     5d6:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <alarm_time+0x1>
     5da:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <alarm_time>
     5de:	c3 cf       	rjmp	.-122    	; 0x566 <alarm_bound_12+0x36>
 ********************************************************************/
void alarm_bound_12(void){
int hours = alarm_time/100;  // convert integer time into hours
int minutes = alarm_time - (hours*100); // convert the integer time into minutes

if(minutes == 99){alarm_time -= 40;alarm_time+=100;} // decrement hours; ex (200 -> 159)
     5e0:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <alarm_time>
     5e4:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <alarm_time+0x1>
     5e8:	28 52       	subi	r18, 0x28	; 40
     5ea:	31 09       	sbc	r19, r1
     5ec:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <alarm_time+0x1>
     5f0:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <alarm_time>
     5f4:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <alarm_time>
     5f8:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <alarm_time+0x1>
     5fc:	2c 59       	subi	r18, 0x9C	; 156
     5fe:	3f 4f       	sbci	r19, 0xFF	; 255
     600:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <alarm_time+0x1>
     604:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <alarm_time>
     608:	ae cf       	rjmp	.-164    	; 0x566 <alarm_bound_12+0x36>

0000060a <time_bound_24>:
/********************************************************************
 *				time_bound_24
 * used to bound the correct time when wanting to change the real time 
 * with encoders
 ********************************************************************/
void time_bound_24(void){
     60a:	08 95       	ret

0000060c <time_bound_12>:
 *				time_bound_12
 * used to bound the correct time when wanting to change the real time 
 * with encoders
 ********************************************************************/
void time_bound_12(void){
int hours = time/100;  // convert integer time into hours
     60c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     610:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     614:	64 e6       	ldi	r22, 0x64	; 100
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divmodhi4>
int minutes = time - (hours*100); // convert the integer time into minutes
     61c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     620:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     624:	4c e9       	ldi	r20, 0x9C	; 156
     626:	46 03       	mulsu	r20, r22
     628:	90 01       	movw	r18, r0
     62a:	47 9f       	mul	r20, r23
     62c:	30 0d       	add	r19, r0
     62e:	11 24       	eor	r1, r1
     630:	82 0f       	add	r24, r18
     632:	93 1f       	adc	r25, r19

if(minutes == 99){
     634:	83 36       	cpi	r24, 0x63	; 99
     636:	91 05       	cpc	r25, r1
     638:	09 f4       	brne	.+2      	; 0x63c <time_bound_12+0x30>
     63a:	40 c0       	rjmp	.+128    	; 0x6bc <time_bound_12+0xb0>
	time -= 40;
	if(time == 59){time +=1200;} //FIX THE 100 TO 1259 BUG
	else{time+=100;}
} // decrement hours; ex (200 -> 159)
//bound the minutes from 0 to 60
if (minutes == 60){
     63c:	8c 33       	cpi	r24, 0x3C	; 60
     63e:	91 05       	cpc	r25, r1
     640:	41 f1       	breq	.+80     	; 0x692 <time_bound_12+0x86>

// bound the minutes from 60 to 0

//bound the hours from 12 to 1 and 1 to 12

if(hours > 12){time = 100;time += minutes;}
     642:	6d 30       	cpi	r22, 0x0D	; 13
     644:	71 05       	cpc	r23, r1
     646:	8c f0       	brlt	.+34     	; 0x66a <time_bound_12+0x5e>
     648:	24 e6       	ldi	r18, 0x64	; 100
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <time+0x1>
     650:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <time>
     654:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     658:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     65c:	82 0f       	add	r24, r18
     65e:	93 1f       	adc	r25, r19
     660:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     664:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
     668:	08 95       	ret
if(hours < 1){time = 1200;time += minutes;}
     66a:	16 16       	cp	r1, r22
     66c:	17 06       	cpc	r1, r23
     66e:	84 f0       	brlt	.+32     	; 0x690 <time_bound_12+0x84>
     670:	20 eb       	ldi	r18, 0xB0	; 176
     672:	34 e0       	ldi	r19, 0x04	; 4
     674:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <time+0x1>
     678:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <time>
     67c:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     680:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     684:	82 0f       	add	r24, r18
     686:	93 1f       	adc	r25, r19
     688:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     68c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
     690:	08 95       	ret
	if(time == 59){time +=1200;} //FIX THE 100 TO 1259 BUG
	else{time+=100;}
} // decrement hours; ex (200 -> 159)
//bound the minutes from 0 to 60
if (minutes == 60){
	  time += 40;
     692:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     696:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     69a:	28 5d       	subi	r18, 0xD8	; 216
     69c:	3f 4f       	sbci	r19, 0xFF	; 255
     69e:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <time+0x1>
     6a2:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <time>
	  time -= 100;
     6a6:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     6aa:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     6ae:	24 56       	subi	r18, 0x64	; 100
     6b0:	31 09       	sbc	r19, r1
     6b2:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <time+0x1>
     6b6:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <time>
     6ba:	c3 cf       	rjmp	.-122    	; 0x642 <time_bound_12+0x36>
void time_bound_12(void){
int hours = time/100;  // convert integer time into hours
int minutes = time - (hours*100); // convert the integer time into minutes

if(minutes == 99){
	time -= 40;
     6bc:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     6c0:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     6c4:	28 52       	subi	r18, 0x28	; 40
     6c6:	31 09       	sbc	r19, r1
     6c8:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <time+0x1>
     6cc:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <time>
	if(time == 59){time +=1200;} //FIX THE 100 TO 1259 BUG
     6d0:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     6d4:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     6d8:	2b 33       	cpi	r18, 0x3B	; 59
     6da:	31 05       	cpc	r19, r1
     6dc:	59 f0       	breq	.+22     	; 0x6f4 <time_bound_12+0xe8>
	else{time+=100;}
     6de:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     6e2:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     6e6:	2c 59       	subi	r18, 0x9C	; 156
     6e8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ea:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <time+0x1>
     6ee:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <time>
     6f2:	a7 cf       	rjmp	.-178    	; 0x642 <time_bound_12+0x36>
int hours = time/100;  // convert integer time into hours
int minutes = time - (hours*100); // convert the integer time into minutes

if(minutes == 99){
	time -= 40;
	if(time == 59){time +=1200;} //FIX THE 100 TO 1259 BUG
     6f4:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <time>
     6f8:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <time+0x1>
     6fc:	20 55       	subi	r18, 0x50	; 80
     6fe:	3b 4f       	sbci	r19, 0xFB	; 251
     700:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <time+0x1>
     704:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <time>
     708:	9c cf       	rjmp	.-200    	; 0x642 <time_bound_12+0x36>

0000070a <time_tracker_12>:
if(hours < 1){time = 1200;time += minutes;}
}
/***************************************************************
/				time_tracker_12
****************************************************************/
void time_tracker_12(void){
     70a:	1f 93       	push	r17
int hours = time/100;
     70c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     710:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     714:	64 e6       	ldi	r22, 0x64	; 100
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divmodhi4>
     71c:	9b 01       	movw	r18, r22
int minutes = time - (hours*100);
     71e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     722:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     726:	1c e9       	ldi	r17, 0x9C	; 156
     728:	16 03       	mulsu	r17, r22
     72a:	a0 01       	movw	r20, r0
     72c:	17 9f       	mul	r17, r23
     72e:	50 0d       	add	r21, r0
     730:	11 24       	eor	r1, r1
     732:	84 0f       	add	r24, r20
     734:	95 1f       	adc	r25, r21
	//if 60 seconds has been reached then increase the minutes by one
	if(seconds > 59){
     736:	40 91 66 01 	lds	r20, 0x0166	; 0x800166 <seconds>
     73a:	50 91 67 01 	lds	r21, 0x0167	; 0x800167 <seconds+0x1>
     73e:	4c 33       	cpi	r20, 0x3C	; 60
     740:	51 05       	cpc	r21, r1
     742:	74 f0       	brlt	.+28     	; 0x760 <time_tracker_12+0x56>
		time++; // increment minutes 
     744:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <time>
     748:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <time+0x1>
     74c:	4f 5f       	subi	r20, 0xFF	; 255
     74e:	5f 4f       	sbci	r21, 0xFF	; 255
     750:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <time+0x1>
     754:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <time>
		seconds = 0; // reset seconds
     758:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <seconds+0x1>
     75c:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <seconds>
	}
		//increment hours if 60 minutes has passed
	if(minutes > 59){ 
     760:	cc 97       	sbiw	r24, 0x3c	; 60
     762:	64 f0       	brlt	.+24     	; 0x77c <time_tracker_12+0x72>
	time += 40; // increment the time ex (160 -> 200)
     764:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
     768:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
     76c:	88 96       	adiw	r24, 0x28	; 40
     76e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     772:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
	hours++;
     776:	9b 01       	movw	r18, r22
     778:	2f 5f       	subi	r18, 0xFF	; 255
     77a:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	
	if(hours > 12){ time = 100;} // reset hours to 1 o'clock
     77c:	2d 30       	cpi	r18, 0x0D	; 13
     77e:	31 05       	cpc	r19, r1
     780:	34 f0       	brlt	.+12     	; 0x78e <time_tracker_12+0x84>
     782:	84 e6       	ldi	r24, 0x64	; 100
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <time+0x1>
     78a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <time>
//bound the hours from 12 to 1 and 1 to 12

if(hours > 12){time = 100;}
if(hours < 1){time = 1200;}
*/
}
     78e:	1f 91       	pop	r17
     790:	08 95       	ret

00000792 <time_tracker_24>:
/***************************************************************
/				time_tracker_24
****************************************************************/
void time_tracker_24(int sec, int min){
     792:	08 95       	ret

00000794 <update_EN_alarm>:
/********************************************************************
 *				update_encoder_alarm
 ********************************************************************/
void update_EN_alarm(int val_rot){
//changes the alarm time without affecting real time
	if(val_rot == 1){ alarm_time += (100*incr_alarm);} //if rotating to the right for left encoder then increment 
     794:	81 30       	cpi	r24, 0x01	; 1
     796:	91 05       	cpc	r25, r1
     798:	61 f1       	breq	.+88     	; 0x7f2 <update_EN_alarm+0x5e>
	else if(val_rot ==0){alarm_time -= (100*incr_alarm);}//if rotating to the left for left encoder then decrement
     79a:	00 97       	sbiw	r24, 0x00	; 0
     79c:	31 f0       	breq	.+12     	; 0x7aa <update_EN_alarm+0x16>
	else if(val_rot == 2){alarm_time -= incr_alarm;} // if rotating to the left for right encoder then decrement
     79e:	82 30       	cpi	r24, 0x02	; 2
     7a0:	91 05       	cpc	r25, r1
     7a2:	e1 f1       	breq	.+120    	; 0x81c <update_EN_alarm+0x88>
	else if(val_rot == 3){alarm_time += incr_alarm;}// if rotatiing to the right for right encoder then increment
     7a4:	03 97       	sbiw	r24, 0x03	; 3
     7a6:	b1 f0       	breq	.+44     	; 0x7d4 <update_EN_alarm+0x40>
     7a8:	08 95       	ret
 *				update_encoder_alarm
 ********************************************************************/
void update_EN_alarm(int val_rot){
//changes the alarm time without affecting real time
	if(val_rot == 1){ alarm_time += (100*incr_alarm);} //if rotating to the right for left encoder then increment 
	else if(val_rot ==0){alarm_time -= (100*incr_alarm);}//if rotating to the left for left encoder then decrement
     7aa:	40 91 62 01 	lds	r20, 0x0162	; 0x800162 <incr_alarm>
     7ae:	50 91 63 01 	lds	r21, 0x0163	; 0x800163 <incr_alarm+0x1>
     7b2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <alarm_time>
     7b6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <alarm_time+0x1>
     7ba:	64 e6       	ldi	r22, 0x64	; 100
     7bc:	64 9f       	mul	r22, r20
     7be:	90 01       	movw	r18, r0
     7c0:	65 9f       	mul	r22, r21
     7c2:	30 0d       	add	r19, r0
     7c4:	11 24       	eor	r1, r1
     7c6:	82 1b       	sub	r24, r18
     7c8:	93 0b       	sbc	r25, r19
     7ca:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <alarm_time+0x1>
     7ce:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <alarm_time>
     7d2:	08 95       	ret
	else if(val_rot == 2){alarm_time -= incr_alarm;} // if rotating to the left for right encoder then decrement
	else if(val_rot == 3){alarm_time += incr_alarm;}// if rotatiing to the right for right encoder then increment
     7d4:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <incr_alarm>
     7d8:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <incr_alarm+0x1>
     7dc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <alarm_time>
     7e0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <alarm_time+0x1>
     7e4:	82 0f       	add	r24, r18
     7e6:	93 1f       	adc	r25, r19
     7e8:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <alarm_time+0x1>
     7ec:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <alarm_time>
     7f0:	08 95       	ret
/********************************************************************
 *				update_encoder_alarm
 ********************************************************************/
void update_EN_alarm(int val_rot){
//changes the alarm time without affecting real time
	if(val_rot == 1){ alarm_time += (100*incr_alarm);} //if rotating to the right for left encoder then increment 
     7f2:	40 91 62 01 	lds	r20, 0x0162	; 0x800162 <incr_alarm>
     7f6:	50 91 63 01 	lds	r21, 0x0163	; 0x800163 <incr_alarm+0x1>
     7fa:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <alarm_time>
     7fe:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <alarm_time+0x1>
     802:	64 e6       	ldi	r22, 0x64	; 100
     804:	64 9f       	mul	r22, r20
     806:	90 01       	movw	r18, r0
     808:	65 9f       	mul	r22, r21
     80a:	30 0d       	add	r19, r0
     80c:	11 24       	eor	r1, r1
     80e:	82 0f       	add	r24, r18
     810:	93 1f       	adc	r25, r19
     812:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <alarm_time+0x1>
     816:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <alarm_time>
     81a:	08 95       	ret
	else if(val_rot ==0){alarm_time -= (100*incr_alarm);}//if rotating to the left for left encoder then decrement
	else if(val_rot == 2){alarm_time -= incr_alarm;} // if rotating to the left for right encoder then decrement
     81c:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <incr_alarm>
     820:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <incr_alarm+0x1>
     824:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <alarm_time>
     828:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <alarm_time+0x1>
     82c:	82 1b       	sub	r24, r18
     82e:	93 0b       	sbc	r25, r19
     830:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <alarm_time+0x1>
     834:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <alarm_time>
     838:	08 95       	ret

0000083a <__vector_15>:
//	else{OCR2 = 200;} // brighten the light otherwise
	OCR2 = adc_data;
}

// TIMER0 overflowIS
ISR( TIMER0_COMP_vect ) {
     83a:	1f 92       	push	r1
     83c:	0f 92       	push	r0
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	0f 92       	push	r0
     842:	11 24       	eor	r1, r1
     844:	0b b6       	in	r0, 0x3b	; 59
     846:	0f 92       	push	r0
     848:	ef 92       	push	r14
     84a:	ff 92       	push	r15
     84c:	0f 93       	push	r16
     84e:	1f 93       	push	r17
     850:	2f 93       	push	r18
     852:	3f 93       	push	r19
     854:	4f 93       	push	r20
     856:	5f 93       	push	r21
     858:	6f 93       	push	r22
     85a:	7f 93       	push	r23
     85c:	8f 93       	push	r24
     85e:	9f 93       	push	r25
     860:	af 93       	push	r26
     862:	bf 93       	push	r27
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	ef 93       	push	r30
     86a:	ff 93       	push	r31


//save the states of PORTA and PORTB
saveA = PORTA;
     86c:	8b b3       	in	r24, 0x1b	; 27
     86e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <saveA>
saveB = PORTB;
     872:	88 b3       	in	r24, 0x18	; 24
     874:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <saveB>

alarm_compare(); //checks if the alarm set time and the clock time matches then trigger alarm
     878:	0e 94 73 02 	call	0x4e6	; 0x4e6 <alarm_compare>

if(alarm == TRUE){
     87c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <alarm>
     880:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <alarm+0x1>
     884:	01 97       	sbiw	r24, 0x01	; 1
     886:	09 f4       	brne	.+2      	; 0x88a <__vector_15+0x50>
     888:	f9 c0       	rjmp	.+498    	; 0xa7c <__vector_15+0x242>
	refresh_lcd(lcd_temp_array);	
	}


static uint16_t timer = 0;  //hold value of count between interrupts
timer++;  //extend counter
     88a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <timer.2414>
     88e:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <timer.2414+0x1>
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <timer.2414+0x1>
     898:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <timer.2414>

if((timer% 32)== 0){refresh_lcd(lcd_temp_array);}
     89c:	9c 01       	movw	r18, r24
     89e:	2f 71       	andi	r18, 0x1F	; 31
     8a0:	33 27       	eor	r19, r19
     8a2:	23 2b       	or	r18, r19
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <__vector_15+0x6e>
     8a6:	c8 c0       	rjmp	.+400    	; 0xa38 <__vector_15+0x1fe>

if((timer% 64) == 0){ // turn off for half a second 
     8a8:	9c 01       	movw	r18, r24
     8aa:	2f 73       	andi	r18, 0x3F	; 63
     8ac:	33 27       	eor	r19, r19
     8ae:	23 2b       	or	r18, r19
     8b0:	19 f4       	brne	.+6      	; 0x8b8 <__vector_15+0x7e>
	segment_data[2] = 0x07; //turn off colon
     8b2:	27 e0       	ldi	r18, 0x07	; 7
     8b4:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <segment_data+0x2>
} 


//if((timer% 32) == 0){ // turn off for half a second 

if((timer% 512) == 0){
     8b8:	91 70       	andi	r25, 0x01	; 1
     8ba:	89 2b       	or	r24, r25
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <__vector_15+0x86>
     8be:	c5 c0       	rjmp	.+394    	; 0xa4a <__vector_15+0x210>

//if((timer% 2048) == 0){
//uart_putc("t");
//}

PORTB = 0x50;  //enable tristate buffer for pushbutton switches
     8c0:	80 e5       	ldi	r24, 0x50	; 80
     8c2:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8c4:	8f e8       	ldi	r24, 0x8F	; 143
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	01 97       	sbiw	r24, 0x01	; 1
     8ca:	f1 f7       	brne	.-4      	; 0x8c8 <__vector_15+0x8e>
     8cc:	00 c0       	rjmp	.+0      	; 0x8ce <__vector_15+0x94>
     8ce:	00 00       	nop
//*******************************************************************************
uint8_t chk_buttons(int button) {
static uint16_t states[8] = {0}; // an array to store the states of all buttons on the button board

// states[0] corresponds to S1 on the board and states[7] corresponds to S8
states[button] = (states[button]<<1 | (! bit_is_clear(PINA, button)) | 0xE000); //first extract the bit that corresponds to the button
     8d0:	29 b3       	in	r18, 0x19	; 25
     8d2:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <states.2370>
     8d6:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <states.2370+0x1>
     8da:	88 0f       	add	r24, r24
     8dc:	99 1f       	adc	r25, r25
     8de:	90 6e       	ori	r25, 0xE0	; 224
     8e0:	21 70       	andi	r18, 0x01	; 1
     8e2:	c2 2f       	mov	r28, r18
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	d2 2f       	mov	r29, r18
     8e8:	c8 2b       	or	r28, r24
     8ea:	d9 2b       	or	r29, r25
     8ec:	d0 93 7b 01 	sts	0x017B, r29	; 0x80017b <states.2370+0x1>
     8f0:	c0 93 7a 01 	sts	0x017A, r28	; 0x80017a <states.2370>
//Check if button is pressed
if (states[button] == 0xF000) {return TRUE;} 
     8f4:	c1 15       	cp	r28, r1
     8f6:	d0 4f       	sbci	r29, 0xF0	; 240
     8f8:	31 f4       	brne	.+12     	; 0x906 <__vector_15+0xcc>

PORTB = 0x50;  //enable tristate buffer for pushbutton switches
_delay_ms(.1);//need a delay to active buffer


if(chk_buttons(0)){mode ^= 1<<6;}//sets alarm
     8fa:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <mode>
     8fe:	80 e4       	ldi	r24, 0x40	; 64
     900:	89 27       	eor	r24, r25
     902:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <mode>
//*******************************************************************************
uint8_t chk_buttons(int button) {
static uint16_t states[8] = {0}; // an array to store the states of all buttons on the button board

// states[0] corresponds to S1 on the board and states[7] corresponds to S8
states[button] = (states[button]<<1 | (! bit_is_clear(PINA, button)) | 0xE000); //first extract the bit that corresponds to the button
     906:	29 b3       	in	r18, 0x19	; 25
     908:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <states.2370+0x6>
     90c:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <states.2370+0x7>
     910:	88 0f       	add	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	90 6e       	ori	r25, 0xE0	; 224
     916:	23 fb       	bst	r18, 3
     918:	ee 24       	eor	r14, r14
     91a:	e0 f8       	bld	r14, 0
     91c:	f1 2c       	mov	r15, r1
     91e:	e8 2a       	or	r14, r24
     920:	f9 2a       	or	r15, r25
     922:	f0 92 81 01 	sts	0x0181, r15	; 0x800181 <states.2370+0x7>
     926:	e0 92 80 01 	sts	0x0180, r14	; 0x800180 <states.2370+0x6>
//Check if button is pressed
if (states[button] == 0xF000) {return TRUE;} 
     92a:	e1 14       	cp	r14, r1
     92c:	90 ef       	ldi	r25, 0xF0	; 240
     92e:	f9 06       	cpc	r15, r25
     930:	31 f4       	brne	.+12     	; 0x93e <__vector_15+0x104>
_delay_ms(.1);//need a delay to active buffer


if(chk_buttons(0)){mode ^= 1<<6;}//sets alarm

if (chk_buttons(3)){mode ^= 1 << 2;}//snooze alarm
     932:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <mode>
     936:	84 e0       	ldi	r24, 0x04	; 4
     938:	89 27       	eor	r24, r25
     93a:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <mode>
//*******************************************************************************
uint8_t chk_buttons(int button) {
static uint16_t states[8] = {0}; // an array to store the states of all buttons on the button board

// states[0] corresponds to S1 on the board and states[7] corresponds to S8
states[button] = (states[button]<<1 | (! bit_is_clear(PINA, button)) | 0xE000); //first extract the bit that corresponds to the button
     93e:	29 b3       	in	r18, 0x19	; 25
     940:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <states.2370+0x4>
     944:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <states.2370+0x5>
     948:	88 0f       	add	r24, r24
     94a:	99 1f       	adc	r25, r25
     94c:	90 6e       	ori	r25, 0xE0	; 224
     94e:	22 fb       	bst	r18, 2
     950:	00 27       	eor	r16, r16
     952:	00 f9       	bld	r16, 0
     954:	10 e0       	ldi	r17, 0x00	; 0
     956:	08 2b       	or	r16, r24
     958:	19 2b       	or	r17, r25
     95a:	10 93 7f 01 	sts	0x017F, r17	; 0x80017f <states.2370+0x5>
     95e:	00 93 7e 01 	sts	0x017E, r16	; 0x80017e <states.2370+0x4>
//Check if button is pressed
if (states[button] == 0xF000) {return TRUE;} 
     962:	01 15       	cp	r16, r1
     964:	10 4f       	sbci	r17, 0xF0	; 240
     966:	31 f4       	brne	.+12     	; 0x974 <__vector_15+0x13a>


if(chk_buttons(0)){mode ^= 1<<6;}//sets alarm

if (chk_buttons(3)){mode ^= 1 << 2;}//snooze alarm
if (chk_buttons(2)){mode ^= 1 << 5;}//disable alarm
     968:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <mode>
     96c:	80 e2       	ldi	r24, 0x20	; 32
     96e:	89 27       	eor	r24, r25
     970:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <mode>
//*******************************************************************************
uint8_t chk_buttons(int button) {
static uint16_t states[8] = {0}; // an array to store the states of all buttons on the button board

// states[0] corresponds to S1 on the board and states[7] corresponds to S8
states[button] = (states[button]<<1 | (! bit_is_clear(PINA, button)) | 0xE000); //first extract the bit that corresponds to the button
     974:	99 b3       	in	r25, 0x19	; 25
     976:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <states.2370+0xe>
     97a:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <states.2370+0xf>
     97e:	22 0f       	add	r18, r18
     980:	33 1f       	adc	r19, r19
     982:	30 6e       	ori	r19, 0xE0	; 224
     984:	89 2f       	mov	r24, r25
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	88 0f       	add	r24, r24
     98a:	89 2f       	mov	r24, r25
     98c:	88 1f       	adc	r24, r24
     98e:	99 0b       	sbc	r25, r25
     990:	82 2b       	or	r24, r18
     992:	93 2b       	or	r25, r19
     994:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <states.2370+0xf>
     998:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <states.2370+0xe>
//Check if button is pressed
if (states[button] == 0xF000) {return TRUE;} 
     99c:	81 15       	cp	r24, r1
     99e:	90 4f       	sbci	r25, 0xF0	; 240
     9a0:	31 f4       	brne	.+12     	; 0x9ae <__vector_15+0x174>

if(chk_buttons(0)){mode ^= 1<<6;}//sets alarm

if (chk_buttons(3)){mode ^= 1 << 2;}//snooze alarm
if (chk_buttons(2)){mode ^= 1 << 5;}//disable alarm
if (chk_buttons(7)){mode ^= 1 << 3;} //sets time
     9a2:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <mode>
     9a6:	88 e0       	ldi	r24, 0x08	; 8
     9a8:	89 27       	eor	r24, r25
     9aa:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <mode>
	
PORTB = 0x70;//disable tristate
     9ae:	80 e7       	ldi	r24, 0x70	; 112
     9b0:	88 bb       	out	0x18, r24	; 24
 *				read_SPI
 ********************************************************************/
void read_SPI(void){

//shift clock register
PORTE &= ~(1 << PE6);//falling edge
     9b2:	1e 98       	cbi	0x03, 6	; 3
PORTE |= (1 << PE6); //rising edge
     9b4:	1e 9a       	sbi	0x03, 6	; 3
SPDR = 0x20; //send junk data to read in from SPI
     9b6:	80 e2       	ldi	r24, 0x20	; 32
     9b8:	8f b9       	out	0x0f, r24	; 15
	while(bit_is_clear(SPSR,SPIF)){} // read data in
     9ba:	77 9b       	sbis	0x0e, 7	; 14
     9bc:	fe cf       	rjmp	.-4      	; 0x9ba <__vector_15+0x180>
raw_encoder_val = SPDR;//save the data
     9be:	8f b1       	in	r24, 0x0f	; 15
     9c0:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <raw_encoder_val>
	
PORTB = 0x70;//disable tristate


read_SPI();		//read in from the SPI
read = process_EN(); 	// decrypt the data from the SPI and determine the encoder movement
     9c4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <process_EN>
     9c8:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <read+0x1>
     9cc:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <read>
update_EN(read);	// increase the time with the encoder movement 
     9d0:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <read>
     9d4:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <read+0x1>
     9d8:	0e 94 af 01 	call	0x35e	; 0x35e <update_EN>
update_EN_alarm(read);	// increase the alarm_time with the encoder movement
     9dc:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <read>
     9e0:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <read+0x1>
     9e4:	0e 94 ca 03 	call	0x794	; 0x794 <update_EN_alarm>

write_SPI(mode); 	// write to the bar graph
     9e8:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <mode>
/********************************************************************
 *				write_SPI
 ********************************************************************/
void write_SPI(uint8_t value){

SPDR = value; // take in which mode it is currently on and display it 
     9ec:	8f b9       	out	0x0f, r24	; 15
	while (bit_is_clear(SPSR,SPIF)) {} //wait till data is sent out
     9ee:	77 9b       	sbis	0x0e, 7	; 14
     9f0:	fe cf       	rjmp	.-4      	; 0x9ee <__vector_15+0x1b4>
PORTD |= (1 << PD2); //SEND data to bargraph, rising edge
     9f2:	92 9a       	sbi	0x12, 2	; 18
PORTD &= ~(1<<PD2); // falling edge
     9f4:	92 98       	cbi	0x12, 2	; 18
update_EN_alarm(read);	// increase the alarm_time with the encoder movement

write_SPI(mode); 	// write to the bar graph

//restore the state when leaving the ISR
PORTA = saveA;
     9f6:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <saveA>
     9fa:	8b bb       	out	0x1b, r24	; 27
PORTB = saveB;
     9fc:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <saveB>
     a00:	88 bb       	out	0x18, r24	; 24

DDRA = 0xFF; 		//set PORTA to all outputs
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	8a bb       	out	0x1a, r24	; 26


}//end of ISR Timer0
     a06:	ff 91       	pop	r31
     a08:	ef 91       	pop	r30
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	bf 91       	pop	r27
     a10:	af 91       	pop	r26
     a12:	9f 91       	pop	r25
     a14:	8f 91       	pop	r24
     a16:	7f 91       	pop	r23
     a18:	6f 91       	pop	r22
     a1a:	5f 91       	pop	r21
     a1c:	4f 91       	pop	r20
     a1e:	3f 91       	pop	r19
     a20:	2f 91       	pop	r18
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	ff 90       	pop	r15
     a28:	ef 90       	pop	r14
     a2a:	0f 90       	pop	r0
     a2c:	0b be       	out	0x3b, r0	; 59
     a2e:	0f 90       	pop	r0
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	0f 90       	pop	r0
     a34:	1f 90       	pop	r1
     a36:	18 95       	reti


static uint16_t timer = 0;  //hold value of count between interrupts
timer++;  //extend counter

if((timer% 32)== 0){refresh_lcd(lcd_temp_array);}
     a38:	88 e1       	ldi	r24, 0x18	; 24
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <refresh_lcd>
     a40:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <timer.2414>
     a44:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <timer.2414+0x1>
     a48:	2f cf       	rjmp	.-418    	; 0x8a8 <__vector_15+0x6e>

//if((timer% 32) == 0){ // turn off for half a second 

if((timer% 512) == 0){
//	uart_putc("1");
	uart_puts(temp_str);
     a4a:	82 eb       	ldi	r24, 0xB2	; 178
     a4c:	91 e0       	ldi	r25, 0x01	; 1
     a4e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <uart_puts>
	uart_putc('\0');	
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <uart_putc>
//	uart_putc('\0');
//	_delay_us(.1);
	segment_data[2] = 0x0C; //turn on colon
     a58:	8c e0       	ldi	r24, 0x0C	; 12
     a5a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <segment_data+0x2>
 	seconds+= seconds_holder; //increment seconds
     a5e:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <seconds_holder>
     a62:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <seconds_holder+0x1>
     a66:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <seconds>
     a6a:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <seconds+0x1>
     a6e:	82 0f       	add	r24, r18
     a70:	93 1f       	adc	r25, r19
     a72:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <seconds+0x1>
     a76:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <seconds>
     a7a:	22 cf       	rjmp	.-444    	; 0x8c0 <__vector_15+0x86>

alarm_compare(); //checks if the alarm set time and the clock time matches then trigger alarm

if(alarm == TRUE){
//	temp_str = "ALARM";
	int a = strlen(alarm_str);
     a7c:	e8 e3       	ldi	r30, 0x38	; 56
     a7e:	f1 e0       	ldi	r31, 0x01	; 1
     a80:	01 90       	ld	r0, Z+
     a82:	00 20       	and	r0, r0
     a84:	e9 f7       	brne	.-6      	; 0xa80 <__vector_15+0x246>
     a86:	31 97       	sbiw	r30, 0x01	; 1
     a88:	af 01       	movw	r20, r30
     a8a:	48 53       	subi	r20, 0x38	; 56
     a8c:	51 40       	sbci	r21, 0x01	; 1
	for(i = 0; i < a; i++ ){
     a8e:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <i+0x1>
     a92:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <i>
     a96:	41 15       	cp	r20, r1
     a98:	51 05       	cpc	r21, r1
     a9a:	81 f0       	breq	.+32     	; 0xabc <__vector_15+0x282>
     a9c:	a8 e3       	ldi	r26, 0x38	; 56
     a9e:	b1 e0       	ldi	r27, 0x01	; 1
     aa0:	e3 e2       	ldi	r30, 0x23	; 35
     aa2:	f1 e0       	ldi	r31, 0x01	; 1
     aa4:	9a 01       	movw	r18, r20
     aa6:	2d 5d       	subi	r18, 0xDD	; 221
     aa8:	3e 4f       	sbci	r19, 0xFE	; 254
		lcd_temp_array[11 + i] = alarm_str[i];
     aaa:	8d 91       	ld	r24, X+
     aac:	81 93       	st	Z+, r24
alarm_compare(); //checks if the alarm set time and the clock time matches then trigger alarm

if(alarm == TRUE){
//	temp_str = "ALARM";
	int a = strlen(alarm_str);
	for(i = 0; i < a; i++ ){
     aae:	e2 17       	cp	r30, r18
     ab0:	f3 07       	cpc	r31, r19
     ab2:	d9 f7       	brne	.-10     	; 0xaaa <__vector_15+0x270>
     ab4:	50 93 a9 01 	sts	0x01A9, r21	; 0x8001a9 <i+0x1>
     ab8:	40 93 a8 01 	sts	0x01A8, r20	; 0x8001a8 <i>
		lcd_temp_array[11 + i] = alarm_str[i];
	}
	refresh_lcd(lcd_temp_array);	
     abc:	88 e1       	ldi	r24, 0x18	; 24
     abe:	91 e0       	ldi	r25, 0x01	; 1
     ac0:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <refresh_lcd>
     ac4:	e2 ce       	rjmp	.-572    	; 0x88a <__vector_15+0x50>

00000ac6 <digit_display>:
 *				digit_display
 **********************************************************************/
void digit_display(void){
int index;

PORTB = 0x00;
     ac6:	18 ba       	out	0x18, r1	; 24
     ac8:	ed e0       	ldi	r30, 0x0D	; 13
     aca:	f1 e0       	ldi	r31, 0x01	; 1

	for(index = 0; index < 5; index++){
		PORTA = segment_data[index]; //send 7 segment code to LED segments
     acc:	81 91       	ld	r24, Z+
     ace:	8b bb       	out	0x1b, r24	; 27
     ad0:	8f e6       	ldi	r24, 0x6F	; 111
     ad2:	97 e1       	ldi	r25, 0x17	; 23
     ad4:	01 97       	sbiw	r24, 0x01	; 1
     ad6:	f1 f7       	brne	.-4      	; 0xad4 <digit_display+0xe>
     ad8:	00 c0       	rjmp	.+0      	; 0xada <digit_display+0x14>
     ada:	00 00       	nop
		_delay_ms(1.5);
		PORTB += 0x10; // within 4 digits for the hex value
     adc:	88 b3       	in	r24, 0x18	; 24
     ade:	80 5f       	subi	r24, 0xF0	; 240
     ae0:	88 bb       	out	0x18, r24	; 24
void digit_display(void){
int index;

PORTB = 0x00;

	for(index = 0; index < 5; index++){
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	e2 31       	cpi	r30, 0x12	; 18
     ae6:	f9 07       	cpc	r31, r25
     ae8:	89 f7       	brne	.-30     	; 0xacc <digit_display+0x6>
		PORTA = segment_data[index]; //send 7 segment code to LED segments
		_delay_ms(1.5);
		PORTB += 0x10; // within 4 digits for the hex value
	}
}
     aea:	08 95       	ret

00000aec <spi_init>:

/**********************************************************************
 *				spi_init
 **********************************************************************/
void spi_init(void){
DDRB |= ( (1 << PB2) | ( 1<< PB1) | (1<<PB0) ); //mosi and serial clock
     aec:	87 b3       	in	r24, 0x17	; 23
     aee:	87 60       	ori	r24, 0x07	; 7
     af0:	87 bb       	out	0x17, r24	; 23
SPCR |= ( (1 << MSTR) | (1 << SPE) ); //master mode, SPI enabled, clk low on idle, leading edge sample
     af2:	8d b1       	in	r24, 0x0d	; 13
     af4:	80 65       	ori	r24, 0x50	; 80
     af6:	8d b9       	out	0x0d, r24	; 13
SPSR |= 1 << SPI2X;
     af8:	70 9a       	sbi	0x0e, 0	; 14

//DDRF |= 0x08; //lcd strobe bit
DDRB |= 0xF0; // set PORTB 4-7 bits as outputs
     afa:	87 b3       	in	r24, 0x17	; 23
     afc:	80 6f       	ori	r24, 0xF0	; 240
     afe:	87 bb       	out	0x17, r24	; 23
DDRA = 0x03; // set PORTA 6-7 bits as inputs
     b00:	83 e0       	ldi	r24, 0x03	; 3
     b02:	8a bb       	out	0x1a, r24	; 26
DDRD = (1 << PD2); // set PD2 as output
     b04:	84 e0       	ldi	r24, 0x04	; 4
     b06:	81 bb       	out	0x11, r24	; 17
DDRE = 0xFF;// set PORTE to all outputs
     b08:	8f ef       	ldi	r24, 0xFF	; 255
     b0a:	82 b9       	out	0x02, r24	; 2
     b0c:	08 95       	ret

00000b0e <volume_init>:
/**********************************************************************
 *				volume_init
 **********************************************************************/
void volume_init(void){
//volume pin is PE3
TCCR3A = (1 << COM3A1 | (1 << WGM31) ); //normal operation w/ OC3A is disconnected
     b0e:	82 e8       	ldi	r24, 0x82	; 130
     b10:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
TCCR3B |= (  (1 << CS30) | ( 1 << WGM32) | (1 << WGM33) ); //fast pwm 
     b14:	ea e8       	ldi	r30, 0x8A	; 138
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	80 81       	ld	r24, Z
     b1a:	89 61       	ori	r24, 0x19	; 25
     b1c:	80 83       	st	Z, r24
ICR3 = 10; // Set overflow top ; controls frequency 
     b1e:	8a e0       	ldi	r24, 0x0A	; 10
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     b26:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
OCR3A = 0; // set compare match; duty cycle
     b2a:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     b2e:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     b32:	08 95       	ret

00000b34 <tone_init>:

/**********************************************************************
 *				tone_init
 **********************************************************************/
void tone_init(void){
DDRC = 0xFF; // set all of PORTC as outputs
     b34:	8f ef       	ldi	r24, 0xFF	; 255
     b36:	84 bb       	out	0x14, r24	; 20
TCCR1A = 0x00; // normal operation w/ OC1A is disconnected
     b38:	1f bc       	out	0x2f, r1	; 47
TIMSK |= 1 << OCIE1A; //output compare enable for timercounter1A
     b3a:	87 b7       	in	r24, 0x37	; 55
     b3c:	80 61       	ori	r24, 0x10	; 16
     b3e:	87 bf       	out	0x37, r24	; 55
OCR1A = 3999; // 4kHz and triggers ISR
     b40:	8f e9       	ldi	r24, 0x9F	; 159
     b42:	9f e0       	ldi	r25, 0x0F	; 15
     b44:	9b bd       	out	0x2b, r25	; 43
     b46:	8a bd       	out	0x2a, r24	; 42
//clk is not set
TCCR1B |= (1 << WGM12); // CTC mode, clear with OCR and no prescaling
     b48:	8e b5       	in	r24, 0x2e	; 46
     b4a:	88 60       	ori	r24, 0x08	; 8
     b4c:	8e bd       	out	0x2e, r24	; 46
     b4e:	08 95       	ret

00000b50 <clock_init>:

/**********************************************************************
 *				clock_init
 **********************************************************************/
void clock_init(void){
ASSR   |=  1<<AS0; //ext osc TOSC in 32kHz 
     b50:	80 b7       	in	r24, 0x30	; 48
     b52:	88 60       	ori	r24, 0x08	; 8
     b54:	80 bf       	out	0x30, r24	; 48
TIMSK |= 1 << OCIE0; //interrupt flag on compare register 
     b56:	87 b7       	in	r24, 0x37	; 55
     b58:	82 60       	ori	r24, 0x02	; 2
     b5a:	87 bf       	out	0x37, r24	; 55
TCCR0 |= ((1 << WGM01) | (1 << CS00)); //CTC mode, with clk/no pre-scaling
     b5c:	83 b7       	in	r24, 0x33	; 51
     b5e:	89 60       	ori	r24, 0x09	; 9
     b60:	83 bf       	out	0x33, r24	; 51
OCR0 = 127; // Set top 
     b62:	8f e7       	ldi	r24, 0x7F	; 127
     b64:	81 bf       	out	0x31, r24	; 49
     b66:	08 95       	ret

00000b68 <dimming_init>:

/**********************************************************************
 *				dimming_init
 **********************************************************************/
void dimming_init(void){
TCCR2 |= (1 << WGM21) | ( 1 << WGM20) | (1 << COM21) | ( 1 << CS20); // no prescale, clear on OC2 match, fast pwm mode
     b68:	85 b5       	in	r24, 0x25	; 37
     b6a:	89 66       	ori	r24, 0x69	; 105
     b6c:	85 bd       	out	0x25, r24	; 37
TIMSK |= (1 << OCIE2); // Compare match interrupt enable timer/counter0
     b6e:	87 b7       	in	r24, 0x37	; 55
     b70:	80 68       	ori	r24, 0x80	; 128
     b72:	87 bf       	out	0x37, r24	; 55
TCNT2 = 0; //set count at 0
     b74:	14 bc       	out	0x24, r1	; 36
     b76:	08 95       	ret

00000b78 <ADC_init>:

/**********************************************************************
 *				ADC_init
 **********************************************************************/
void ADC_init(void){
DDRF  &= ~(_BV(DDF7)); //make port F bit 7 the ADC input  
     b78:	e1 e6       	ldi	r30, 0x61	; 97
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	8f 77       	andi	r24, 0x7F	; 127
     b80:	80 83       	st	Z, r24
PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
     b82:	e2 e6       	ldi	r30, 0x62	; 98
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	8f 77       	andi	r24, 0x7F	; 127
     b8a:	80 83       	st	Z, r24
	
ADMUX = (1 << REFS0) | (1 << ADLAR) | 0x07; // reference to AVCC(5v), left adjusted (only reading  8bit), and channel 7
     b8c:	87 e6       	ldi	r24, 0x67	; 103
     b8e:	87 b9       	out	0x07, r24	; 7
//ADC enabled, single conversion, division factor is 128
ADCSRA = (1 << ADEN) | (1 << ADPS2) | ( 1 << ADPS1) | ( 1 << ADPS0) ; 
     b90:	87 e8       	ldi	r24, 0x87	; 135
     b92:	86 b9       	out	0x06, r24	; 6
     b94:	08 95       	ret

00000b96 <segsum>:

/**********************************************************************
 *				segsum
 *Takes in an 16-bit value and display it on the LED screen 
 *********************************************************************/
void segsum(uint16_t sum) {
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	ac 01       	movw	r20, r24
int digit_index = 0;
int temp = 0;
int i;

//display 0 if the value is 0
if(sum == 0){segment_data[digit_index] = dec_to_7seg[0];};
     b9c:	00 97       	sbiw	r24, 0x00	; 0
     b9e:	91 f4       	brne	.+36     	; 0xbc4 <segsum+0x2e>
     ba0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     ba4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <segment_data>
     ba8:	e0 e0       	ldi	r30, 0x00	; 0
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__DATA_REGION_ORIGIN__+0xa>
     bb0:	e3 5f       	subi	r30, 0xF3	; 243
     bb2:	fe 4f       	sbci	r31, 0xFE	; 254
        //segment_data[2] = dec_to_7seg[11]; //replace the colon with a blank colon

//need to turn off the rest of the digits
	if (digit_index < 5) //if there are less digits than segment numbers
	{
        	for (i = digit_index; i < 5; i++){segment_data[i] = dec_to_7seg[10];} //blank them out
     bb4:	81 93       	st	Z+, r24
     bb6:	31 e0       	ldi	r19, 0x01	; 1
     bb8:	e2 31       	cpi	r30, 0x12	; 18
     bba:	f3 07       	cpc	r31, r19
     bbc:	d9 f7       	brne	.-10     	; 0xbb4 <segsum+0x1e>
	}
}
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	08 95       	ret

//display 0 if the value is 0
if(sum == 0){segment_data[digit_index] = dec_to_7seg[0];};

        while(sum > 0){
                temp = sum % 10; // isolate to a single digit
     bc4:	9c 01       	movw	r18, r24
     bc6:	ad ec       	ldi	r26, 0xCD	; 205
     bc8:	bc ec       	ldi	r27, 0xCC	; 204
     bca:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__umulhisi3>
     bce:	96 95       	lsr	r25
     bd0:	87 95       	ror	r24
     bd2:	96 95       	lsr	r25
     bd4:	87 95       	ror	r24
     bd6:	96 95       	lsr	r25
     bd8:	87 95       	ror	r24
     bda:	9c 01       	movw	r18, r24
     bdc:	22 0f       	add	r18, r18
     bde:	33 1f       	adc	r19, r19
     be0:	88 0f       	add	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	82 0f       	add	r24, r18
     bee:	93 1f       	adc	r25, r19
     bf0:	9a 01       	movw	r18, r20
     bf2:	28 1b       	sub	r18, r24
     bf4:	39 0b       	sbc	r19, r25
     bf6:	c9 01       	movw	r24, r18
     bf8:	e0 e0       	ldi	r30, 0x00	; 0
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
                if(digit_index == 2){digit_index++;};
                segment_data[digit_index] = dec_to_7seg[temp]; //use the digit to store the hexidecimal value to seg array
     bfc:	df 01       	movw	r26, r30
     bfe:	a3 5f       	subi	r26, 0xF3	; 243
     c00:	be 4f       	sbci	r27, 0xFE	; 254
     c02:	ec 01       	movw	r28, r24
     c04:	c0 50       	subi	r28, 0x00	; 0
     c06:	df 4f       	sbci	r29, 0xFF	; 255
     c08:	88 81       	ld	r24, Y
     c0a:	8c 93       	st	X, r24
                sum = sum/10; // continue to the next digit
     c0c:	9a 01       	movw	r18, r20
     c0e:	ad ec       	ldi	r26, 0xCD	; 205
     c10:	bc ec       	ldi	r27, 0xCC	; 204
     c12:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__umulhisi3>
     c16:	ac 01       	movw	r20, r24
     c18:	56 95       	lsr	r21
     c1a:	47 95       	ror	r20
     c1c:	56 95       	lsr	r21
     c1e:	47 95       	ror	r20
     c20:	56 95       	lsr	r21
     c22:	47 95       	ror	r20
                digit_index++; // increase the digit index
     c24:	31 96       	adiw	r30, 0x01	; 1
int i;

//display 0 if the value is 0
if(sum == 0){segment_data[digit_index] = dec_to_7seg[0];};

        while(sum > 0){
     c26:	41 15       	cp	r20, r1
     c28:	51 05       	cpc	r21, r1
     c2a:	01 f1       	breq	.+64     	; 0xc6c <segsum+0xd6>
                temp = sum % 10; // isolate to a single digit
     c2c:	9a 01       	movw	r18, r20
     c2e:	ad ec       	ldi	r26, 0xCD	; 205
     c30:	bc ec       	ldi	r27, 0xCC	; 204
     c32:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__umulhisi3>
     c36:	96 95       	lsr	r25
     c38:	87 95       	ror	r24
     c3a:	96 95       	lsr	r25
     c3c:	87 95       	ror	r24
     c3e:	96 95       	lsr	r25
     c40:	87 95       	ror	r24
     c42:	9c 01       	movw	r18, r24
     c44:	22 0f       	add	r18, r18
     c46:	33 1f       	adc	r19, r19
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	82 0f       	add	r24, r18
     c56:	93 1f       	adc	r25, r19
     c58:	9a 01       	movw	r18, r20
     c5a:	28 1b       	sub	r18, r24
     c5c:	39 0b       	sbc	r19, r25
     c5e:	c9 01       	movw	r24, r18
                if(digit_index == 2){digit_index++;};
     c60:	e2 30       	cpi	r30, 0x02	; 2
     c62:	f1 05       	cpc	r31, r1
     c64:	59 f6       	brne	.-106    	; 0xbfc <segsum+0x66>
     c66:	e3 e0       	ldi	r30, 0x03	; 3
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	c8 cf       	rjmp	.-112    	; 0xbfc <segsum+0x66>
                digit_index++; // increase the digit index
        }
        //segment_data[2] = dec_to_7seg[11]; //replace the colon with a blank colon

//need to turn off the rest of the digits
	if (digit_index < 5) //if there are less digits than segment numbers
     c6c:	e5 30       	cpi	r30, 0x05	; 5
     c6e:	f1 05       	cpc	r31, r1
     c70:	0c f4       	brge	.+2      	; 0xc74 <segsum+0xde>
     c72:	9c cf       	rjmp	.-200    	; 0xbac <segsum+0x16>
	{
        	for (i = digit_index; i < 5; i++){segment_data[i] = dec_to_7seg[10];} //blank them out
	}
}
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	08 95       	ret

00000c7a <__vector_18>:

}//while

}//main

ISR(USART0_RX_vect){
     c7a:	1f 92       	push	r1
     c7c:	0f 92       	push	r0
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	0f 92       	push	r0
     c82:	11 24       	eor	r1, r1
     c84:	0b b6       	in	r0, 0x3b	; 59
     c86:	0f 92       	push	r0
     c88:	8f 93       	push	r24
     c8a:	9f 93       	push	r25
     c8c:	ef 93       	push	r30
     c8e:	ff 93       	push	r31
PORTA = saveA;
PORTB = saveB;
*/

static uint8_t j = 0;
rx_char = UDR0;
     c90:	8c b1       	in	r24, 0x0c	; 12
     c92:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <rx_char>
uart_buf[j++] = rx_char;
     c96:	e0 91 77 01 	lds	r30, 0x0177	; 0x800177 <j.2522>
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	9e 0f       	add	r25, r30
     c9e:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <j.2522>
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	ea 56       	subi	r30, 0x6A	; 106
     ca6:	fe 4f       	sbci	r31, 0xFE	; 254
     ca8:	80 83       	st	Z, r24
if(rx_char == '\0'){
     caa:	81 11       	cpse	r24, r1
     cac:	09 c0       	rjmp	.+18     	; 0xcc0 <__vector_18+0x46>
	rcv_rdy = 1;
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <rcv_rdy>
	uart_buf[--j] = (' ');
     cb4:	80 e2       	ldi	r24, 0x20	; 32
     cb6:	80 83       	st	Z, r24
	uart_buf[j+1] = (' ');
     cb8:	81 83       	std	Z+1, r24	; 0x01
	uart_buf[j+2] = (' ');
     cba:	82 83       	std	Z+2, r24	; 0x02
	j = 0;
     cbc:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <j.2522>
/*
if(rx_char != '0'){
	remote_temp = atoi(uart_buf);
	rcv_rdy = 0;}
*/
	}
     cc0:	ff 91       	pop	r31
     cc2:	ef 91       	pop	r30
     cc4:	9f 91       	pop	r25
     cc6:	8f 91       	pop	r24
     cc8:	0f 90       	pop	r0
     cca:	0b be       	out	0x3b, r0	; 59
     ccc:	0f 90       	pop	r0
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	0f 90       	pop	r0
     cd2:	1f 90       	pop	r1
     cd4:	18 95       	reti

00000cd6 <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     cd6:	5d 9b       	sbis	0x0b, 5	; 11
     cd8:	fe cf       	rjmp	.-4      	; 0xcd6 <uart_putc>
    UDR0 = data;    // Send data byte
     cda:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     cdc:	5d 9b       	sbis	0x0b, 5	; 11
     cde:	fe cf       	rjmp	.-4      	; 0xcdc <uart_putc+0x6>
}
     ce0:	08 95       	ret

00000ce2 <uart1_putc>:
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
     ce2:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     ce6:	95 ff       	sbrs	r25, 5
     ce8:	fc cf       	rjmp	.-8      	; 0xce2 <uart1_putc>
    UDR1 = data;    // Send data byte
     cea:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
     cee:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     cf2:	85 ff       	sbrs	r24, 5
     cf4:	fc cf       	rjmp	.-8      	; 0xcee <uart1_putc+0xc>
}
     cf6:	08 95       	ret

00000cf8 <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
     cf8:	fc 01       	movw	r30, r24
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
     cfa:	90 81       	ld	r25, Z
     cfc:	99 23       	and	r25, r25
     cfe:	49 f0       	breq	.+18     	; 0xd12 <uart_puts+0x1a>
     d00:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     d02:	5d 9b       	sbis	0x0b, 5	; 11
     d04:	fe cf       	rjmp	.-4      	; 0xd02 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
     d06:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     d08:	5d 9b       	sbis	0x0b, 5	; 11
     d0a:	fe cf       	rjmp	.-4      	; 0xd08 <uart_puts+0x10>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
     d0c:	91 91       	ld	r25, Z+
     d0e:	91 11       	cpse	r25, r1
     d10:	f8 cf       	rjmp	.-16     	; 0xd02 <uart_puts+0xa>
     d12:	08 95       	ret

00000d14 <uart1_puts>:
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
     d14:	fc 01       	movw	r30, r24
     d16:	20 81       	ld	r18, Z
     d18:	22 23       	and	r18, r18
     d1a:	71 f0       	breq	.+28     	; 0xd38 <uart1_puts+0x24>
     d1c:	31 96       	adiw	r30, 0x01	; 1
//                        uart1_putc
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data) {
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
     d1e:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     d22:	95 ff       	sbrs	r25, 5
     d24:	fc cf       	rjmp	.-8      	; 0xd1e <uart1_puts+0xa>
    UDR1 = data;    // Send data byte
     d26:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    while (!(UCSR1A&(1<<UDRE1)));    // Wait for previous transmissions
     d2a:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     d2e:	95 ff       	sbrs	r25, 5
     d30:	fc cf       	rjmp	.-8      	; 0xd2a <uart1_puts+0x16>
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str) {
    int i = 0;               
    // Loop through string, sending each character
    while(str[i] != '\0') { 
     d32:	21 91       	ld	r18, Z+
     d34:	21 11       	cpse	r18, r1
     d36:	f3 cf       	rjmp	.-26     	; 0xd1e <uart1_puts+0xa>
     d38:	08 95       	ret

00000d3a <uart_puts_p>:
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
     d3a:	9c 01       	movw	r18, r24
     d3c:	fc 01       	movw	r30, r24
     d3e:	44 91       	lpm	r20, Z
     d40:	44 23       	and	r20, r20
     d42:	69 f0       	breq	.+26     	; 0xd5e <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
     d44:	01 96       	adiw	r24, 0x01	; 1
     d46:	f9 01       	movw	r30, r18
     d48:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     d4a:	5d 9b       	sbis	0x0b, 5	; 11
     d4c:	fe cf       	rjmp	.-4      	; 0xd4a <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
     d4e:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
     d50:	5d 9b       	sbis	0x0b, 5	; 11
     d52:	fe cf       	rjmp	.-4      	; 0xd50 <uart_puts_p+0x16>
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {      
    // Loop through string, sending each character
    while(pgm_read_byte(str) != 0x00) { 
     d54:	9c 01       	movw	r18, r24
     d56:	fc 01       	movw	r30, r24
     d58:	44 91       	lpm	r20, Z
     d5a:	41 11       	cpse	r20, r1
     d5c:	f3 cf       	rjmp	.-26     	; 0xd44 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
     d5e:	08 95       	ret

00000d60 <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //INTERRUPTS ENABLED
     d60:	8a b1       	in	r24, 0x0a	; 10
     d62:	88 69       	ori	r24, 0x98	; 152
     d64:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
     d66:	e5 e9       	ldi	r30, 0x95	; 149
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	86 60       	ori	r24, 0x06	; 6
     d6e:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
     d70:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
     d74:	87 e6       	ldi	r24, 0x67	; 103
     d76:	89 b9       	out	0x09, r24	; 9
     d78:	08 95       	ret

00000d7a <uart1_init>:
//must be in place for the MAX232 chip to get data.

void uart1_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
//UCSR1B |= (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1); //INTERRUPTS ENABLED
  UCSR1B |= (1<<RXEN1) | (1<<TXEN1);               //INTERRUPS DISABLED
     d7a:	ea e9       	ldi	r30, 0x9A	; 154
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	88 61       	ori	r24, 0x18	; 24
     d82:	80 83       	st	Z, r24

//async operation, no parity,  one stop bit, 8-bit characters
  UCSR1C |= (1<<UCSZ11) | (1<<UCSZ10);
     d84:	ed e9       	ldi	r30, 0x9D	; 157
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	86 60       	ori	r24, 0x06	; 6
     d8c:	80 83       	st	Z, r24
  UBRR1H = (BAUDVALUE_1 >>8 ); //load upper byte of the baud rate into UBRR 
     d8e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  UBRR1L =  BAUDVALUE_1;       //load lower byte of the baud rate into UBRR 
     d92:	87 e6       	ldi	r24, 0x67	; 103
     d94:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     d98:	08 95       	ret

00000d9a <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
     d9a:	80 e8       	ldi	r24, 0x80	; 128
     d9c:	9e e3       	ldi	r25, 0x3E	; 62
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <uart_getc+0xa>
     da0:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
     da2:	21 f0       	breq	.+8      	; 0xdac <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
     da4:	5f 9b       	sbis	0x0b, 7	; 11
     da6:	fc cf       	rjmp	.-8      	; 0xda0 <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
     da8:	8c b1       	in	r24, 0x0c	; 12
     daa:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
     dac:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
     dae:	08 95       	ret

00000db0 <uart1_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
     db0:	80 e8       	ldi	r24, 0x80	; 128
     db2:	9e e3       	ldi	r25, 0x3E	; 62
     db4:	02 c0       	rjmp	.+4      	; 0xdba <uart1_getc+0xa>
     db6:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
     db8:	39 f0       	breq	.+14     	; 0xdc8 <uart1_getc+0x18>
//Modified to not block indefinately in the case of a lost byte
//
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
     dba:	20 91 9b 00 	lds	r18, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     dbe:	27 ff       	sbrs	r18, 7
     dc0:	fa cf       	rjmp	.-12     	; 0xdb6 <uart1_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
     dc2:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     dc6:	08 95       	ret
char uart1_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR1A & (1<<RXC1))) {
  timer++;
  if(timer >= 16000){ return(0);}
     dc8:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR1); //return the received data
}
     dca:	08 95       	ret

00000dcc <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	81 11       	cpse	r24, r1
     dd0:	01 c0       	rjmp	.+2      	; 0xdd4 <send_lcd+0x8>
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     dd6:	77 9b       	sbis	0x0e, 7	; 14
     dd8:	fe cf       	rjmp	.-4      	; 0xdd6 <send_lcd+0xa>
  SPDR = byte;                        //send payload
     dda:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ddc:	77 9b       	sbis	0x0e, 7	; 14
     dde:	fe cf       	rjmp	.-4      	; 0xddc <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     de0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     de4:	88 60       	ori	r24, 0x08	; 8
     de6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     dee:	87 7f       	andi	r24, 0xF7	; 247
     df0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     df4:	08 95       	ret

00000df6 <refresh_lcd>:
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;
     df6:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <i.2094>
     dfa:	82 0f       	add	r24, r18
     dfc:	91 1d       	adc	r25, r1
     dfe:	fc 01       	movw	r30, r24
     e00:	80 81       	ld	r24, Z
     e02:	81 11       	cpse	r24, r1
     e04:	1f c0       	rjmp	.+62     	; 0xe44 <refresh_lcd+0x4e>
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <null_flag.2095>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e10:	77 9b       	sbis	0x0e, 7	; 14
     e12:	fe cf       	rjmp	.-4      	; 0xe10 <refresh_lcd+0x1a>
  SPDR = byte;                        //send payload
     e14:	80 e2       	ldi	r24, 0x20	; 32
     e16:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e18:	77 9b       	sbis	0x0e, 7	; 14
     e1a:	fe cf       	rjmp	.-4      	; 0xe18 <refresh_lcd+0x22>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e1c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e20:	88 60       	ori	r24, 0x08	; 8
     e22:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e26:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e2a:	87 7f       	andi	r24, 0xF7	; 247
     e2c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
  else send_lcd(CHAR_BYTE,lcd_string_array[i]);

  i++;   //increment to next character
     e30:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <i.2094>
     e34:	8f 5f       	subi	r24, 0xFF	; 255
     e36:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <i.2094>

  //delays are inserted to allow character to be written before moving
  //the cursor to the next line.
  if(i == 16)
     e3a:	80 31       	cpi	r24, 0x10	; 16
     e3c:	49 f1       	breq	.+82     	; 0xe90 <refresh_lcd+0x9a>
  {
      // goto line2, 1st char
      _delay_us(40);
      line2_col1();
  }
  else if(i == 32)
     e3e:	80 32       	cpi	r24, 0x20	; 32
     e40:	69 f0       	breq	.+26     	; 0xe5c <refresh_lcd+0x66>
     e42:	08 95       	ret
  static uint8_t null_flag=0;   // end of string flag

  if(lcd_string_array[i] == '\0') null_flag = 1;

  // if a null terminator is found clear the rest of the display
  if(null_flag) send_lcd(CHAR_BYTE, ' ');
     e44:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <null_flag.2095>
     e48:	91 11       	cpse	r25, r1
     e4a:	e0 cf       	rjmp	.-64     	; 0xe0c <refresh_lcd+0x16>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e50:	77 9b       	sbis	0x0e, 7	; 14
     e52:	fe cf       	rjmp	.-4      	; 0xe50 <refresh_lcd+0x5a>
  SPDR = byte;                        //send payload
     e54:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e56:	77 9b       	sbis	0x0e, 7	; 14
     e58:	fe cf       	rjmp	.-4      	; 0xe56 <refresh_lcd+0x60>
     e5a:	e0 cf       	rjmp	.-64     	; 0xe1c <refresh_lcd+0x26>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e5c:	85 ed       	ldi	r24, 0xD5	; 213
     e5e:	8a 95       	dec	r24
     e60:	f1 f7       	brne	.-4      	; 0xe5e <refresh_lcd+0x68>
     e62:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e64:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e66:	77 9b       	sbis	0x0e, 7	; 14
     e68:	fe cf       	rjmp	.-4      	; 0xe66 <refresh_lcd+0x70>
  SPDR = byte;                        //send payload
     e6a:	80 e8       	ldi	r24, 0x80	; 128
     e6c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e6e:	77 9b       	sbis	0x0e, 7	; 14
     e70:	fe cf       	rjmp	.-4      	; 0xe6e <refresh_lcd+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e72:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e76:	88 60       	ori	r24, 0x08	; 8
     e78:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e7c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e80:	87 7f       	andi	r24, 0xF7	; 247
     e82:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  else if(i == 32)
  {
      // goto line1, 1st char
      _delay_us(40);
      line1_col1();
      null_flag=0;
     e86:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <null_flag.2095>
      i=0;
     e8a:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <i.2094>
     e8e:	08 95       	ret
     e90:	f5 ed       	ldi	r31, 0xD5	; 213
     e92:	fa 95       	dec	r31
     e94:	f1 f7       	brne	.-4      	; 0xe92 <refresh_lcd+0x9c>
     e96:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e98:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e9a:	77 9b       	sbis	0x0e, 7	; 14
     e9c:	fe cf       	rjmp	.-4      	; 0xe9a <refresh_lcd+0xa4>
  SPDR = byte;                        //send payload
     e9e:	80 ec       	ldi	r24, 0xC0	; 192
     ea0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ea2:	77 9b       	sbis	0x0e, 7	; 14
     ea4:	fe cf       	rjmp	.-4      	; 0xea2 <refresh_lcd+0xac>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ea6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     eaa:	88 60       	ori	r24, 0x08	; 8
     eac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     eb0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     eb4:	87 7f       	andi	r24, 0xF7	; 247
     eb6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     eba:	08 95       	ret

00000ebc <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     ebc:	66 0f       	add	r22, r22
     ebe:	66 0f       	add	r22, r22
     ec0:	66 0f       	add	r22, r22
     ec2:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ec4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ec6:	77 9b       	sbis	0x0e, 7	; 14
     ec8:	fe cf       	rjmp	.-4      	; 0xec6 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
     eca:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ecc:	77 9b       	sbis	0x0e, 7	; 14
     ece:	fe cf       	rjmp	.-4      	; 0xecc <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ed0:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ed4:	28 60       	ori	r18, 0x08	; 8
     ed6:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     eda:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ede:	27 7f       	andi	r18, 0xF7	; 247
     ee0:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ee4:	25 ed       	ldi	r18, 0xD5	; 213
     ee6:	2a 95       	dec	r18
     ee8:	f1 f7       	brne	.-4      	; 0xee6 <set_custom_character+0x2a>
     eea:	00 00       	nop
     eec:	fc 01       	movw	r30, r24
     eee:	9c 01       	movw	r18, r24
     ef0:	28 5f       	subi	r18, 0xF8	; 248
     ef2:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ef4:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     ef6:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ef8:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     efa:	77 9b       	sbis	0x0e, 7	; 14
     efc:	fe cf       	rjmp	.-4      	; 0xefa <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
     efe:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f00:	77 9b       	sbis	0x0e, 7	; 14
     f02:	fe cf       	rjmp	.-4      	; 0xf00 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f04:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f08:	88 60       	ori	r24, 0x08	; 8
     f0a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f0e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f12:	87 7f       	andi	r24, 0xF7	; 247
     f14:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f18:	85 ed       	ldi	r24, 0xD5	; 213
     f1a:	8a 95       	dec	r24
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <set_custom_character+0x5e>
     f1e:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     f20:	e2 17       	cp	r30, r18
     f22:	f3 07       	cpc	r31, r19
     f24:	41 f7       	brne	.-48     	; 0xef6 <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     f26:	08 95       	ret

00000f28 <set_cursor>:
//                          set_cursor
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     f28:	90 e4       	ldi	r25, 0x40	; 64
     f2a:	89 9f       	mul	r24, r25
     f2c:	60 0d       	add	r22, r0
     f2e:	11 24       	eor	r1, r1
     f30:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f32:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f34:	77 9b       	sbis	0x0e, 7	; 14
     f36:	fe cf       	rjmp	.-4      	; 0xf34 <set_cursor+0xc>
  SPDR = byte;                        //send payload
     f38:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f3a:	77 9b       	sbis	0x0e, 7	; 14
     f3c:	fe cf       	rjmp	.-4      	; 0xf3a <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f3e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f42:	88 60       	ori	r24, 0x08	; 8
     f44:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f48:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f4c:	87 7f       	andi	r24, 0xF7	; 247
     f4e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f52:	08 95       	ret

00000f54 <uint2lcd>:
//not displayed.
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     f54:	81 11       	cpse	r24, r1
     f56:	13 c0       	rjmp	.+38     	; 0xf7e <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f5c:	77 9b       	sbis	0x0e, 7	; 14
     f5e:	fe cf       	rjmp	.-4      	; 0xf5c <uint2lcd+0x8>
  SPDR = byte;                        //send payload
     f60:	80 e3       	ldi	r24, 0x30	; 48
     f62:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f64:	77 9b       	sbis	0x0e, 7	; 14
     f66:	fe cf       	rjmp	.-4      	; 0xf64 <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f68:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f6c:	88 60       	ori	r24, 0x08	; 8
     f6e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f72:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f76:	87 7f       	andi	r24, 0xF7	; 247
     f78:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f7c:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     f7e:	84 36       	cpi	r24, 0x64	; 100
     f80:	b0 f4       	brcc	.+44     	; 0xfae <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     f82:	8a 30       	cpi	r24, 0x0A	; 10
     f84:	60 f5       	brcc	.+88     	; 0xfde <uint2lcd+0x8a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f86:	91 e0       	ldi	r25, 0x01	; 1
     f88:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f8a:	77 9b       	sbis	0x0e, 7	; 14
     f8c:	fe cf       	rjmp	.-4      	; 0xf8a <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     f8e:	9d ec       	ldi	r25, 0xCD	; 205
     f90:	89 9f       	mul	r24, r25
     f92:	91 2d       	mov	r25, r1
     f94:	11 24       	eor	r1, r1
     f96:	96 95       	lsr	r25
     f98:	96 95       	lsr	r25
     f9a:	96 95       	lsr	r25
     f9c:	2a e0       	ldi	r18, 0x0A	; 10
     f9e:	92 9f       	mul	r25, r18
     fa0:	80 19       	sub	r24, r0
     fa2:	11 24       	eor	r1, r1
     fa4:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     fa6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     fa8:	77 9b       	sbis	0x0e, 7	; 14
     faa:	fe cf       	rjmp	.-4      	; 0xfa8 <uint2lcd+0x54>
     fac:	dd cf       	rjmp	.-70     	; 0xf68 <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     fae:	99 e2       	ldi	r25, 0x29	; 41
     fb0:	89 9f       	mul	r24, r25
     fb2:	91 2d       	mov	r25, r1
     fb4:	11 24       	eor	r1, r1
     fb6:	92 95       	swap	r25
     fb8:	9f 70       	andi	r25, 0x0F	; 15
     fba:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     fbc:	21 e0       	ldi	r18, 0x01	; 1
     fbe:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     fc0:	77 9b       	sbis	0x0e, 7	; 14
     fc2:	fe cf       	rjmp	.-4      	; 0xfc0 <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
     fc4:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     fc6:	77 9b       	sbis	0x0e, 7	; 14
     fc8:	fe cf       	rjmp	.-4      	; 0xfc6 <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     fca:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fce:	98 60       	ori	r25, 0x08	; 8
     fd0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fd4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     fd8:	97 7f       	andi	r25, 0xF7	; 247
     fda:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     fde:	99 e2       	ldi	r25, 0x29	; 41
     fe0:	89 9f       	mul	r24, r25
     fe2:	91 2d       	mov	r25, r1
     fe4:	11 24       	eor	r1, r1
     fe6:	92 95       	swap	r25
     fe8:	9f 70       	andi	r25, 0x0F	; 15
     fea:	38 2f       	mov	r19, r24
     fec:	24 e6       	ldi	r18, 0x64	; 100
     fee:	92 9f       	mul	r25, r18
     ff0:	30 19       	sub	r19, r0
     ff2:	11 24       	eor	r1, r1
     ff4:	2d ec       	ldi	r18, 0xCD	; 205
     ff6:	32 9f       	mul	r19, r18
     ff8:	91 2d       	mov	r25, r1
     ffa:	11 24       	eor	r1, r1
     ffc:	96 95       	lsr	r25
     ffe:	96 95       	lsr	r25
    1000:	96 95       	lsr	r25
    1002:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1004:	21 e0       	ldi	r18, 0x01	; 1
    1006:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1008:	77 9b       	sbis	0x0e, 7	; 14
    100a:	fe cf       	rjmp	.-4      	; 0x1008 <uint2lcd+0xb4>
  SPDR = byte;                        //send payload
    100c:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    100e:	77 9b       	sbis	0x0e, 7	; 14
    1010:	fe cf       	rjmp	.-4      	; 0x100e <uint2lcd+0xba>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1012:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1016:	98 60       	ori	r25, 0x08	; 8
    1018:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    101c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1020:	97 7f       	andi	r25, 0xF7	; 247
    1022:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1026:	af cf       	rjmp	.-162    	; 0xf86 <uint2lcd+0x32>

00001028 <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
    1028:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
    102a:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    102e:	91 e0       	ldi	r25, 0x01	; 1
    1030:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1032:	77 9b       	sbis	0x0e, 7	; 14
    1034:	fe cf       	rjmp	.-4      	; 0x1032 <int2lcd+0xa>
  SPDR = byte;                        //send payload
    1036:	9d e2       	ldi	r25, 0x2D	; 45
    1038:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    103a:	77 9b       	sbis	0x0e, 7	; 14
    103c:	fe cf       	rjmp	.-4      	; 0x103a <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    103e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1042:	98 60       	ori	r25, 0x08	; 8
    1044:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1048:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    104c:	97 7f       	andi	r25, 0xF7	; 247
    104e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1052:	95 ed       	ldi	r25, 0xD5	; 213
    1054:	9a 95       	dec	r25
    1056:	f1 f7       	brne	.-4      	; 0x1054 <int2lcd+0x2c>
    1058:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}
    105a:	81 95       	neg	r24
    105c:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <uint2lcd>

00001060 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1060:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1062:	77 9b       	sbis	0x0e, 7	; 14
    1064:	fe cf       	rjmp	.-4      	; 0x1062 <cursor_on+0x2>
  SPDR = byte;                        //send payload
    1066:	8e e0       	ldi	r24, 0x0E	; 14
    1068:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    106a:	77 9b       	sbis	0x0e, 7	; 14
    106c:	fe cf       	rjmp	.-4      	; 0x106a <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    106e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1072:	88 60       	ori	r24, 0x08	; 8
    1074:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1078:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    107c:	87 7f       	andi	r24, 0xF7	; 247
    107e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1082:	08 95       	ret

00001084 <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1084:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1086:	77 9b       	sbis	0x0e, 7	; 14
    1088:	fe cf       	rjmp	.-4      	; 0x1086 <cursor_off+0x2>
  SPDR = byte;                        //send payload
    108a:	8c e0       	ldi	r24, 0x0C	; 12
    108c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    108e:	77 9b       	sbis	0x0e, 7	; 14
    1090:	fe cf       	rjmp	.-4      	; 0x108e <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1092:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1096:	88 60       	ori	r24, 0x08	; 8
    1098:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    109c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10a0:	87 7f       	andi	r24, 0xF7	; 247
    10a2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10a6:	08 95       	ret

000010a8 <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    10a8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10aa:	77 9b       	sbis	0x0e, 7	; 14
    10ac:	fe cf       	rjmp	.-4      	; 0x10aa <shift_right+0x2>
  SPDR = byte;                        //send payload
    10ae:	8e e1       	ldi	r24, 0x1E	; 30
    10b0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10b2:	77 9b       	sbis	0x0e, 7	; 14
    10b4:	fe cf       	rjmp	.-4      	; 0x10b2 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    10b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10ba:	88 60       	ori	r24, 0x08	; 8
    10bc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10c0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10c4:	87 7f       	andi	r24, 0xF7	; 247
    10c6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10ca:	08 95       	ret

000010cc <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    10cc:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10ce:	77 9b       	sbis	0x0e, 7	; 14
    10d0:	fe cf       	rjmp	.-4      	; 0x10ce <shift_left+0x2>
  SPDR = byte;                        //send payload
    10d2:	88 e1       	ldi	r24, 0x18	; 24
    10d4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    10d6:	77 9b       	sbis	0x0e, 7	; 14
    10d8:	fe cf       	rjmp	.-4      	; 0x10d6 <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    10da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10de:	88 60       	ori	r24, 0x08	; 8
    10e0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10e4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10e8:	87 7f       	andi	r24, 0xF7	; 247
    10ea:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    10ee:	08 95       	ret

000010f0 <strobe_lcd>:
    10f0:	e2 e6       	ldi	r30, 0x62	; 98
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	88 60       	ori	r24, 0x08	; 8
    10f8:	80 83       	st	Z, r24
    10fa:	80 81       	ld	r24, Z
    10fc:	87 7f       	andi	r24, 0xF7	; 247
    10fe:	80 83       	st	Z, r24
    1100:	08 95       	ret

00001102 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1102:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1104:	77 9b       	sbis	0x0e, 7	; 14
    1106:	fe cf       	rjmp	.-4      	; 0x1104 <clear_display+0x2>
  SPDR = byte;                        //send payload
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    110c:	77 9b       	sbis	0x0e, 7	; 14
    110e:	fe cf       	rjmp	.-4      	; 0x110c <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1110:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1114:	88 60       	ori	r24, 0x08	; 8
    1116:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    111a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    111e:	87 7f       	andi	r24, 0xF7	; 247
    1120:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1124:	8f e1       	ldi	r24, 0x1F	; 31
    1126:	9c e1       	ldi	r25, 0x1C	; 28
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	f1 f7       	brne	.-4      	; 0x1128 <clear_display+0x26>
    112c:	00 c0       	rjmp	.+0      	; 0x112e <clear_display+0x2c>
    112e:	00 00       	nop
    1130:	08 95       	ret

00001132 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1132:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1134:	77 9b       	sbis	0x0e, 7	; 14
    1136:	fe cf       	rjmp	.-4      	; 0x1134 <cursor_home+0x2>
  SPDR = byte;                        //send payload
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    113c:	77 9b       	sbis	0x0e, 7	; 14
    113e:	fe cf       	rjmp	.-4      	; 0x113c <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1140:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1144:	88 60       	ori	r24, 0x08	; 8
    1146:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    114a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    114e:	87 7f       	andi	r24, 0xF7	; 247
    1150:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1154:	8f e6       	ldi	r24, 0x6F	; 111
    1156:	97 e1       	ldi	r25, 0x17	; 23
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <cursor_home+0x26>
    115c:	00 c0       	rjmp	.+0      	; 0x115e <cursor_home+0x2c>
    115e:	00 00       	nop
    1160:	08 95       	ret

00001162 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1162:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1164:	77 9b       	sbis	0x0e, 7	; 14
    1166:	fe cf       	rjmp	.-4      	; 0x1164 <line2_col1+0x2>
  SPDR = byte;                        //send payload
    1168:	80 ec       	ldi	r24, 0xC0	; 192
    116a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    116c:	77 9b       	sbis	0x0e, 7	; 14
    116e:	fe cf       	rjmp	.-4      	; 0x116c <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1170:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1174:	88 60       	ori	r24, 0x08	; 8
    1176:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    117a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    117e:	87 7f       	andi	r24, 0xF7	; 247
    1180:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1184:	08 95       	ret

00001186 <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1186:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1188:	77 9b       	sbis	0x0e, 7	; 14
    118a:	fe cf       	rjmp	.-4      	; 0x1188 <line1_col1+0x2>
  SPDR = byte;                        //send payload
    118c:	80 e8       	ldi	r24, 0x80	; 128
    118e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1190:	77 9b       	sbis	0x0e, 7	; 14
    1192:	fe cf       	rjmp	.-4      	; 0x1190 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1194:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1198:	88 60       	ori	r24, 0x08	; 8
    119a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    119e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11a2:	87 7f       	andi	r24, 0xF7	; 247
    11a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11a8:	08 95       	ret

000011aa <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
    11aa:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    11ac:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
    11ae:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    11b0:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11b2:	77 9b       	sbis	0x0e, 7	; 14
    11b4:	fe cf       	rjmp	.-4      	; 0x11b2 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
    11b6:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11b8:	77 9b       	sbis	0x0e, 7	; 14
    11ba:	fe cf       	rjmp	.-4      	; 0x11b8 <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    11bc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11c0:	88 60       	ori	r24, 0x08	; 8
    11c2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11ca:	87 7f       	andi	r24, 0xF7	; 247
    11cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11d0:	85 ed       	ldi	r24, 0xD5	; 213
    11d2:	8a 95       	dec	r24
    11d4:	f1 f7       	brne	.-4      	; 0x11d2 <fill_spaces+0x28>
    11d6:	00 00       	nop
    11d8:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
    11da:	51 f7       	brne	.-44     	; 0x11b0 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ');
                _delay_us(40);  //40us wait between characters
	}
}
    11dc:	08 95       	ret

000011de <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11e2:	77 9b       	sbis	0x0e, 7	; 14
    11e4:	fe cf       	rjmp	.-4      	; 0x11e2 <char2lcd+0x4>
  SPDR = byte;                        //send payload
    11e6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    11e8:	77 9b       	sbis	0x0e, 7	; 14
    11ea:	fe cf       	rjmp	.-4      	; 0x11e8 <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    11ec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11f0:	88 60       	ori	r24, 0x08	; 8
    11f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    11fa:	87 7f       	andi	r24, 0xF7	; 247
    11fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1200:	08 95       	ret

00001202 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
    1202:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    1204:	40 e0       	ldi	r20, 0x00	; 0
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    120a:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    120c:	df 01       	movw	r26, r30
    120e:	a4 0f       	add	r26, r20
    1210:	b5 1f       	adc	r27, r21
    1212:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1214:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1216:	77 9b       	sbis	0x0e, 7	; 14
    1218:	fe cf       	rjmp	.-4      	; 0x1216 <string2lcd+0x14>
  SPDR = byte;                        //send payload
    121a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    121c:	77 9b       	sbis	0x0e, 7	; 14
    121e:	fe cf       	rjmp	.-4      	; 0x121c <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1220:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1224:	98 60       	ori	r25, 0x08	; 8
    1226:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    122a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    122e:	97 7f       	andi	r25, 0xF7	; 247
    1230:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1234:	85 ed       	ldi	r24, 0xD5	; 213
    1236:	8a 95       	dec	r24
    1238:	f1 f7       	brne	.-4      	; 0x1236 <string2lcd+0x34>
    123a:	00 00       	nop
//                            string2lcd
//
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    123c:	6f 5f       	subi	r22, 0xFF	; 255
    123e:	46 2f       	mov	r20, r22
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	df 01       	movw	r26, r30
    1244:	0d 90       	ld	r0, X+
    1246:	00 20       	and	r0, r0
    1248:	e9 f7       	brne	.-6      	; 0x1244 <string2lcd+0x42>
    124a:	9d 01       	movw	r18, r26
    124c:	2e 1b       	sub	r18, r30
    124e:	3f 0b       	sbc	r19, r31
    1250:	22 50       	subi	r18, 0x02	; 2
    1252:	31 09       	sbc	r19, r1
    1254:	24 17       	cp	r18, r20
    1256:	35 07       	cpc	r19, r21
    1258:	c8 f6       	brcc	.-78     	; 0x120c <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }
}
    125a:	08 95       	ret

0000125c <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    125c:	8f ef       	ldi	r24, 0xFF	; 255
    125e:	99 ef       	ldi	r25, 0xF9	; 249
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	f1 f7       	brne	.-4      	; 0x1260 <lcd_init+0x4>
    1264:	00 c0       	rjmp	.+0      	; 0x1266 <lcd_init+0xa>
    1266:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
    1268:	88 e0       	ldi	r24, 0x08	; 8
    126a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    126e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1270:	77 9b       	sbis	0x0e, 7	; 14
    1272:	fe cf       	rjmp	.-4      	; 0x1270 <lcd_init+0x14>
  SPDR = byte;                        //send payload
    1274:	80 e3       	ldi	r24, 0x30	; 48
    1276:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1278:	77 9b       	sbis	0x0e, 7	; 14
    127a:	fe cf       	rjmp	.-4      	; 0x1278 <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    127c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1280:	88 60       	ori	r24, 0x08	; 8
    1282:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1286:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    128a:	87 7f       	andi	r24, 0xF7	; 247
    128c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1290:	8f e5       	ldi	r24, 0x5F	; 95
    1292:	9d e6       	ldi	r25, 0x6D	; 109
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	f1 f7       	brne	.-4      	; 0x1294 <lcd_init+0x38>
    1298:	00 c0       	rjmp	.+0      	; 0x129a <lcd_init+0x3e>
    129a:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    129c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    129e:	77 9b       	sbis	0x0e, 7	; 14
    12a0:	fe cf       	rjmp	.-4      	; 0x129e <lcd_init+0x42>
  SPDR = byte;                        //send payload
    12a2:	80 e3       	ldi	r24, 0x30	; 48
    12a4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12a6:	77 9b       	sbis	0x0e, 7	; 14
    12a8:	fe cf       	rjmp	.-4      	; 0x12a6 <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    12aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12ae:	88 60       	ori	r24, 0x08	; 8
    12b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12b4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12b8:	87 7f       	andi	r24, 0xF7	; 247
    12ba:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12be:	8f e5       	ldi	r24, 0x5F	; 95
    12c0:	9d e6       	ldi	r25, 0x6D	; 109
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	f1 f7       	brne	.-4      	; 0x12c2 <lcd_init+0x66>
    12c6:	00 c0       	rjmp	.+0      	; 0x12c8 <lcd_init+0x6c>
    12c8:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    12ca:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12cc:	77 9b       	sbis	0x0e, 7	; 14
    12ce:	fe cf       	rjmp	.-4      	; 0x12cc <lcd_init+0x70>
  SPDR = byte;                        //send payload
    12d0:	80 e3       	ldi	r24, 0x30	; 48
    12d2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12d4:	77 9b       	sbis	0x0e, 7	; 14
    12d6:	fe cf       	rjmp	.-4      	; 0x12d4 <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    12d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12dc:	88 60       	ori	r24, 0x08	; 8
    12de:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12e2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12e6:	87 7f       	andi	r24, 0xF7	; 247
    12e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    12ec:	8f e5       	ldi	r24, 0x5F	; 95
    12ee:	9d e6       	ldi	r25, 0x6D	; 109
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	f1 f7       	brne	.-4      	; 0x12f0 <lcd_init+0x94>
    12f4:	00 c0       	rjmp	.+0      	; 0x12f6 <lcd_init+0x9a>
    12f6:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    12f8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    12fa:	77 9b       	sbis	0x0e, 7	; 14
    12fc:	fe cf       	rjmp	.-4      	; 0x12fa <lcd_init+0x9e>
  SPDR = byte;                        //send payload
    12fe:	88 e3       	ldi	r24, 0x38	; 56
    1300:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1302:	77 9b       	sbis	0x0e, 7	; 14
    1304:	fe cf       	rjmp	.-4      	; 0x1302 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1306:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    130a:	88 60       	ori	r24, 0x08	; 8
    130c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1310:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1314:	87 7f       	andi	r24, 0xF7	; 247
    1316:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    131a:	8f e1       	ldi	r24, 0x1F	; 31
    131c:	9e e4       	ldi	r25, 0x4E	; 78
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	f1 f7       	brne	.-4      	; 0x131e <lcd_init+0xc2>
    1322:	00 c0       	rjmp	.+0      	; 0x1324 <lcd_init+0xc8>
    1324:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1326:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1328:	77 9b       	sbis	0x0e, 7	; 14
    132a:	fe cf       	rjmp	.-4      	; 0x1328 <lcd_init+0xcc>
  SPDR = byte;                        //send payload
    132c:	88 e0       	ldi	r24, 0x08	; 8
    132e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1330:	77 9b       	sbis	0x0e, 7	; 14
    1332:	fe cf       	rjmp	.-4      	; 0x1330 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1334:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1338:	88 60       	ori	r24, 0x08	; 8
    133a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    133e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1342:	87 7f       	andi	r24, 0xF7	; 247
    1344:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1348:	8f e1       	ldi	r24, 0x1F	; 31
    134a:	9e e4       	ldi	r25, 0x4E	; 78
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <lcd_init+0xf0>
    1350:	00 c0       	rjmp	.+0      	; 0x1352 <lcd_init+0xf6>
    1352:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1354:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1356:	77 9b       	sbis	0x0e, 7	; 14
    1358:	fe cf       	rjmp	.-4      	; 0x1356 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    135e:	77 9b       	sbis	0x0e, 7	; 14
    1360:	fe cf       	rjmp	.-4      	; 0x135e <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1362:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1366:	88 60       	ori	r24, 0x08	; 8
    1368:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    136c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1370:	87 7f       	andi	r24, 0xF7	; 247
    1372:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1376:	8f e1       	ldi	r24, 0x1F	; 31
    1378:	9e e4       	ldi	r25, 0x4E	; 78
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <lcd_init+0x11e>
    137e:	00 c0       	rjmp	.+0      	; 0x1380 <lcd_init+0x124>
    1380:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1382:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1384:	77 9b       	sbis	0x0e, 7	; 14
    1386:	fe cf       	rjmp	.-4      	; 0x1384 <lcd_init+0x128>
  SPDR = byte;                        //send payload
    1388:	86 e0       	ldi	r24, 0x06	; 6
    138a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    138c:	77 9b       	sbis	0x0e, 7	; 14
    138e:	fe cf       	rjmp	.-4      	; 0x138c <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1390:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1394:	88 60       	ori	r24, 0x08	; 8
    1396:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    139a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    139e:	87 7f       	andi	r24, 0xF7	; 247
    13a0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13a4:	8f e1       	ldi	r24, 0x1F	; 31
    13a6:	9e e4       	ldi	r25, 0x4E	; 78
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <lcd_init+0x14c>
    13ac:	00 c0       	rjmp	.+0      	; 0x13ae <lcd_init+0x152>
    13ae:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    13b0:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    13b2:	77 9b       	sbis	0x0e, 7	; 14
    13b4:	fe cf       	rjmp	.-4      	; 0x13b2 <lcd_init+0x156>
  SPDR = byte;                        //send payload
    13b6:	8c e0       	ldi	r24, 0x0C	; 12
    13b8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    13ba:	77 9b       	sbis	0x0e, 7	; 14
    13bc:	fe cf       	rjmp	.-4      	; 0x13ba <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    13be:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13c2:	88 60       	ori	r24, 0x08	; 8
    13c4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13c8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13cc:	87 7f       	andi	r24, 0xF7	; 247
    13ce:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    13d2:	8f e1       	ldi	r24, 0x1F	; 31
    13d4:	9e e4       	ldi	r25, 0x4E	; 78
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	f1 f7       	brne	.-4      	; 0x13d6 <lcd_init+0x17a>
    13da:	00 c0       	rjmp	.+0      	; 0x13dc <lcd_init+0x180>
    13dc:	00 00       	nop
    13de:	08 95       	ret

000013e0 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    13e0:	4f 92       	push	r4
    13e2:	5f 92       	push	r5
    13e4:	6f 92       	push	r6
    13e6:	7f 92       	push	r7
    13e8:	8f 92       	push	r8
    13ea:	9f 92       	push	r9
    13ec:	af 92       	push	r10
    13ee:	bf 92       	push	r11
    13f0:	cf 92       	push	r12
    13f2:	df 92       	push	r13
    13f4:	ef 92       	push	r14
    13f6:	ff 92       	push	r15
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	69 97       	sbiw	r28, 0x19	; 25
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	14 2f       	mov	r17, r20
    1412:	42 2e       	mov	r4, r18
    1414:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient

      if (bSigned){
    1416:	00 23       	and	r16, r16
    1418:	79 f0       	breq	.+30     	; 0x1438 <lcd_int32+0x58>
        bSigned = (qr.quot<0);
    141a:	6b 01       	movw	r12, r22
    141c:	7c 01       	movw	r14, r24
    141e:	cc 24       	eor	r12, r12
    1420:	f7 fc       	sbrc	r15, 7
    1422:	c3 94       	inc	r12
    1424:	dd 24       	eor	r13, r13
    1426:	ee 24       	eor	r14, r14
    1428:	ff 24       	eor	r15, r15
    142a:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
    142c:	6b 01       	movw	r12, r22
    142e:	7c 01       	movw	r14, r24
    1430:	97 fd       	sbrc	r25, 7
    1432:	a3 c0       	rjmp	.+326    	; 0x157a <lcd_int32+0x19a>
    1434:	c7 01       	movw	r24, r14
    1436:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point
      if (decpos){
    1438:	44 20       	and	r4, r4
    143a:	09 f4       	brne	.+2      	; 0x143e <lcd_int32+0x5e>
    143c:	96 c0       	rjmp	.+300    	; 0x156a <lcd_int32+0x18a>
    143e:	9e 01       	movw	r18, r28
    1440:	2f 5f       	subi	r18, 0xFF	; 255
    1442:	3f 4f       	sbci	r19, 0xFF	; 255
    1444:	59 01       	movw	r10, r18
    1446:	49 01       	movw	r8, r18
    1448:	66 24       	eor	r6, r6
    144a:	6a 94       	dec	r6
    144c:	64 0c       	add	r6, r4
    144e:	71 2c       	mov	r7, r1
    1450:	3f ef       	ldi	r19, 0xFF	; 255
    1452:	63 1a       	sub	r6, r19
    1454:	73 0a       	sbc	r7, r19
    1456:	6a 0c       	add	r6, r10
    1458:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    145a:	2a e0       	ldi	r18, 0x0A	; 10
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	40 e0       	ldi	r20, 0x00	; 0
    1460:	50 e0       	ldi	r21, 0x00	; 0
    1462:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__divmodsi4>
    1466:	e6 2f       	mov	r30, r22
    1468:	2a 8b       	std	Y+18, r18	; 0x12
    146a:	3b 8b       	std	Y+19, r19	; 0x13
    146c:	4c 8b       	std	Y+20, r20	; 0x14
    146e:	5d 8b       	std	Y+21, r21	; 0x15
    1470:	6a 89       	ldd	r22, Y+18	; 0x12
    1472:	7b 89       	ldd	r23, Y+19	; 0x13
    1474:	8c 89       	ldd	r24, Y+20	; 0x14
    1476:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    1478:	20 e3       	ldi	r18, 0x30	; 48
    147a:	2e 0f       	add	r18, r30
    147c:	f4 01       	movw	r30, r8
    147e:	21 93       	st	Z+, r18
    1480:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point
      if (decpos){
        for (; decpos ; decpos--){
    1482:	6e 16       	cp	r6, r30
    1484:	7f 06       	cpc	r7, r31
    1486:	49 f7       	brne	.-46     	; 0x145a <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    1488:	99 24       	eor	r9, r9
    148a:	93 94       	inc	r9
    148c:	94 0c       	add	r9, r4
    148e:	f5 01       	movw	r30, r10
    1490:	e4 0d       	add	r30, r4
    1492:	f1 1d       	adc	r31, r1
    1494:	2e e2       	ldi	r18, 0x2E	; 46
    1496:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point
      do{
          qr = ldiv(qr.quot, 10);
    1498:	2a e0       	ldi	r18, 0x0A	; 10
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e0       	ldi	r20, 0x00	; 0
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__divmodsi4>
    14a4:	e6 2f       	mov	r30, r22
    14a6:	2a 8b       	std	Y+18, r18	; 0x12
    14a8:	3b 8b       	std	Y+19, r19	; 0x13
    14aa:	4c 8b       	std	Y+20, r20	; 0x14
    14ac:	5d 8b       	std	Y+21, r21	; 0x15
    14ae:	6e 8b       	std	Y+22, r22	; 0x16
    14b0:	7f 8b       	std	Y+23, r23	; 0x17
    14b2:	88 8f       	std	Y+24, r24	; 0x18
    14b4:	99 8f       	std	Y+25, r25	; 0x19
    14b6:	6a 89       	ldd	r22, Y+18	; 0x12
    14b8:	7b 89       	ldd	r23, Y+19	; 0x13
    14ba:	8c 89       	ldd	r24, Y+20	; 0x14
    14bc:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    14be:	31 e0       	ldi	r19, 0x01	; 1
    14c0:	39 0d       	add	r19, r9
    14c2:	d5 01       	movw	r26, r10
    14c4:	a9 0d       	add	r26, r9
    14c6:	b1 1d       	adc	r27, r1
    14c8:	e0 5d       	subi	r30, 0xD0	; 208
    14ca:	ec 93       	st	X, r30
    14cc:	93 2e       	mov	r9, r19
        }while(qr.quot);
    14ce:	61 15       	cp	r22, r1
    14d0:	71 05       	cpc	r23, r1
    14d2:	81 05       	cpc	r24, r1
    14d4:	91 05       	cpc	r25, r1
    14d6:	01 f7       	brne	.-64     	; 0x1498 <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
    14d8:	11 23       	and	r17, r17
    14da:	61 f0       	breq	.+24     	; 0x14f4 <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    14dc:	51 10       	cpse	r5, r1
    14de:	4b c0       	rjmp	.+150    	; 0x1576 <lcd_int32+0x196>
    14e0:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    14e2:	31 17       	cp	r19, r17
    14e4:	38 f4       	brcc	.+14     	; 0x14f4 <lcd_int32+0x114>
    14e6:	f5 01       	movw	r30, r10
    14e8:	e3 0f       	add	r30, r19
    14ea:	f1 1d       	adc	r31, r1
    14ec:	90 83       	st	Z, r25
    14ee:	3f 5f       	subi	r19, 0xFF	; 255
    14f0:	13 13       	cpse	r17, r19
    14f2:	f9 cf       	rjmp	.-14     	; 0x14e6 <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    14f4:	00 23       	and	r16, r16
    14f6:	31 f0       	breq	.+12     	; 0x1504 <lcd_int32+0x124>
    14f8:	f5 01       	movw	r30, r10
    14fa:	e3 0f       	add	r30, r19
    14fc:	f1 1d       	adc	r31, r1
    14fe:	9d e2       	ldi	r25, 0x2D	; 45
    1500:	90 83       	st	Z, r25
    1502:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1504:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1506:	31 50       	subi	r19, 0x01	; 1
    1508:	f5 01       	movw	r30, r10
    150a:	e3 0f       	add	r30, r19
    150c:	f1 1d       	adc	r31, r1
    150e:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1510:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1512:	77 9b       	sbis	0x0e, 7	; 14
    1514:	fe cf       	rjmp	.-4      	; 0x1512 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
    1516:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1518:	77 9b       	sbis	0x0e, 7	; 14
    151a:	fe cf       	rjmp	.-4      	; 0x1518 <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    151c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1520:	98 60       	ori	r25, 0x08	; 8
    1522:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1526:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    152a:	97 7f       	andi	r25, 0xF7	; 247
    152c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1530:	85 ed       	ldi	r24, 0xD5	; 213
    1532:	8a 95       	dec	r24
    1534:	f1 f7       	brne	.-4      	; 0x1532 <lcd_int32+0x152>
    1536:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1538:	31 11       	cpse	r19, r1
    153a:	e5 cf       	rjmp	.-54     	; 0x1506 <lcd_int32+0x126>

}
    153c:	69 96       	adiw	r28, 0x19	; 25
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	de bf       	out	0x3e, r29	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	cd bf       	out	0x3d, r28	; 61
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	ff 90       	pop	r15
    1552:	ef 90       	pop	r14
    1554:	df 90       	pop	r13
    1556:	cf 90       	pop	r12
    1558:	bf 90       	pop	r11
    155a:	af 90       	pop	r10
    155c:	9f 90       	pop	r9
    155e:	8f 90       	pop	r8
    1560:	7f 90       	pop	r7
    1562:	6f 90       	pop	r6
    1564:	5f 90       	pop	r5
    1566:	4f 90       	pop	r4
    1568:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    156a:	91 2c       	mov	r9, r1
    156c:	9e 01       	movw	r18, r28
    156e:	2f 5f       	subi	r18, 0xFF	; 255
    1570:	3f 4f       	sbci	r19, 0xFF	; 255
    1572:	59 01       	movw	r10, r18
    1574:	91 cf       	rjmp	.-222    	; 0x1498 <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    1576:	90 e3       	ldi	r25, 0x30	; 48
    1578:	b4 cf       	rjmp	.-152    	; 0x14e2 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    157a:	f0 94       	com	r15
    157c:	e0 94       	com	r14
    157e:	d0 94       	com	r13
    1580:	c0 94       	com	r12
    1582:	c1 1c       	adc	r12, r1
    1584:	d1 1c       	adc	r13, r1
    1586:	e1 1c       	adc	r14, r1
    1588:	f1 1c       	adc	r15, r1
    158a:	54 cf       	rjmp	.-344    	; 0x1434 <lcd_int32+0x54>

0000158c <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l,
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
    158c:	5f 92       	push	r5
    158e:	6f 92       	push	r6
    1590:	7f 92       	push	r7
    1592:	8f 92       	push	r8
    1594:	9f 92       	push	r9
    1596:	af 92       	push	r10
    1598:	bf 92       	push	r11
    159a:	cf 92       	push	r12
    159c:	df 92       	push	r13
    159e:	ef 92       	push	r14
    15a0:	ff 92       	push	r15
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	61 97       	sbiw	r28, 0x11	; 17
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	cd bf       	out	0x3d, r28	; 61
    15ba:	5c 01       	movw	r10, r24
    15bc:	96 2e       	mov	r9, r22
    15be:	54 2e       	mov	r5, r20
    15c0:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
    15c2:	8b 2c       	mov	r8, r11
    15c4:	88 1c       	adc	r8, r8
    15c6:	88 24       	eor	r8, r8
    15c8:	88 1c       	adc	r8, r8
    15ca:	78 2c       	mov	r7, r8
    15cc:	9c 01       	movw	r18, r24
    15ce:	97 fd       	sbrc	r25, 7
    15d0:	9d c0       	rjmp	.+314    	; 0x170c <lcd_int16+0x180>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
    15d2:	55 20       	and	r5, r5
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <lcd_int16+0x4c>
    15d6:	8e c0       	rjmp	.+284    	; 0x16f4 <lcd_int16+0x168>
    15d8:	8e 01       	movw	r16, r28
    15da:	0f 5f       	subi	r16, 0xFF	; 255
    15dc:	1f 4f       	sbci	r17, 0xFF	; 255
    15de:	78 01       	movw	r14, r16
    15e0:	cc 24       	eor	r12, r12
    15e2:	ca 94       	dec	r12
    15e4:	c5 0c       	add	r12, r5
    15e6:	d1 2c       	mov	r13, r1
    15e8:	8f ef       	ldi	r24, 0xFF	; 255
    15ea:	c8 1a       	sub	r12, r24
    15ec:	d8 0a       	sbc	r13, r24
    15ee:	c0 0e       	add	r12, r16
    15f0:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
    15f2:	6a e0       	ldi	r22, 0x0A	; 10
    15f4:	70 e0       	ldi	r23, 0x00	; 0
    15f6:	c9 01       	movw	r24, r18
    15f8:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divmodhi4>
    15fc:	46 2f       	mov	r20, r22
    15fe:	24 2f       	mov	r18, r20
    1600:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
    1602:	80 5d       	subi	r24, 0xD0	; 208
    1604:	f7 01       	movw	r30, r14
    1606:	81 93       	st	Z+, r24
    1608:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point
        if (decpos){
          for (; decpos ; decpos--){
    160a:	ec 15       	cp	r30, r12
    160c:	fd 05       	cpc	r31, r13
    160e:	89 f7       	brne	.-30     	; 0x15f2 <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
    1610:	ff 24       	eor	r15, r15
    1612:	f3 94       	inc	r15
    1614:	f5 0c       	add	r15, r5
    1616:	f8 01       	movw	r30, r16
    1618:	e5 0d       	add	r30, r5
    161a:	f1 1d       	adc	r31, r1
    161c:	8e e2       	ldi	r24, 0x2E	; 46
    161e:	80 83       	st	Z, r24
    1620:	01 c0       	rjmp	.+2      	; 0x1624 <lcd_int16+0x98>

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
    1622:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point
        do
        {
                qr = div(qr.quot, 10);
    1624:	6a e0       	ldi	r22, 0x0A	; 10
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	c9 01       	movw	r24, r18
    162a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divmodhi4>
    162e:	46 2f       	mov	r20, r22
    1630:	24 2f       	mov	r18, r20
    1632:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
    1634:	91 e0       	ldi	r25, 0x01	; 1
    1636:	9f 0d       	add	r25, r15
    1638:	f8 01       	movw	r30, r16
    163a:	ef 0d       	add	r30, r15
    163c:	f1 1d       	adc	r31, r1
    163e:	80 5d       	subi	r24, 0xD0	; 208
    1640:	80 83       	st	Z, r24
        }
        while(qr.quot);
    1642:	21 15       	cp	r18, r1
    1644:	31 05       	cpc	r19, r1
    1646:	69 f7       	brne	.-38     	; 0x1622 <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
    1648:	61 10       	cpse	r6, r1
    164a:	59 c0       	rjmp	.+178    	; 0x16fe <lcd_int16+0x172>
    164c:	b7 fc       	sbrc	r11, 7
    164e:	63 c0       	rjmp	.+198    	; 0x1716 <lcd_int16+0x18a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    1650:	99 20       	and	r9, r9
    1652:	b1 f0       	breq	.+44     	; 0x1680 <lcd_int16+0xf4>
    1654:	68 2d       	mov	r22, r8
    1656:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    1658:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    165a:	29 2f       	mov	r18, r25
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	49 2d       	mov	r20, r9
    1660:	50 e0       	ldi	r21, 0x00	; 0
    1662:	46 1b       	sub	r20, r22
    1664:	57 0b       	sbc	r21, r23
    1666:	24 17       	cp	r18, r20
    1668:	35 07       	cpc	r19, r21
    166a:	54 f4       	brge	.+20     	; 0x1680 <lcd_int16+0xf4>
    166c:	9f 5f       	subi	r25, 0xFF	; 255
    166e:	f8 01       	movw	r30, r16
    1670:	e2 0f       	add	r30, r18
    1672:	f3 1f       	adc	r31, r19
    1674:	80 83       	st	Z, r24
    1676:	29 2f       	mov	r18, r25
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	24 17       	cp	r18, r20
    167c:	35 07       	cpc	r19, r21
    167e:	b4 f3       	brlt	.-20     	; 0x166c <lcd_int16+0xe0>
        }

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}
    1680:	77 20       	and	r7, r7
    1682:	31 f0       	breq	.+12     	; 0x1690 <lcd_int16+0x104>
    1684:	f8 01       	movw	r30, r16
    1686:	e9 0f       	add	r30, r25
    1688:	f1 1d       	adc	r31, r1
    168a:	8d e2       	ldi	r24, 0x2D	; 45
    168c:	80 83       	st	Z, r24
    168e:	9f 5f       	subi	r25, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1690:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1692:	91 50       	subi	r25, 0x01	; 1
    1694:	f8 01       	movw	r30, r16
    1696:	e9 0f       	add	r30, r25
    1698:	f1 1d       	adc	r31, r1
    169a:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    169c:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    169e:	77 9b       	sbis	0x0e, 7	; 14
    16a0:	fe cf       	rjmp	.-4      	; 0x169e <lcd_int16+0x112>
  SPDR = byte;                        //send payload
    16a2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    16a4:	77 9b       	sbis	0x0e, 7	; 14
    16a6:	fe cf       	rjmp	.-4      	; 0x16a4 <lcd_int16+0x118>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    16a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16ac:	88 60       	ori	r24, 0x08	; 8
    16ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16b2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16b6:	87 7f       	andi	r24, 0xF7	; 247
    16b8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    16bc:	f5 ed       	ldi	r31, 0xD5	; 213
    16be:	fa 95       	dec	r31
    16c0:	f1 f7       	brne	.-4      	; 0x16be <lcd_int16+0x132>
    16c2:	00 00       	nop

        // output the sign, if we need to
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    16c4:	91 11       	cpse	r25, r1
    16c6:	e5 cf       	rjmp	.-54     	; 0x1692 <lcd_int16+0x106>
}
    16c8:	61 96       	adiw	r28, 0x11	; 17
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	1f 91       	pop	r17
    16da:	0f 91       	pop	r16
    16dc:	ff 90       	pop	r15
    16de:	ef 90       	pop	r14
    16e0:	df 90       	pop	r13
    16e2:	cf 90       	pop	r12
    16e4:	bf 90       	pop	r11
    16e6:	af 90       	pop	r10
    16e8:	9f 90       	pop	r9
    16ea:	8f 90       	pop	r8
    16ec:	7f 90       	pop	r7
    16ee:	6f 90       	pop	r6
    16f0:	5f 90       	pop	r5
    16f2:	08 95       	ret
                  uint8_t fieldwidth,
                  uint8_t decpos,
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    16f4:	f1 2c       	mov	r15, r1
    16f6:	8e 01       	movw	r16, r28
    16f8:	0f 5f       	subi	r16, 0xFF	; 255
    16fa:	1f 4f       	sbci	r17, 0xFF	; 255
    16fc:	93 cf       	rjmp	.-218    	; 0x1624 <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    16fe:	99 20       	and	r9, r9
    1700:	09 f4       	brne	.+2      	; 0x1704 <lcd_int16+0x178>
    1702:	be cf       	rjmp	.-132    	; 0x1680 <lcd_int16+0xf4>
    1704:	68 2d       	mov	r22, r8
    1706:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    1708:	80 e3       	ldi	r24, 0x30	; 48
    170a:	a7 cf       	rjmp	.-178    	; 0x165a <lcd_int16+0xce>
    170c:	22 27       	eor	r18, r18
    170e:	33 27       	eor	r19, r19
    1710:	28 1b       	sub	r18, r24
    1712:	39 0b       	sbc	r19, r25
    1714:	5e cf       	rjmp	.-324    	; 0x15d2 <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    1716:	f3 94       	inc	r15
    1718:	f3 94       	inc	r15
    171a:	f8 01       	movw	r30, r16
    171c:	e9 0f       	add	r30, r25
    171e:	f1 1d       	adc	r31, r1
    1720:	8d e2       	ldi	r24, 0x2D	; 45
    1722:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
    1724:	99 20       	and	r9, r9
    1726:	59 f0       	breq	.+22     	; 0x173e <lcd_int16+0x1b2>
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    1728:	2f 2d       	mov	r18, r15
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	49 2d       	mov	r20, r9
    172e:	50 e0       	ldi	r21, 0x00	; 0
    1730:	24 17       	cp	r18, r20
    1732:	35 07       	cpc	r19, r21
    1734:	24 f4       	brge	.+8      	; 0x173e <lcd_int16+0x1b2>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    1736:	9f 2d       	mov	r25, r15
                bSigned = 0;
    1738:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified
        if (fieldwidth){
          // determine the fill character
          fillch = bZeroFill? '0': ' ';
    173a:	80 e2       	ldi	r24, 0x20	; 32
    173c:	97 cf       	rjmp	.-210    	; 0x166c <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    173e:	9f 2d       	mov	r25, r15
    1740:	a7 cf       	rjmp	.-178    	; 0x1690 <lcd_int16+0x104>

00001742 <lm73_temp_convert>:
//the buffer pointed to by the arguement.
//TODO:Returns what???(uint8_t)??? Probably a BUG?

//Yeah, this is for you to do! ;^)

}//lm73_temp_convert
    1742:	08 95       	ret

00001744 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
    1744:	1f 92       	push	r1
    1746:	0f 92       	push	r0
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	0f 92       	push	r0
    174c:	11 24       	eor	r1, r1
    174e:	0b b6       	in	r0, 0x3b	; 59
    1750:	0f 92       	push	r0
    1752:	2f 93       	push	r18
    1754:	3f 93       	push	r19
    1756:	8f 93       	push	r24
    1758:	9f 93       	push	r25
    175a:	af 93       	push	r26
    175c:	bf 93       	push	r27
    175e:	ef 93       	push	r30
    1760:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1762:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1766:	8e 2f       	mov	r24, r30
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	fc 01       	movw	r30, r24
    176c:	38 97       	sbiw	r30, 0x08	; 8
    176e:	e1 35       	cpi	r30, 0x51	; 81
    1770:	f1 05       	cpc	r31, r1
    1772:	b0 f0       	brcs	.+44     	; 0x17a0 <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
    1774:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1778:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <twi_state>
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
    177c:	84 e0       	ldi	r24, 0x04	; 4
    177e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  }//switch
}//TWI_isr
    1782:	ff 91       	pop	r31
    1784:	ef 91       	pop	r30
    1786:	bf 91       	pop	r27
    1788:	af 91       	pop	r26
    178a:	9f 91       	pop	r25
    178c:	8f 91       	pop	r24
    178e:	3f 91       	pop	r19
    1790:	2f 91       	pop	r18
    1792:	0f 90       	pop	r0
    1794:	0b be       	out	0x3b, r0	; 59
    1796:	0f 90       	pop	r0
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	0f 90       	pop	r0
    179c:	1f 90       	pop	r1
    179e:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    17a0:	ea 5b       	subi	r30, 0xBA	; 186
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
    17a8:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <twi_buf_ptr.1780>
    17ac:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <twi_buf>
    17b0:	f0 91 ad 02 	lds	r31, 0x02AD	; 0x8002ad <twi_buf+0x1>
    17b4:	e8 0f       	add	r30, r24
    17b6:	f1 1d       	adc	r31, r1
    17b8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    17bc:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
    17be:	84 e9       	ldi	r24, 0x94	; 148
    17c0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;      
    17c4:	de cf       	rjmp	.-68     	; 0x1782 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
    17c6:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <twi_bus_addr>
    17ca:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
      twi_buf_ptr = 0;      //initalize buffer pointer 
    17ce:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <twi_buf_ptr.1780>
      TWCR = TWCR_SEND;     //send SLA+RW
    17d2:	85 e8       	ldi	r24, 0x85	; 133
    17d4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
    17d8:	d4 cf       	rjmp	.-88     	; 0x1782 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
    17da:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <twi_buf_ptr.1780>
    17de:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <twi_msg_size>
    17e2:	89 17       	cp	r24, r25
    17e4:	60 f7       	brcc	.-40     	; 0x17be <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
    17e6:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <twi_buf>
    17ea:	f0 91 ad 02 	lds	r31, 0x02AD	; 0x8002ad <twi_buf+0x1>
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	98 0f       	add	r25, r24
    17f2:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <twi_buf_ptr.1780>
    17f6:	e8 0f       	add	r30, r24
    17f8:	f1 1d       	adc	r31, r1
    17fa:	80 81       	ld	r24, Z
    17fc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
        TWCR = TWCR_SEND;               //send next byte 
    1800:	85 e8       	ldi	r24, 0x85	; 133
    1802:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1806:	bd cf       	rjmp	.-134    	; 0x1782 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
    1808:	85 ea       	ldi	r24, 0xA5	; 165
    180a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
    180e:	b9 cf       	rjmp	.-142    	; 0x1782 <__vector_33+0x3e>
    1810:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <twi_buf_ptr.1780>
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    1814:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <twi_msg_size>
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	28 17       	cp	r18, r24
    1820:	39 07       	cpc	r19, r25
    1822:	dc f4       	brge	.+54     	; 0x185a <__vector_33+0x116>
    1824:	85 ec       	ldi	r24, 0xC5	; 197
    1826:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    182a:	ab cf       	rjmp	.-170    	; 0x1782 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    182c:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <twi_buf>
    1830:	f0 91 ad 02 	lds	r31, 0x02AD	; 0x8002ad <twi_buf+0x1>
    1834:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <twi_buf_ptr.1780>
    1838:	21 e0       	ldi	r18, 0x01	; 1
    183a:	28 0f       	add	r18, r24
    183c:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <twi_buf_ptr.1780>
    1840:	e8 0f       	add	r30, r24
    1842:	f1 1d       	adc	r31, r1
    1844:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1848:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    184a:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <twi_msg_size>
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	28 17       	cp	r18, r24
    1856:	39 07       	cpc	r19, r25
    1858:	2c f3       	brlt	.-54     	; 0x1824 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
    185a:	85 e8       	ldi	r24, 0x85	; 133
    185c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1860:	90 cf       	rjmp	.-224    	; 0x1782 <__vector_33+0x3e>

00001862 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1862:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
}
    1866:	81 70       	andi	r24, 0x01	; 1
    1868:	08 95       	ret

0000186a <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    186a:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
    186e:	90 fd       	sbrc	r25, 0
    1870:	fc cf       	rjmp	.-8      	; 0x186a <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
    1872:	8e 7f       	andi	r24, 0xFE	; 254
    1874:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <twi_bus_addr>
  twi_buf = twi_data;                   //load pointer to write buffer
    1878:	70 93 ad 02 	sts	0x02AD, r23	; 0x8002ad <twi_buf+0x1>
    187c:	60 93 ac 02 	sts	0x02AC, r22	; 0x8002ac <twi_buf>
  twi_msg_size = byte_cnt;              //load size of xfer 
    1880:	40 93 af 02 	sts	0x02AF, r20	; 0x8002af <twi_msg_size>
  TWCR = TWCR_START;                    //initiate START
    1884:	85 ea       	ldi	r24, 0xA5	; 165
    1886:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    188a:	08 95       	ret

0000188c <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    188c:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
    1890:	90 fd       	sbrc	r25, 0
    1892:	fc cf       	rjmp	.-8      	; 0x188c <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
    1894:	81 60       	ori	r24, 0x01	; 1
    1896:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <twi_bus_addr>
  twi_buf = twi_data;                  //load pointer to write buffer
    189a:	70 93 ad 02 	sts	0x02AD, r23	; 0x8002ad <twi_buf+0x1>
    189e:	60 93 ac 02 	sts	0x02AC, r22	; 0x8002ac <twi_buf>
  twi_msg_size = byte_cnt;             //load size of xfer 
    18a2:	40 93 af 02 	sts	0x02AF, r20	; 0x8002af <twi_msg_size>
  TWCR = TWCR_START;                   //initiate START
    18a6:	85 ea       	ldi	r24, 0xA5	; 165
    18a8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    18ac:	08 95       	ret

000018ae <init_twi>:
    18ae:	8f ef       	ldi	r24, 0xFF	; 255
    18b0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    18b4:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    18b8:	8c e0       	ldi	r24, 0x0C	; 12
    18ba:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    18be:	08 95       	ret

000018c0 <main>:

/**********************************************************************
 *				spi_init
 **********************************************************************/
void spi_init(void){
DDRB |= ( (1 << PB2) | ( 1<< PB1) | (1<<PB0) ); //mosi and serial clock
    18c0:	87 b3       	in	r24, 0x17	; 23
    18c2:	87 60       	ori	r24, 0x07	; 7
    18c4:	87 bb       	out	0x17, r24	; 23
SPCR |= ( (1 << MSTR) | (1 << SPE) ); //master mode, SPI enabled, clk low on idle, leading edge sample
    18c6:	8d b1       	in	r24, 0x0d	; 13
    18c8:	80 65       	ori	r24, 0x50	; 80
    18ca:	8d b9       	out	0x0d, r24	; 13
SPSR |= 1 << SPI2X;
    18cc:	70 9a       	sbi	0x0e, 0	; 14

//DDRF |= 0x08; //lcd strobe bit
DDRB |= 0xF0; // set PORTB 4-7 bits as outputs
    18ce:	87 b3       	in	r24, 0x17	; 23
    18d0:	80 6f       	ori	r24, 0xF0	; 240
    18d2:	87 bb       	out	0x17, r24	; 23
DDRA = 0x03; // set PORTA 6-7 bits as inputs
    18d4:	83 e0       	ldi	r24, 0x03	; 3
    18d6:	8a bb       	out	0x1a, r24	; 26
DDRD = (1 << PD2); // set PD2 as output
    18d8:	84 e0       	ldi	r24, 0x04	; 4
    18da:	81 bb       	out	0x11, r24	; 17
DDRE = 0xFF;// set PORTE to all outputs
    18dc:	cf ef       	ldi	r28, 0xFF	; 255
    18de:	c2 b9       	out	0x02, r28	; 2
//***********************************************************************************
uint8_t main()
{
//DDRE &= ~(1 << PE3);
spi_init();	//initialize SPI and port configurations
init_twi(); //initalize TWI (twi_master.h)  
    18e0:	0e 94 57 0c 	call	0x18ae	; 0x18ae <init_twi>
uart_init(); 	//initialize uart
    18e4:	0e 94 b0 06 	call	0xd60	; 0xd60 <uart_init>
lcd_init();	//initialize LCD display
    18e8:	0e 94 2e 09 	call	0x125c	; 0x125c <lcd_init>
clear_display(); //Clean LCD display
    18ec:	0e 94 81 08 	call	0x1102	; 0x1102 <clear_display>

/**********************************************************************
 *				ADC_init
 **********************************************************************/
void ADC_init(void){
DDRF  &= ~(_BV(DDF7)); //make port F bit 7 the ADC input  
    18f0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    18f4:	8f 77       	andi	r24, 0x7F	; 127
    18f6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
    18fa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    18fe:	8f 77       	andi	r24, 0x7F	; 127
    1900:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	
ADMUX = (1 << REFS0) | (1 << ADLAR) | 0x07; // reference to AVCC(5v), left adjusted (only reading  8bit), and channel 7
    1904:	87 e6       	ldi	r24, 0x67	; 103
    1906:	87 b9       	out	0x07, r24	; 7
//ADC enabled, single conversion, division factor is 128
ADCSRA = (1 << ADEN) | (1 << ADPS2) | ( 1 << ADPS1) | ( 1 << ADPS0) ; 
    1908:	87 e8       	ldi	r24, 0x87	; 135
    190a:	86 b9       	out	0x06, r24	; 6

/**********************************************************************
 *				dimming_init
 **********************************************************************/
void dimming_init(void){
TCCR2 |= (1 << WGM21) | ( 1 << WGM20) | (1 << COM21) | ( 1 << CS20); // no prescale, clear on OC2 match, fast pwm mode
    190c:	85 b5       	in	r24, 0x25	; 37
    190e:	89 66       	ori	r24, 0x69	; 105
    1910:	85 bd       	out	0x25, r24	; 37
TIMSK |= (1 << OCIE2); // Compare match interrupt enable timer/counter0
    1912:	87 b7       	in	r24, 0x37	; 55
    1914:	80 68       	ori	r24, 0x80	; 128
    1916:	87 bf       	out	0x37, r24	; 55
TCNT2 = 0; //set count at 0
    1918:	14 bc       	out	0x24, r1	; 36

/**********************************************************************
 *				tone_init
 **********************************************************************/
void tone_init(void){
DDRC = 0xFF; // set all of PORTC as outputs
    191a:	c4 bb       	out	0x14, r28	; 20
TCCR1A = 0x00; // normal operation w/ OC1A is disconnected
    191c:	1f bc       	out	0x2f, r1	; 47
TIMSK |= 1 << OCIE1A; //output compare enable for timercounter1A
    191e:	87 b7       	in	r24, 0x37	; 55
    1920:	80 61       	ori	r24, 0x10	; 16
    1922:	87 bf       	out	0x37, r24	; 55
OCR1A = 3999; // 4kHz and triggers ISR
    1924:	8f e9       	ldi	r24, 0x9F	; 159
    1926:	9f e0       	ldi	r25, 0x0F	; 15
    1928:	9b bd       	out	0x2b, r25	; 43
    192a:	8a bd       	out	0x2a, r24	; 42
//clk is not set
TCCR1B |= (1 << WGM12); // CTC mode, clear with OCR and no prescaling
    192c:	8e b5       	in	r24, 0x2e	; 46
    192e:	88 60       	ori	r24, 0x08	; 8
    1930:	8e bd       	out	0x2e, r24	; 46

/**********************************************************************
 *				clock_init
 **********************************************************************/
void clock_init(void){
ASSR   |=  1<<AS0; //ext osc TOSC in 32kHz 
    1932:	80 b7       	in	r24, 0x30	; 48
    1934:	88 60       	ori	r24, 0x08	; 8
    1936:	80 bf       	out	0x30, r24	; 48
TIMSK |= 1 << OCIE0; //interrupt flag on compare register 
    1938:	87 b7       	in	r24, 0x37	; 55
    193a:	82 60       	ori	r24, 0x02	; 2
    193c:	87 bf       	out	0x37, r24	; 55
TCCR0 |= ((1 << WGM01) | (1 << CS00)); //CTC mode, with clk/no pre-scaling
    193e:	83 b7       	in	r24, 0x33	; 51
    1940:	89 60       	ori	r24, 0x09	; 9
    1942:	83 bf       	out	0x33, r24	; 51
OCR0 = 127; // Set top 
    1944:	8f e7       	ldi	r24, 0x7F	; 127
    1946:	81 bf       	out	0x31, r24	; 49
/**********************************************************************
 *				volume_init
 **********************************************************************/
void volume_init(void){
//volume pin is PE3
TCCR3A = (1 << COM3A1 | (1 << WGM31) ); //normal operation w/ OC3A is disconnected
    1948:	82 e8       	ldi	r24, 0x82	; 130
    194a:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
TCCR3B |= (  (1 << CS30) | ( 1 << WGM32) | (1 << WGM33) ); //fast pwm 
    194e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1952:	89 61       	ori	r24, 0x19	; 25
    1954:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
ICR3 = 10; // Set overflow top ; controls frequency 
    1958:	8a e0       	ldi	r24, 0x0A	; 10
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1960:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
OCR3A = 0; // set compare match; duty cycle
    1964:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1968:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    196c:	32 eb       	ldi	r19, 0xB2	; 178
    196e:	63 2e       	mov	r6, r19
    1970:	31 e0       	ldi	r19, 0x01	; 1
    1972:	73 2e       	mov	r7, r19
    1974:	46 e9       	ldi	r20, 0x96	; 150
    1976:	c4 2e       	mov	r12, r20
    1978:	41 e0       	ldi	r20, 0x01	; 1
    197a:	d4 2e       	mov	r13, r20
		*/
		disable_alarm();
		break;

	case 0x08: // setting time
		incr_time = 1;	//increment time
    197c:	01 e0       	ldi	r16, 0x01	; 1
    197e:	10 e0       	ldi	r17, 0x00	; 0
		OCR3A = 0;
		TCCR1B &= ~(1 << CS10);	//clear the clock
	}
		snooze_time = TRUE;
		if(snooze_time){
			if(seconds % 10 == 0){
    1980:	5a e0       	ldi	r21, 0x0A	; 10
    1982:	e5 2e       	mov	r14, r21
    1984:	f1 2c       	mov	r15, r1
			tone = TRUE;
			OCR3A = 5;
    1986:	65 e0       	ldi	r22, 0x05	; 5
    1988:	86 2e       	mov	r8, r22
    198a:	91 2c       	mov	r9, r1

time_tracker_12(); //keep track of the time in 12 hr format 



PORTA = 0xFF;  //make PORTA an input port with pullups 	
    198c:	bb 24       	eor	r11, r11
    198e:	ba 94       	dec	r11
	}

	//handles decimal point display when alarm is triggered
	if(alarm){
		PORTB = 0; // digit 0
		PORTA = 0x7F; // turn on decimal point
    1990:	7f e7       	ldi	r23, 0x7F	; 127
    1992:	a7 2e       	mov	r10, r23

//uart_putc("t");

while(1){ // main loop

ADCSR |= (1<<ADSC); //start writing 
    1994:	36 9a       	sbi	0x06, 6	; 6
while(bit_is_clear(ADCSRA, ADIF)){};
    1996:	34 9b       	sbis	0x06, 4	; 6
    1998:	fe cf       	rjmp	.-4      	; 0x1996 <main+0xd6>

ADCSR |= (1 << ADIF);//clear flag by writing one
    199a:	34 9a       	sbi	0x06, 4	; 6
adc_data = ADCH; // store ADC values
    199c:	85 b1       	in	r24, 0x05	; 5
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <adc_data+0x1>
    19a4:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <adc_data>

//refresh_lcd(lcd_temp_array);


//temperature sensor
 twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2) ; //read temperature data from LM73 (2 bytes) 
    19a8:	42 e0       	ldi	r20, 0x02	; 2
    19aa:	69 ea       	ldi	r22, 0xA9	; 169
    19ac:	72 e0       	ldi	r23, 0x02	; 2
    19ae:	80 e9       	ldi	r24, 0x90	; 144
    19b0:	0e 94 46 0c 	call	0x188c	; 0x188c <twi_start_rd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19b4:	8f e3       	ldi	r24, 0x3F	; 63
    19b6:	9f e1       	ldi	r25, 0x1F	; 31
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	f1 f7       	brne	.-4      	; 0x19b8 <main+0xf8>
    19bc:	00 c0       	rjmp	.+0      	; 0x19be <main+0xfe>
    19be:	00 00       	nop
    19c0:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <lm73_rd_buf>
    19c4:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <lm73_rd_buf+0x1>
    19c8:	98 27       	eor	r25, r24
    19ca:	89 27       	eor	r24, r25
    19cc:	98 27       	eor	r25, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    19ce:	4a e0       	ldi	r20, 0x0A	; 10
    19d0:	62 eb       	ldi	r22, 0xB2	; 178
    19d2:	71 e0       	ldi	r23, 0x01	; 1
    19d4:	88 0f       	add	r24, r24
    19d6:	89 2f       	mov	r24, r25
    19d8:	88 1f       	adc	r24, r24
    19da:	99 0b       	sbc	r25, r25
    19dc:	91 95       	neg	r25
    19de:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__itoa_ncheck>
  lm73_temp = lm73_temp | lm73_rd_buf[1]; //"OR" in the low temp byte to lm73_temp 
  lm73_temp = lm73_temp >> 7;
  itoa( lm73_temp, temp_str, 10); //convert to string in array with itoa() from avr-libc                           

  //displaying temperature
for(i = 0; i < strlen(temp_str); i++ ){
    19e2:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <i+0x1>
    19e6:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <i>
    19ea:	a2 eb       	ldi	r26, 0xB2	; 178
    19ec:	b1 e0       	ldi	r27, 0x01	; 1
    19ee:	ee e1       	ldi	r30, 0x1E	; 30
    19f0:	f1 e0       	ldi	r31, 0x01	; 1
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	07 c0       	rjmp	.+14     	; 0x1a06 <main+0x146>
	lcd_temp_array[6 + i] = temp_str[i];//insert the temperature characters to the LCD
    19f8:	8d 91       	ld	r24, X+
    19fa:	81 93       	st	Z+, r24
  lm73_temp = lm73_temp | lm73_rd_buf[1]; //"OR" in the low temp byte to lm73_temp 
  lm73_temp = lm73_temp >> 7;
  itoa( lm73_temp, temp_str, 10); //convert to string in array with itoa() from avr-libc                           

  //displaying temperature
for(i = 0; i < strlen(temp_str); i++ ){
    19fc:	50 93 a9 01 	sts	0x01A9, r21	; 0x8001a9 <i+0x1>
    1a00:	40 93 a8 01 	sts	0x01A8, r20	; 0x8001a8 <i>
    1a04:	9a 01       	movw	r18, r20
    1a06:	e3 01       	movw	r28, r6
    1a08:	09 90       	ld	r0, Y+
    1a0a:	00 20       	and	r0, r0
    1a0c:	e9 f7       	brne	.-6      	; 0x1a08 <main+0x148>
    1a0e:	ce 01       	movw	r24, r28
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	82 5b       	subi	r24, 0xB2	; 178
    1a14:	91 40       	sbci	r25, 0x01	; 1
    1a16:	a9 01       	movw	r20, r18
    1a18:	4f 5f       	subi	r20, 0xFF	; 255
    1a1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a1c:	28 17       	cp	r18, r24
    1a1e:	39 07       	cpc	r19, r25
    1a20:	58 f3       	brcs	.-42     	; 0x19f8 <main+0x138>
}
*/
//uart_putc('o');


if(rcv_rdy == 1){
    1a22:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <rcv_rdy>
    1a26:	81 30       	cpi	r24, 0x01	; 1
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <main+0x16c>
    1a2a:	84 c0       	rjmp	.+264    	; 0x1b34 <main+0x274>
	}
	rcv_rdy = 0;
}
//write_SPI(mode); // write to the bar graph

switch(mode){
    1a2c:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <mode>
    1a30:	88 30       	cpi	r24, 0x08	; 8
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <main+0x176>
    1a34:	a6 c0       	rjmp	.+332    	; 0x1b82 <main+0x2c2>
    1a36:	89 30       	cpi	r24, 0x09	; 9
    1a38:	08 f4       	brcc	.+2      	; 0x1a3c <main+0x17c>
    1a3a:	4e c0       	rjmp	.+156    	; 0x1ad8 <main+0x218>
    1a3c:	80 32       	cpi	r24, 0x20	; 32
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <main+0x182>
    1a40:	b8 c0       	rjmp	.+368    	; 0x1bb2 <main+0x2f2>
    1a42:	80 34       	cpi	r24, 0x40	; 64
    1a44:	09 f0       	breq	.+2      	; 0x1a48 <main+0x188>
    1a46:	a8 c0       	rjmp	.+336    	; 0x1b98 <main+0x2d8>
	case 0x40: //Setting alarm
		alarm = TRUE;	//alarm is on
    1a48:	10 93 73 01 	sts	0x0173, r17	; 0x800173 <alarm+0x1>
    1a4c:	00 93 72 01 	sts	0x0172, r16	; 0x800172 <alarm>
		tone = TRUE;	//turn on tone
    1a50:	10 93 6d 01 	sts	0x016D, r17	; 0x80016d <tone+0x1>
    1a54:	00 93 6c 01 	sts	0x016C, r16	; 0x80016c <tone>
		dp = TRUE;	//turn on decimal point
    1a58:	10 93 71 01 	sts	0x0171, r17	; 0x800171 <dp+0x1>
    1a5c:	00 93 70 01 	sts	0x0170, r16	; 0x800170 <dp>
		display = TRUE;	//set to display alarm time
    1a60:	10 93 6b 01 	sts	0x016B, r17	; 0x80016b <display+0x1>
    1a64:	00 93 6a 01 	sts	0x016A, r16	; 0x80016a <display>
		incr_alarm = 1;	//increment alarm time
    1a68:	10 93 63 01 	sts	0x0163, r17	; 0x800163 <incr_alarm+0x1>
    1a6c:	00 93 62 01 	sts	0x0162, r16	; 0x800162 <incr_alarm>

//you can set an if statement to change the bounds whether setting == true or false
		alarm_bound_12(); //bound the time for 12hr mark
    1a70:	0e 94 98 02 	call	0x530	; 0x530 <alarm_bound_12>
		incr_time = 0; 	// encoders should not change time when clock is running
		incr_alarm = 0; // encoders should not change alarm time when clock is running 
		seconds_holder = 1; // increment seconds 
}

time_tracker_12(); //keep track of the time in 12 hr format 
    1a74:	0e 94 85 03 	call	0x70a	; 0x70a <time_tracker_12>



PORTA = 0xFF;  //make PORTA an input port with pullups 	
    1a78:	bb ba       	out	0x1b, r11	; 27

if((alarm == TRUE) && (mode == 0x40)){
    1a7a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <alarm>
    1a7e:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <alarm+0x1>
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	29 f4       	brne	.+10     	; 0x1a90 <main+0x1d0>
    1a86:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <mode>
    1a8a:	80 34       	cpi	r24, 0x40	; 64
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <main+0x1d0>
    1a8e:	94 c0       	rjmp	.+296    	; 0x1bb8 <main+0x2f8>
	segsum(alarm_time);
//	string2lcd(lcd_string_array);
//	cursor_home();
}
else{segsum(time);}
    1a90:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <time>
    1a94:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <time+0x1>
    1a98:	0e 94 cb 05 	call	0xb96	; 0xb96 <segsum>

//DIGIT SHIFTS
//bound a counter (0-4) to keep track of digit to display ;

PORTB = 0x00;
    1a9c:	18 ba       	out	0x18, r1	; 24
    1a9e:	ed e0       	ldi	r30, 0x0D	; 13
    1aa0:	f1 e0       	ldi	r31, 0x01	; 1
    1aa2:	80 e0       	ldi	r24, 0x00	; 0

	for(int index = 0; index < 5; index++){
		PORTB = index << 4; // within 4 digits for the hex value
    1aa4:	98 2f       	mov	r25, r24
    1aa6:	92 95       	swap	r25
    1aa8:	90 7f       	andi	r25, 0xF0	; 240
    1aaa:	98 bb       	out	0x18, r25	; 24
		PORTA = segment_data[index]; //send 7 segment code to LED segments
    1aac:	91 91       	ld	r25, Z+
    1aae:	9b bb       	out	0x1b, r25	; 27
    1ab0:	af e9       	ldi	r26, 0x9F	; 159
    1ab2:	bf e0       	ldi	r27, 0x0F	; 15
    1ab4:	11 97       	sbiw	r26, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <main+0x1f4>
    1ab8:	00 c0       	rjmp	.+0      	; 0x1aba <main+0x1fa>
    1aba:	00 00       	nop
    1abc:	8f 5f       	subi	r24, 0xFF	; 255
//DIGIT SHIFTS
//bound a counter (0-4) to keep track of digit to display ;

PORTB = 0x00;

	for(int index = 0; index < 5; index++){
    1abe:	85 30       	cpi	r24, 0x05	; 5
    1ac0:	89 f7       	brne	.-30     	; 0x1aa4 <main+0x1e4>
		PORTA = segment_data[index]; //send 7 segment code to LED segments
		_delay_ms(1); // add delay	
	}

	//handles decimal point display when alarm is triggered
	if(alarm){
    1ac2:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <alarm>
    1ac6:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <alarm+0x1>
    1aca:	89 2b       	or	r24, r25
    1acc:	11 f0       	breq	.+4      	; 0x1ad2 <main+0x212>
		PORTB = 0; // digit 0
    1ace:	18 ba       	out	0x18, r1	; 24
		PORTA = 0x7F; // turn on decimal point
    1ad0:	ab ba       	out	0x1b, r10	; 27
	}
DDRA = 0xFF;  //make PORTA an output
    1ad2:	ba ba       	out	0x1a, r11	; 26
sei(); // ISR will return here
    1ad4:	78 94       	sei

}//while
    1ad6:	5e cf       	rjmp	.-324    	; 0x1994 <main+0xd4>
	}
	rcv_rdy = 0;
}
//write_SPI(mode); // write to the bar graph

switch(mode){
    1ad8:	84 30       	cpi	r24, 0x04	; 4
    1ada:	09 f0       	breq	.+2      	; 0x1ade <main+0x21e>
    1adc:	5d c0       	rjmp	.+186    	; 0x1b98 <main+0x2d8>
		time_bound_12();	//bound the encoders
		break;
	
	case 0x04://snooze alarm
	//	if( (seconds % 10) == 0){hr_temp = holder;} //after 10 seconds has passed then trigger alarm
	if(snooze_time == FALSE){
    1ade:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <snooze_time>
    1ae2:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <snooze_time+0x1>
    1ae6:	89 2b       	or	r24, r25
    1ae8:	59 f4       	brne	.+22     	; 0x1b00 <main+0x240>
		tone = FALSE;
    1aea:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <tone+0x1>
    1aee:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <tone>
		OCR3A = 0;
    1af2:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1af6:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		TCCR1B &= ~(1 << CS10);	//clear the clock
    1afa:	8e b5       	in	r24, 0x2e	; 46
    1afc:	8e 7f       	andi	r24, 0xFE	; 254
    1afe:	8e bd       	out	0x2e, r24	; 46
	}
		snooze_time = TRUE;
    1b00:	10 93 69 01 	sts	0x0169, r17	; 0x800169 <snooze_time+0x1>
    1b04:	00 93 68 01 	sts	0x0168, r16	; 0x800168 <snooze_time>
		if(snooze_time){
			if(seconds % 10 == 0){
    1b08:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <seconds>
    1b0c:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <seconds+0x1>
    1b10:	b7 01       	movw	r22, r14
    1b12:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divmodhi4>
    1b16:	89 2b       	or	r24, r25
    1b18:	09 f0       	breq	.+2      	; 0x1b1c <main+0x25c>
    1b1a:	ac cf       	rjmp	.-168    	; 0x1a74 <main+0x1b4>
			tone = TRUE;
    1b1c:	10 93 6d 01 	sts	0x016D, r17	; 0x80016d <tone+0x1>
    1b20:	00 93 6c 01 	sts	0x016C, r16	; 0x80016c <tone>
			OCR3A = 5;
    1b24:	90 92 87 00 	sts	0x0087, r9	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1b28:	80 92 86 00 	sts	0x0086, r8	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
			TCCR1B |= 1 << CS10;
    1b2c:	8e b5       	in	r24, 0x2e	; 46
    1b2e:	81 60       	ori	r24, 0x01	; 1
    1b30:	8e bd       	out	0x2e, r24	; 46
    1b32:	a0 cf       	rjmp	.-192    	; 0x1a74 <main+0x1b4>
*/
//uart_putc('o');


if(rcv_rdy == 1){
	for(i = 0; i < strlen(uart_buf); i++ ){
    1b34:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <i+0x1>
    1b38:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <i>
    1b3c:	a6 e9       	ldi	r26, 0x96	; 150
    1b3e:	b1 e0       	ldi	r27, 0x01	; 1
    1b40:	ef e2       	ldi	r30, 0x2F	; 47
    1b42:	f1 e0       	ldi	r31, 0x01	; 1
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	07 c0       	rjmp	.+14     	; 0x1b58 <main+0x298>
		lcd_temp_array[23 + i] = uart_buf[i];
    1b4a:	8d 91       	ld	r24, X+
    1b4c:	81 93       	st	Z+, r24
*/
//uart_putc('o');


if(rcv_rdy == 1){
	for(i = 0; i < strlen(uart_buf); i++ ){
    1b4e:	50 93 a9 01 	sts	0x01A9, r21	; 0x8001a9 <i+0x1>
    1b52:	40 93 a8 01 	sts	0x01A8, r20	; 0x8001a8 <i>
    1b56:	9a 01       	movw	r18, r20
    1b58:	e6 01       	movw	r28, r12
    1b5a:	09 90       	ld	r0, Y+
    1b5c:	00 20       	and	r0, r0
    1b5e:	e9 f7       	brne	.-6      	; 0x1b5a <main+0x29a>
    1b60:	ce 01       	movw	r24, r28
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	86 59       	subi	r24, 0x96	; 150
    1b66:	91 40       	sbci	r25, 0x01	; 1
    1b68:	a9 01       	movw	r20, r18
    1b6a:	4f 5f       	subi	r20, 0xFF	; 255
    1b6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b6e:	28 17       	cp	r18, r24
    1b70:	39 07       	cpc	r19, r25
    1b72:	58 f3       	brcs	.-42     	; 0x1b4a <main+0x28a>
		lcd_temp_array[23 + i] = uart_buf[i];
//	lcd_temp_array[22 + i] = uart_buf[i];
	}
	rcv_rdy = 0;
    1b74:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <rcv_rdy>
}
//write_SPI(mode); // write to the bar graph

switch(mode){
    1b78:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <mode>
    1b7c:	88 30       	cpi	r24, 0x08	; 8
    1b7e:	09 f0       	breq	.+2      	; 0x1b82 <main+0x2c2>
    1b80:	5a cf       	rjmp	.-332    	; 0x1a36 <main+0x176>
		*/
		disable_alarm();
		break;

	case 0x08: // setting time
		incr_time = 1;	//increment time
    1b82:	10 93 65 01 	sts	0x0165, r17	; 0x800165 <incr_time+0x1>
    1b86:	00 93 64 01 	sts	0x0164, r16	; 0x800164 <incr_time>
		seconds_holder = 0;	//seconds is not counting
    1b8a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <seconds_holder+0x1>
    1b8e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <seconds_holder>
		time_bound_12();	//bound the encoders
    1b92:	0e 94 06 03 	call	0x60c	; 0x60c <time_bound_12>
		break;
    1b96:	6e cf       	rjmp	.-292    	; 0x1a74 <main+0x1b4>
		}
		
		break;

	default:
		incr_time = 0; 	// encoders should not change time when clock is running
    1b98:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <incr_time+0x1>
    1b9c:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <incr_time>
		incr_alarm = 0; // encoders should not change alarm time when clock is running 
    1ba0:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <incr_alarm+0x1>
    1ba4:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <incr_alarm>
		seconds_holder = 1; // increment seconds 
    1ba8:	10 93 13 01 	sts	0x0113, r17	; 0x800113 <seconds_holder+0x1>
    1bac:	00 93 12 01 	sts	0x0112, r16	; 0x800112 <seconds_holder>
    1bb0:	61 cf       	rjmp	.-318    	; 0x1a74 <main+0x1b4>
		refresh_lcd(lcd_string_array);
		OCR3A = 0;	// clear the compare
		TCCR1B &= ~(1 << CS10);	//clear the clock
		mode &= ~(1 << 5); // set conditions only once so clear the bit
		*/
		disable_alarm();
    1bb2:	0e 94 34 02 	call	0x468	; 0x468 <disable_alarm>
		break;
    1bb6:	5e cf       	rjmp	.-324    	; 0x1a74 <main+0x1b4>


PORTA = 0xFF;  //make PORTA an input port with pullups 	

if((alarm == TRUE) && (mode == 0x40)){
	segsum(alarm_time);
    1bb8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <alarm_time>
    1bbc:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <alarm_time+0x1>
    1bc0:	0e 94 cb 05 	call	0xb96	; 0xb96 <segsum>
    1bc4:	6b cf       	rjmp	.-298    	; 0x1a9c <main+0x1dc>

00001bc6 <__divmodhi4>:
    1bc6:	97 fb       	bst	r25, 7
    1bc8:	07 2e       	mov	r0, r23
    1bca:	16 f4       	brtc	.+4      	; 0x1bd0 <__divmodhi4+0xa>
    1bcc:	00 94       	com	r0
    1bce:	07 d0       	rcall	.+14     	; 0x1bde <__divmodhi4_neg1>
    1bd0:	77 fd       	sbrc	r23, 7
    1bd2:	09 d0       	rcall	.+18     	; 0x1be6 <__divmodhi4_neg2>
    1bd4:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <__udivmodhi4>
    1bd8:	07 fc       	sbrc	r0, 7
    1bda:	05 d0       	rcall	.+10     	; 0x1be6 <__divmodhi4_neg2>
    1bdc:	3e f4       	brtc	.+14     	; 0x1bec <__divmodhi4_exit>

00001bde <__divmodhi4_neg1>:
    1bde:	90 95       	com	r25
    1be0:	81 95       	neg	r24
    1be2:	9f 4f       	sbci	r25, 0xFF	; 255
    1be4:	08 95       	ret

00001be6 <__divmodhi4_neg2>:
    1be6:	70 95       	com	r23
    1be8:	61 95       	neg	r22
    1bea:	7f 4f       	sbci	r23, 0xFF	; 255

00001bec <__divmodhi4_exit>:
    1bec:	08 95       	ret

00001bee <__divmodsi4>:
    1bee:	05 2e       	mov	r0, r21
    1bf0:	97 fb       	bst	r25, 7
    1bf2:	1e f4       	brtc	.+6      	; 0x1bfa <__divmodsi4+0xc>
    1bf4:	00 94       	com	r0
    1bf6:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__negsi2>
    1bfa:	57 fd       	sbrc	r21, 7
    1bfc:	07 d0       	rcall	.+14     	; 0x1c0c <__divmodsi4_neg2>
    1bfe:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__udivmodsi4>
    1c02:	07 fc       	sbrc	r0, 7
    1c04:	03 d0       	rcall	.+6      	; 0x1c0c <__divmodsi4_neg2>
    1c06:	4e f4       	brtc	.+18     	; 0x1c1a <__divmodsi4_exit>
    1c08:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__negsi2>

00001c0c <__divmodsi4_neg2>:
    1c0c:	50 95       	com	r21
    1c0e:	40 95       	com	r20
    1c10:	30 95       	com	r19
    1c12:	21 95       	neg	r18
    1c14:	3f 4f       	sbci	r19, 0xFF	; 255
    1c16:	4f 4f       	sbci	r20, 0xFF	; 255
    1c18:	5f 4f       	sbci	r21, 0xFF	; 255

00001c1a <__divmodsi4_exit>:
    1c1a:	08 95       	ret

00001c1c <__negsi2>:
    1c1c:	90 95       	com	r25
    1c1e:	80 95       	com	r24
    1c20:	70 95       	com	r23
    1c22:	61 95       	neg	r22
    1c24:	7f 4f       	sbci	r23, 0xFF	; 255
    1c26:	8f 4f       	sbci	r24, 0xFF	; 255
    1c28:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2a:	08 95       	ret

00001c2c <__tablejump2__>:
    1c2c:	ee 0f       	add	r30, r30
    1c2e:	ff 1f       	adc	r31, r31
    1c30:	00 24       	eor	r0, r0
    1c32:	00 1c       	adc	r0, r0
    1c34:	0b be       	out	0x3b, r0	; 59
    1c36:	07 90       	elpm	r0, Z+
    1c38:	f6 91       	elpm	r31, Z
    1c3a:	e0 2d       	mov	r30, r0
    1c3c:	09 94       	ijmp

00001c3e <__umulhisi3>:
    1c3e:	a2 9f       	mul	r26, r18
    1c40:	b0 01       	movw	r22, r0
    1c42:	b3 9f       	mul	r27, r19
    1c44:	c0 01       	movw	r24, r0
    1c46:	a3 9f       	mul	r26, r19
    1c48:	70 0d       	add	r23, r0
    1c4a:	81 1d       	adc	r24, r1
    1c4c:	11 24       	eor	r1, r1
    1c4e:	91 1d       	adc	r25, r1
    1c50:	b2 9f       	mul	r27, r18
    1c52:	70 0d       	add	r23, r0
    1c54:	81 1d       	adc	r24, r1
    1c56:	11 24       	eor	r1, r1
    1c58:	91 1d       	adc	r25, r1
    1c5a:	08 95       	ret

00001c5c <__udivmodhi4>:
    1c5c:	aa 1b       	sub	r26, r26
    1c5e:	bb 1b       	sub	r27, r27
    1c60:	51 e1       	ldi	r21, 0x11	; 17
    1c62:	07 c0       	rjmp	.+14     	; 0x1c72 <__udivmodhi4_ep>

00001c64 <__udivmodhi4_loop>:
    1c64:	aa 1f       	adc	r26, r26
    1c66:	bb 1f       	adc	r27, r27
    1c68:	a6 17       	cp	r26, r22
    1c6a:	b7 07       	cpc	r27, r23
    1c6c:	10 f0       	brcs	.+4      	; 0x1c72 <__udivmodhi4_ep>
    1c6e:	a6 1b       	sub	r26, r22
    1c70:	b7 0b       	sbc	r27, r23

00001c72 <__udivmodhi4_ep>:
    1c72:	88 1f       	adc	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	5a 95       	dec	r21
    1c78:	a9 f7       	brne	.-22     	; 0x1c64 <__udivmodhi4_loop>
    1c7a:	80 95       	com	r24
    1c7c:	90 95       	com	r25
    1c7e:	bc 01       	movw	r22, r24
    1c80:	cd 01       	movw	r24, r26
    1c82:	08 95       	ret

00001c84 <__udivmodsi4>:
    1c84:	a1 e2       	ldi	r26, 0x21	; 33
    1c86:	1a 2e       	mov	r1, r26
    1c88:	aa 1b       	sub	r26, r26
    1c8a:	bb 1b       	sub	r27, r27
    1c8c:	fd 01       	movw	r30, r26
    1c8e:	0d c0       	rjmp	.+26     	; 0x1caa <__udivmodsi4_ep>

00001c90 <__udivmodsi4_loop>:
    1c90:	aa 1f       	adc	r26, r26
    1c92:	bb 1f       	adc	r27, r27
    1c94:	ee 1f       	adc	r30, r30
    1c96:	ff 1f       	adc	r31, r31
    1c98:	a2 17       	cp	r26, r18
    1c9a:	b3 07       	cpc	r27, r19
    1c9c:	e4 07       	cpc	r30, r20
    1c9e:	f5 07       	cpc	r31, r21
    1ca0:	20 f0       	brcs	.+8      	; 0x1caa <__udivmodsi4_ep>
    1ca2:	a2 1b       	sub	r26, r18
    1ca4:	b3 0b       	sbc	r27, r19
    1ca6:	e4 0b       	sbc	r30, r20
    1ca8:	f5 0b       	sbc	r31, r21

00001caa <__udivmodsi4_ep>:
    1caa:	66 1f       	adc	r22, r22
    1cac:	77 1f       	adc	r23, r23
    1cae:	88 1f       	adc	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	1a 94       	dec	r1
    1cb4:	69 f7       	brne	.-38     	; 0x1c90 <__udivmodsi4_loop>
    1cb6:	60 95       	com	r22
    1cb8:	70 95       	com	r23
    1cba:	80 95       	com	r24
    1cbc:	90 95       	com	r25
    1cbe:	9b 01       	movw	r18, r22
    1cc0:	ac 01       	movw	r20, r24
    1cc2:	bd 01       	movw	r22, r26
    1cc4:	cf 01       	movw	r24, r30
    1cc6:	08 95       	ret

00001cc8 <__itoa_ncheck>:
    1cc8:	bb 27       	eor	r27, r27
    1cca:	4a 30       	cpi	r20, 0x0A	; 10
    1ccc:	31 f4       	brne	.+12     	; 0x1cda <__itoa_ncheck+0x12>
    1cce:	99 23       	and	r25, r25
    1cd0:	22 f4       	brpl	.+8      	; 0x1cda <__itoa_ncheck+0x12>
    1cd2:	bd e2       	ldi	r27, 0x2D	; 45
    1cd4:	90 95       	com	r25
    1cd6:	81 95       	neg	r24
    1cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cda:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__utoa_common>

00001cde <__utoa_ncheck>:
    1cde:	bb 27       	eor	r27, r27

00001ce0 <__utoa_common>:
    1ce0:	fb 01       	movw	r30, r22
    1ce2:	55 27       	eor	r21, r21
    1ce4:	aa 27       	eor	r26, r26
    1ce6:	88 0f       	add	r24, r24
    1ce8:	99 1f       	adc	r25, r25
    1cea:	aa 1f       	adc	r26, r26
    1cec:	a4 17       	cp	r26, r20
    1cee:	10 f0       	brcs	.+4      	; 0x1cf4 <__utoa_common+0x14>
    1cf0:	a4 1b       	sub	r26, r20
    1cf2:	83 95       	inc	r24
    1cf4:	50 51       	subi	r21, 0x10	; 16
    1cf6:	b9 f7       	brne	.-18     	; 0x1ce6 <__utoa_common+0x6>
    1cf8:	a0 5d       	subi	r26, 0xD0	; 208
    1cfa:	aa 33       	cpi	r26, 0x3A	; 58
    1cfc:	08 f0       	brcs	.+2      	; 0x1d00 <__utoa_common+0x20>
    1cfe:	a9 5d       	subi	r26, 0xD9	; 217
    1d00:	a1 93       	st	Z+, r26
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	79 f7       	brne	.-34     	; 0x1ce4 <__utoa_common+0x4>
    1d06:	b1 11       	cpse	r27, r1
    1d08:	b1 93       	st	Z+, r27
    1d0a:	11 92       	st	Z+, r1
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	0c 94 89 0e 	jmp	0x1d12	; 0x1d12 <strrev>

00001d12 <strrev>:
    1d12:	dc 01       	movw	r26, r24
    1d14:	fc 01       	movw	r30, r24
    1d16:	67 2f       	mov	r22, r23
    1d18:	71 91       	ld	r23, Z+
    1d1a:	77 23       	and	r23, r23
    1d1c:	e1 f7       	brne	.-8      	; 0x1d16 <strrev+0x4>
    1d1e:	32 97       	sbiw	r30, 0x02	; 2
    1d20:	04 c0       	rjmp	.+8      	; 0x1d2a <strrev+0x18>
    1d22:	7c 91       	ld	r23, X
    1d24:	6d 93       	st	X+, r22
    1d26:	70 83       	st	Z, r23
    1d28:	62 91       	ld	r22, -Z
    1d2a:	ae 17       	cp	r26, r30
    1d2c:	bf 07       	cpc	r27, r31
    1d2e:	c8 f3       	brcs	.-14     	; 0x1d22 <strrev+0x10>
    1d30:	08 95       	ret

00001d32 <_exit>:
    1d32:	f8 94       	cli

00001d34 <__stop_program>:
    1d34:	ff cf       	rjmp	.-2      	; 0x1d34 <__stop_program>
